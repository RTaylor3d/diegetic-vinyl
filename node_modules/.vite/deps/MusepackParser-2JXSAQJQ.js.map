{
  "version": 3,
  "sources": ["../../music-metadata/lib/musepack/MusepackParser.js", "../../music-metadata/lib/musepack/sv8/MpcSv8Parser.js", "../../music-metadata/lib/musepack/sv8/StreamVersion8.js", "../../music-metadata/lib/musepack/MusepackConentError.js", "../../music-metadata/lib/musepack/sv7/MpcSv7Parser.js", "../../music-metadata/lib/musepack/sv7/BitReader.js", "../../music-metadata/lib/musepack/sv7/StreamVersion7.js"],
  "sourcesContent": ["import initDebug from 'debug';\r\nimport * as Token from 'token-types';\r\nimport { AbstractID3Parser } from '../id3v2/AbstractID3Parser.js';\r\nimport { MpcSv8Parser } from './sv8/MpcSv8Parser.js';\r\nimport { MpcSv7Parser } from './sv7/MpcSv7Parser.js';\r\nimport { MusepackContentError } from './MusepackConentError.js';\r\nconst debug = initDebug('music-metadata:parser:musepack');\r\nexport class MusepackParser extends AbstractID3Parser {\r\n    async postId3v2Parse() {\r\n        const signature = await this.tokenizer.peekToken(new Token.StringType(3, 'latin1'));\r\n        let mpcParser;\r\n        switch (signature) {\r\n            case 'MP+': {\r\n                debug('Stream-version 7');\r\n                mpcParser = new MpcSv7Parser(this.metadata, this.tokenizer, this.options);\r\n                break;\r\n            }\r\n            case 'MPC': {\r\n                debug('Stream-version 8');\r\n                mpcParser = new MpcSv8Parser(this.metadata, this.tokenizer, this.options);\r\n                break;\r\n            }\r\n            default: {\r\n                throw new MusepackContentError('Invalid signature prefix');\r\n            }\r\n        }\r\n        return mpcParser.parse();\r\n    }\r\n}\r\n//# sourceMappingURL=MusepackParser.js.map", "import initDebug from 'debug';\r\nimport { BasicParser } from '../../common/BasicParser.js';\r\nimport { APEv2Parser } from '../../apev2/APEv2Parser.js';\r\nimport { FourCcToken } from '../../common/FourCC.js';\r\nimport * as SV8 from './StreamVersion8.js';\r\nimport { MusepackContentError } from '../MusepackConentError.js';\r\nconst debug = initDebug('music-metadata:parser:musepack');\r\nexport class MpcSv8Parser extends BasicParser {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.audioLength = 0;\r\n    }\r\n    async parse() {\r\n        const signature = await this.tokenizer.readToken(FourCcToken);\r\n        if (signature !== 'MPCK')\r\n            throw new MusepackContentError('Invalid Magic number');\r\n        this.metadata.setFormat('container', 'Musepack, SV8');\r\n        return this.parsePacket();\r\n    }\r\n    async parsePacket() {\r\n        const sv8reader = new SV8.StreamReader(this.tokenizer);\r\n        do {\r\n            const header = await sv8reader.readPacketHeader();\r\n            debug(`packet-header key=${header.key}, payloadLength=${header.payloadLength}`);\r\n            switch (header.key) {\r\n                case 'SH': { // Stream Header\r\n                    const sh = await sv8reader.readStreamHeader(header.payloadLength);\r\n                    this.metadata.setFormat('numberOfSamples', sh.sampleCount);\r\n                    this.metadata.setFormat('sampleRate', sh.sampleFrequency);\r\n                    this.metadata.setFormat('duration', sh.sampleCount / sh.sampleFrequency);\r\n                    this.metadata.setFormat('numberOfChannels', sh.channelCount);\r\n                    break;\r\n                }\r\n                case 'AP': // Audio Packet\r\n                    this.audioLength += header.payloadLength;\r\n                    await this.tokenizer.ignore(header.payloadLength);\r\n                    break;\r\n                case 'RG': // Replaygain\r\n                case 'EI': // Encoder Info\r\n                case 'SO': // Seek Table Offset\r\n                case 'ST': // Seek Table\r\n                case 'CT': // Chapter-Tag\r\n                    await this.tokenizer.ignore(header.payloadLength);\r\n                    break;\r\n                case 'SE': // Stream End\r\n                    if (this.metadata.format.duration) {\r\n                        this.metadata.setFormat('bitrate', this.audioLength * 8 / this.metadata.format.duration);\r\n                    }\r\n                    return APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\r\n                default:\r\n                    throw new MusepackContentError(`Unexpected header: ${header.key}`);\r\n            }\r\n        } while (true);\r\n    }\r\n}\r\n//# sourceMappingURL=MpcSv8Parser.js.map", "import * as Token from 'token-types';\r\nimport initDebug from 'debug';\r\nimport * as util from '../../common/Util.js';\r\nconst debug = initDebug('music-metadata:parser:musepack:sv8');\r\nconst PacketKey = new Token.StringType(2, 'latin1');\r\n/**\r\n * Stream Header Packet part 1\r\n * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket\r\n */\r\nconst SH_part1 = {\r\n    len: 5,\r\n    get: (buf, off) => {\r\n        return {\r\n            crc: Token.UINT32_LE.get(buf, off),\r\n            streamVersion: Token.UINT8.get(buf, off + 4)\r\n        };\r\n    }\r\n};\r\n/**\r\n * Stream Header Packet part 3\r\n * Ref: http://trac.musepack.net/musepack/wiki/SV8Specification#StreamHeaderPacket\r\n */\r\nconst SH_part3 = {\r\n    len: 2,\r\n    get: (buf, off) => {\r\n        return {\r\n            sampleFrequency: [44100, 48000, 37800, 32000][util.getBitAllignedNumber(buf, off, 0, 3)],\r\n            maxUsedBands: util.getBitAllignedNumber(buf, off, 3, 5),\r\n            channelCount: util.getBitAllignedNumber(buf, off + 1, 0, 4) + 1,\r\n            msUsed: util.isBitSet(buf, off + 1, 4),\r\n            audioBlockFrames: util.getBitAllignedNumber(buf, off + 1, 5, 3)\r\n        };\r\n    }\r\n};\r\nexport class StreamReader {\r\n    constructor(tokenizer) {\r\n        this.tokenizer = tokenizer;\r\n    }\r\n    async readPacketHeader() {\r\n        const key = await this.tokenizer.readToken(PacketKey);\r\n        const size = await this.readVariableSizeField();\r\n        return {\r\n            key,\r\n            payloadLength: size.value - 2 - size.len\r\n        };\r\n    }\r\n    async readStreamHeader(size) {\r\n        const streamHeader = {};\r\n        debug(`Reading SH at offset=${this.tokenizer.position}`);\r\n        const part1 = await this.tokenizer.readToken(SH_part1);\r\n        size -= SH_part1.len;\r\n        Object.assign(streamHeader, part1);\r\n        debug(`SH.streamVersion = ${part1.streamVersion}`);\r\n        const sampleCount = await this.readVariableSizeField();\r\n        size -= sampleCount.len;\r\n        streamHeader.sampleCount = sampleCount.value;\r\n        const bs = await this.readVariableSizeField();\r\n        size -= bs.len;\r\n        streamHeader.beginningOfSilence = bs.value;\r\n        const part3 = await this.tokenizer.readToken(SH_part3);\r\n        size -= SH_part3.len;\r\n        Object.assign(streamHeader, part3);\r\n        // assert.equal(size, 0);\r\n        await this.tokenizer.ignore(size);\r\n        return streamHeader;\r\n    }\r\n    async readVariableSizeField(len = 1, hb = 0) {\r\n        let n = await this.tokenizer.readNumber(Token.UINT8);\r\n        if ((n & 0x80) === 0) {\r\n            return { len, value: hb + n };\r\n        }\r\n        n &= 0x7F;\r\n        n += hb;\r\n        return this.readVariableSizeField(len + 1, n << 7);\r\n    }\r\n}\r\n//# sourceMappingURL=StreamVersion8.js.map", "import { makeUnexpectedFileContentError } from '../ParseError.js';\r\nexport class MusepackContentError extends makeUnexpectedFileContentError('Musepack') {\r\n}\r\n//# sourceMappingURL=MusepackConentError.js.map", "import initDebug from 'debug';\r\nimport { BasicParser } from '../../common/BasicParser.js';\r\nimport { APEv2Parser } from '../../apev2/APEv2Parser.js';\r\nimport { BitReader } from './BitReader.js';\r\nimport * as SV7 from './StreamVersion7.js';\r\nimport { MusepackContentError } from '../MusepackConentError.js';\r\nconst debug = initDebug('music-metadata:parser:musepack');\r\nexport class MpcSv7Parser extends BasicParser {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.bitreader = null;\r\n        this.audioLength = 0;\r\n        this.duration = null;\r\n    }\r\n    async parse() {\r\n        const header = await this.tokenizer.readToken(SV7.Header);\r\n        if (header.signature !== 'MP+')\r\n            throw new MusepackContentError('Unexpected magic number');\r\n        debug(`stream-version=${header.streamMajorVersion}.${header.streamMinorVersion}`);\r\n        this.metadata.setFormat('container', 'Musepack, SV7');\r\n        this.metadata.setFormat('sampleRate', header.sampleFrequency);\r\n        const numberOfSamples = 1152 * (header.frameCount - 1) + header.lastFrameLength;\r\n        this.metadata.setFormat('numberOfSamples', numberOfSamples);\r\n        this.duration = numberOfSamples / header.sampleFrequency;\r\n        this.metadata.setFormat('duration', this.duration);\r\n        this.bitreader = new BitReader(this.tokenizer);\r\n        this.metadata.setFormat('numberOfChannels', header.midSideStereo || header.intensityStereo ? 2 : 1);\r\n        const version = await this.bitreader.read(8);\r\n        this.metadata.setFormat('codec', (version / 100).toFixed(2));\r\n        await this.skipAudioData(header.frameCount);\r\n        debug(`End of audio stream, switching to APEv2, offset=${this.tokenizer.position}`);\r\n        return APEv2Parser.tryParseApeHeader(this.metadata, this.tokenizer, this.options);\r\n    }\r\n    async skipAudioData(frameCount) {\r\n        while (frameCount-- > 0) {\r\n            const frameLength = await this.bitreader.read(20);\r\n            this.audioLength += 20 + frameLength;\r\n            await this.bitreader.ignore(frameLength);\r\n        }\r\n        // last frame\r\n        const lastFrameLength = await this.bitreader.read(11);\r\n        this.audioLength += lastFrameLength;\r\n        if (this.duration !== null) {\r\n            this.metadata.setFormat('bitrate', this.audioLength / this.duration);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=MpcSv7Parser.js.map", "import * as Token from 'token-types';\r\nexport class BitReader {\r\n    constructor(tokenizer) {\r\n        this.tokenizer = tokenizer;\r\n        this.pos = 0;\r\n        this.dword = null;\r\n    }\r\n    /**\r\n     *\r\n     * @param bits 1..30 bits\r\n     */\r\n    async read(bits) {\r\n        while (this.dword === null) {\r\n            this.dword = await this.tokenizer.readToken(Token.UINT32_LE);\r\n        }\r\n        let out = this.dword;\r\n        this.pos += bits;\r\n        if (this.pos < 32) {\r\n            out >>>= (32 - this.pos);\r\n            return out & ((1 << bits) - 1);\r\n        }\r\n        this.pos -= 32;\r\n        if (this.pos === 0) {\r\n            this.dword = null;\r\n            return out & ((1 << bits) - 1);\r\n        }\r\n        this.dword = await this.tokenizer.readToken(Token.UINT32_LE);\r\n        if (this.pos) {\r\n            out <<= this.pos;\r\n            out |= this.dword >>> (32 - this.pos);\r\n        }\r\n        return out & ((1 << bits) - 1);\r\n    }\r\n    async ignore(bits) {\r\n        if (this.pos > 0) {\r\n            const remaining = 32 - this.pos;\r\n            this.dword = null;\r\n            bits -= remaining;\r\n            this.pos = 0;\r\n        }\r\n        const remainder = bits % 32;\r\n        const numOfWords = (bits - remainder) / 32;\r\n        await this.tokenizer.ignore(numOfWords * 4);\r\n        return this.read(remainder);\r\n    }\r\n}\r\n//# sourceMappingURL=BitReader.js.map", "import * as Token from 'token-types';\r\nimport * as util from '../../common/Util.js';\r\n/**\r\n * BASIC STRUCTURE\r\n */\r\nexport const Header = {\r\n    len: 6 * 4,\r\n    get: (buf, off) => {\r\n        const header = {\r\n            // word 0\r\n            signature: new TextDecoder('latin1').decode(buf.subarray(off, off + 3)),\r\n            // versionIndex number * 1000 (3.81 = 3810) (remember that 4-byte alignment causes this to take 4-bytes)\r\n            streamMinorVersion: util.getBitAllignedNumber(buf, off + 3, 0, 4),\r\n            streamMajorVersion: util.getBitAllignedNumber(buf, off + 3, 4, 4),\r\n            // word 1\r\n            frameCount: Token.UINT32_LE.get(buf, off + 4),\r\n            // word 2\r\n            maxLevel: Token.UINT16_LE.get(buf, off + 8),\r\n            sampleFrequency: [44100, 48000, 37800, 32000][util.getBitAllignedNumber(buf, off + 10, 0, 2)],\r\n            link: util.getBitAllignedNumber(buf, off + 10, 2, 2),\r\n            profile: util.getBitAllignedNumber(buf, off + 10, 4, 4),\r\n            maxBand: util.getBitAllignedNumber(buf, off + 11, 0, 6),\r\n            intensityStereo: util.isBitSet(buf, off + 11, 6),\r\n            midSideStereo: util.isBitSet(buf, off + 11, 7),\r\n            // word 3\r\n            titlePeak: Token.UINT16_LE.get(buf, off + 12),\r\n            titleGain: Token.UINT16_LE.get(buf, off + 14),\r\n            // word 4\r\n            albumPeak: Token.UINT16_LE.get(buf, off + 16),\r\n            albumGain: Token.UINT16_LE.get(buf, off + 18),\r\n            // word\r\n            lastFrameLength: (Token.UINT32_LE.get(buf, off + 20) >>> 20) & 0x7FF,\r\n            trueGapless: util.isBitSet(buf, off + 23, 0)\r\n        };\r\n        header.lastFrameLength = header.trueGapless ? (Token.UINT32_LE.get(buf, 20) >>> 20) & 0x7FF : 0;\r\n        return header;\r\n    }\r\n};\r\n//# sourceMappingURL=StreamVersion7.js.map"],
  "mappings": "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",
  "names": ["import_debug", "import_debug", "initDebug", "debug", "initDebug", "import_debug", "debug", "initDebug", "debug", "initDebug"]
}
