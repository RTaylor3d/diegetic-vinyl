{
  "version": 3,
  "sources": ["../../music-metadata/lib/id3v2/ID3v2Token.js"],
  "sourcesContent": ["import * as Token from 'token-types';\nimport * as util from '../common/Util.js';\n/**\n * The picture type according to the ID3v2 APIC frame\n * Ref: http://id3.org/id3v2.3.0#Attached_picture\n */\nexport var AttachedPictureType;\n(function (AttachedPictureType) {\n    AttachedPictureType[AttachedPictureType[\"Other\"] = 0] = \"Other\";\n    AttachedPictureType[AttachedPictureType[\"32x32 pixels 'file icon' (PNG only)\"] = 1] = \"32x32 pixels 'file icon' (PNG only)\";\n    AttachedPictureType[AttachedPictureType[\"Other file icon\"] = 2] = \"Other file icon\";\n    AttachedPictureType[AttachedPictureType[\"Cover (front)\"] = 3] = \"Cover (front)\";\n    AttachedPictureType[AttachedPictureType[\"Cover (back)\"] = 4] = \"Cover (back)\";\n    AttachedPictureType[AttachedPictureType[\"Leaflet page\"] = 5] = \"Leaflet page\";\n    AttachedPictureType[AttachedPictureType[\"Media (e.g. label side of CD)\"] = 6] = \"Media (e.g. label side of CD)\";\n    AttachedPictureType[AttachedPictureType[\"Lead artist/lead performer/soloist\"] = 7] = \"Lead artist/lead performer/soloist\";\n    AttachedPictureType[AttachedPictureType[\"Artist/performer\"] = 8] = \"Artist/performer\";\n    AttachedPictureType[AttachedPictureType[\"Conductor\"] = 9] = \"Conductor\";\n    AttachedPictureType[AttachedPictureType[\"Band/Orchestra\"] = 10] = \"Band/Orchestra\";\n    AttachedPictureType[AttachedPictureType[\"Composer\"] = 11] = \"Composer\";\n    AttachedPictureType[AttachedPictureType[\"Lyricist/text writer\"] = 12] = \"Lyricist/text writer\";\n    AttachedPictureType[AttachedPictureType[\"Recording Location\"] = 13] = \"Recording Location\";\n    AttachedPictureType[AttachedPictureType[\"During recording\"] = 14] = \"During recording\";\n    AttachedPictureType[AttachedPictureType[\"During performance\"] = 15] = \"During performance\";\n    AttachedPictureType[AttachedPictureType[\"Movie/video screen capture\"] = 16] = \"Movie/video screen capture\";\n    AttachedPictureType[AttachedPictureType[\"A bright coloured fish\"] = 17] = \"A bright coloured fish\";\n    AttachedPictureType[AttachedPictureType[\"Illustration\"] = 18] = \"Illustration\";\n    AttachedPictureType[AttachedPictureType[\"Band/artist logotype\"] = 19] = \"Band/artist logotype\";\n    AttachedPictureType[AttachedPictureType[\"Publisher/Studio logotype\"] = 20] = \"Publisher/Studio logotype\";\n})(AttachedPictureType || (AttachedPictureType = {}));\n/**\n * https://id3.org/id3v2.3.0#Synchronised_lyrics.2Ftext\n */\nexport var LyricsContentType;\n(function (LyricsContentType) {\n    LyricsContentType[LyricsContentType[\"other\"] = 0] = \"other\";\n    LyricsContentType[LyricsContentType[\"lyrics\"] = 1] = \"lyrics\";\n    LyricsContentType[LyricsContentType[\"text\"] = 2] = \"text\";\n    LyricsContentType[LyricsContentType[\"movement_part\"] = 3] = \"movement_part\";\n    LyricsContentType[LyricsContentType[\"events\"] = 4] = \"events\";\n    LyricsContentType[LyricsContentType[\"chord\"] = 5] = \"chord\";\n    LyricsContentType[LyricsContentType[\"trivia_pop\"] = 6] = \"trivia_pop\";\n})(LyricsContentType || (LyricsContentType = {}));\nexport var TimestampFormat;\n(function (TimestampFormat) {\n    TimestampFormat[TimestampFormat[\"notSynchronized0\"] = 0] = \"notSynchronized0\";\n    TimestampFormat[TimestampFormat[\"mpegFrameNumber\"] = 1] = \"mpegFrameNumber\";\n    TimestampFormat[TimestampFormat[\"milliseconds\"] = 2] = \"milliseconds\";\n})(TimestampFormat || (TimestampFormat = {}));\n/**\n * 28 bits (representing up to 256MB) integer, the msb is 0 to avoid 'false syncsignals'.\n * 4 * %0xxxxxxx\n */\nexport const UINT32SYNCSAFE = {\n    get: (buf, off) => {\n        return buf[off + 3] & 0x7f | ((buf[off + 2]) << 7) |\n            ((buf[off + 1]) << 14) | ((buf[off]) << 21);\n    },\n    len: 4\n};\n/**\n * ID3v2 header\n * Ref: http://id3.org/id3v2.3.0#ID3v2_header\n * ToDo\n */\nexport const ID3v2Header = {\n    len: 10,\n    get: (buf, off) => {\n        return {\n            // ID3v2/file identifier   \"ID3\"\n            fileIdentifier: new Token.StringType(3, 'ascii').get(buf, off),\n            // ID3v2 versionIndex\n            version: {\n                major: Token.INT8.get(buf, off + 3),\n                revision: Token.INT8.get(buf, off + 4)\n            },\n            // ID3v2 flags\n            flags: {\n                // Unsynchronisation\n                unsynchronisation: util.getBit(buf, off + 5, 7),\n                // Extended header\n                isExtendedHeader: util.getBit(buf, off + 5, 6),\n                // Experimental indicator\n                expIndicator: util.getBit(buf, off + 5, 5),\n                footer: util.getBit(buf, off + 5, 4)\n            },\n            size: UINT32SYNCSAFE.get(buf, off + 6)\n        };\n    }\n};\nexport const ExtendedHeader = {\n    len: 10,\n    get: (buf, off) => {\n        return {\n            // Extended header size\n            size: Token.UINT32_BE.get(buf, off),\n            // Extended Flags\n            extendedFlags: Token.UINT16_BE.get(buf, off + 4),\n            // Size of padding\n            sizeOfPadding: Token.UINT32_BE.get(buf, off + 6),\n            // CRC data present\n            crcDataPresent: util.getBit(buf, off + 4, 31)\n        };\n    }\n};\nexport const TextEncodingToken = {\n    len: 1,\n    get: (uint8Array, off) => {\n        switch (uint8Array[off]) {\n            case 0x00:\n                return { encoding: 'latin1' }; // binary\n            case 0x01:\n                return { encoding: 'utf-16le', bom: true };\n            case 0x02:\n                return { encoding: 'utf-16le', bom: false };\n            case 0x03:\n                return { encoding: 'utf8', bom: false };\n            default:\n                return { encoding: 'utf8', bom: false };\n        }\n    }\n};\n/**\n * Used to read first portion of `SYLT` frame\n */\nexport const TextHeader = {\n    len: 4,\n    get: (uint8Array, off) => {\n        return {\n            encoding: TextEncodingToken.get(uint8Array, off),\n            language: new Token.StringType(3, 'latin1').get(uint8Array, off + 1)\n        };\n    }\n};\n/**\n * Used to read first portion of `SYLT` frame\n */\nexport const SyncTextHeader = {\n    len: 6,\n    get: (uint8Array, off) => {\n        const text = TextHeader.get(uint8Array, off);\n        return {\n            encoding: text.encoding,\n            language: text.language,\n            timeStampFormat: Token.UINT8.get(uint8Array, off + 4),\n            contentType: Token.UINT8.get(uint8Array, off + 5)\n        };\n    }\n};\n//# sourceMappingURL=ID3v2Token.js.map"],
  "mappings": "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",
  "names": ["AttachedPictureType", "LyricsContentType", "TimestampFormat"]
}
