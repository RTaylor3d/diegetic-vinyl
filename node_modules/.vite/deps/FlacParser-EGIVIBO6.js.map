{
  "version": 3,
  "sources": ["../../music-metadata/lib/flac/FlacParser.js"],
  "sourcesContent": ["import { UINT16_BE, UINT24_BE, Uint8ArrayType } from 'token-types';\nimport initDebug from 'debug';\nimport * as util from '../common/Util.js';\nimport { VorbisPictureToken } from '../ogg/vorbis/Vorbis.js';\nimport { AbstractID3Parser } from '../id3v2/AbstractID3Parser.js';\nimport { FourCcToken } from '../common/FourCC.js';\nimport { VorbisParser } from '../ogg/vorbis/VorbisParser.js';\nimport { VorbisDecoder } from '../ogg/vorbis/VorbisDecoder.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nconst debug = initDebug('music-metadata:parser:FLAC');\nclass FlacContentError extends makeUnexpectedFileContentError('FLAC') {\n}\n/**\n * FLAC supports up to 128 kinds of metadata blocks; currently the following are defined:\n * ref: https://xiph.org/flac/format.html#metadata_block\n */\nvar BlockType;\n(function (BlockType) {\n    BlockType[BlockType[\"STREAMINFO\"] = 0] = \"STREAMINFO\";\n    BlockType[BlockType[\"PADDING\"] = 1] = \"PADDING\";\n    BlockType[BlockType[\"APPLICATION\"] = 2] = \"APPLICATION\";\n    BlockType[BlockType[\"SEEKTABLE\"] = 3] = \"SEEKTABLE\";\n    BlockType[BlockType[\"VORBIS_COMMENT\"] = 4] = \"VORBIS_COMMENT\";\n    BlockType[BlockType[\"CUESHEET\"] = 5] = \"CUESHEET\";\n    BlockType[BlockType[\"PICTURE\"] = 6] = \"PICTURE\";\n})(BlockType || (BlockType = {}));\nexport class FlacParser extends AbstractID3Parser {\n    constructor() {\n        super(...arguments);\n        this.vorbisParser = new VorbisParser(this.metadata, this.options);\n        this.padding = 0;\n    }\n    async postId3v2Parse() {\n        const fourCC = await this.tokenizer.readToken(FourCcToken);\n        if (fourCC.toString() !== 'fLaC') {\n            throw new FlacContentError('Invalid FLAC preamble');\n        }\n        let blockHeader;\n        do {\n            // Read block header\n            blockHeader = await this.tokenizer.readToken(BlockHeader);\n            // Parse block data\n            await this.parseDataBlock(blockHeader);\n        } while (!blockHeader.lastBlock);\n        if (this.tokenizer.fileInfo.size && this.metadata.format.duration) {\n            const dataSize = this.tokenizer.fileInfo.size - this.tokenizer.position;\n            this.metadata.setFormat('bitrate', 8 * dataSize / this.metadata.format.duration);\n        }\n    }\n    async parseDataBlock(blockHeader) {\n        debug(`blockHeader type=${blockHeader.type}, length=${blockHeader.length}`);\n        switch (blockHeader.type) {\n            case BlockType.STREAMINFO:\n                return this.parseBlockStreamInfo(blockHeader.length);\n            case BlockType.PADDING:\n                this.padding += blockHeader.length;\n                break;\n            case BlockType.APPLICATION:\n                break;\n            case BlockType.SEEKTABLE:\n                break;\n            case BlockType.VORBIS_COMMENT:\n                return this.parseComment(blockHeader.length);\n            case BlockType.CUESHEET:\n                break;\n            case BlockType.PICTURE:\n                await this.parsePicture(blockHeader.length);\n                return;\n            default:\n                this.metadata.addWarning(`Unknown block type: ${blockHeader.type}`);\n        }\n        // Ignore data block\n        return this.tokenizer.ignore(blockHeader.length).then();\n    }\n    /**\n     * Parse STREAMINFO\n     */\n    async parseBlockStreamInfo(dataLen) {\n        if (dataLen !== BlockStreamInfo.len)\n            throw new FlacContentError('Unexpected block-stream-info length');\n        const streamInfo = await this.tokenizer.readToken(BlockStreamInfo);\n        this.metadata.setFormat('container', 'FLAC');\n        this.metadata.setFormat('codec', 'FLAC');\n        this.metadata.setFormat('lossless', true);\n        this.metadata.setFormat('numberOfChannels', streamInfo.channels);\n        this.metadata.setFormat('bitsPerSample', streamInfo.bitsPerSample);\n        this.metadata.setFormat('sampleRate', streamInfo.sampleRate);\n        if (streamInfo.totalSamples > 0) {\n            this.metadata.setFormat('duration', streamInfo.totalSamples / streamInfo.sampleRate);\n        }\n    }\n    /**\n     * Parse VORBIS_COMMENT\n     * Ref: https://www.xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-640004.2.3\n     */\n    async parseComment(dataLen) {\n        const data = await this.tokenizer.readToken(new Uint8ArrayType(dataLen));\n        const decoder = new VorbisDecoder(data, 0);\n        decoder.readStringUtf8(); // vendor (skip)\n        const commentListLength = decoder.readInt32();\n        const tags = new Array(commentListLength);\n        for (let i = 0; i < commentListLength; i++) {\n            tags[i] = decoder.parseUserComment();\n        }\n        await Promise.all(tags.map(tag => this.vorbisParser.addTag(tag.key, tag.value)));\n    }\n    async parsePicture(dataLen) {\n        if (this.options.skipCovers) {\n            return this.tokenizer.ignore(dataLen);\n        }\n        const picture = await this.tokenizer.readToken(new VorbisPictureToken(dataLen));\n        this.vorbisParser.addTag('METADATA_BLOCK_PICTURE', picture);\n    }\n}\nconst BlockHeader = {\n    len: 4,\n    get: (buf, off) => {\n        return {\n            lastBlock: util.getBit(buf, off, 7),\n            type: util.getBitAllignedNumber(buf, off, 1, 7),\n            length: UINT24_BE.get(buf, off + 1)\n        };\n    }\n};\n/**\n * METADATA_BLOCK_DATA\n * Ref: https://xiph.org/flac/format.html#metadata_block_streaminfo\n */\nconst BlockStreamInfo = {\n    len: 34,\n    get: (buf, off) => {\n        return {\n            // The minimum block size (in samples) used in the stream.\n            minimumBlockSize: UINT16_BE.get(buf, off),\n            // The maximum block size (in samples) used in the stream.\n            // (Minimum blocksize == maximum blocksize) implies a fixed-blocksize stream.\n            maximumBlockSize: UINT16_BE.get(buf, off + 2) / 1000,\n            // The minimum frame size (in bytes) used in the stream.\n            // May be 0 to imply the value is not known.\n            minimumFrameSize: UINT24_BE.get(buf, off + 4),\n            // The maximum frame size (in bytes) used in the stream.\n            // May be 0 to imply the value is not known.\n            maximumFrameSize: UINT24_BE.get(buf, off + 7),\n            // Sample rate in Hz. Though 20 bits are available,\n            // the maximum sample rate is limited by the structure of frame headers to 655350Hz.\n            // Also, a value of 0 is invalid.\n            sampleRate: UINT24_BE.get(buf, off + 10) >> 4,\n            // probably slower: sampleRate: common.getBitAllignedNumber(buf, off + 10, 0, 20),\n            // (number of channels)-1. FLAC supports from 1 to 8 channels\n            channels: util.getBitAllignedNumber(buf, off + 12, 4, 3) + 1,\n            // bits per sample)-1.\n            // FLAC supports from 4 to 32 bits per sample. Currently the reference encoder and decoders only support up to 24 bits per sample.\n            bitsPerSample: util.getBitAllignedNumber(buf, off + 12, 7, 5) + 1,\n            // Total samples in stream.\n            // 'Samples' means inter-channel sample, i.e. one second of 44.1Khz audio will have 44100 samples regardless of the number of channels.\n            // A value of zero here means the number of total samples is unknown.\n            totalSamples: util.getBitAllignedNumber(buf, off + 13, 4, 36),\n            // the MD5 hash of the file (see notes for usage... it's a littly tricky)\n            fileMD5: new Uint8ArrayType(16).get(buf, off + 18)\n        };\n    }\n};\n//# sourceMappingURL=FlacParser.js.map"],
  "mappings": "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",
  "names": ["initDebug", "BlockType"]
}
