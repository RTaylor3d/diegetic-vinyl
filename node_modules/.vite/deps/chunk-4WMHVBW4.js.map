{
  "version": 3,
  "sources": ["../../uint8array-extras/index.js", "../../music-metadata/lib/common/Util.js"],
  "sourcesContent": ["const objectToString = Object.prototype.toString;\r\nconst uint8ArrayStringified = '[object Uint8Array]';\r\nconst arrayBufferStringified = '[object ArrayBuffer]';\r\n\r\nfunction isType(value, typeConstructor, typeStringified) {\r\n\tif (!value) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tif (value.constructor === typeConstructor) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\treturn objectToString.call(value) === typeStringified;\r\n}\r\n\r\nexport function isUint8Array(value) {\r\n\treturn isType(value, Uint8Array, uint8ArrayStringified);\r\n}\r\n\r\nfunction isArrayBuffer(value) {\r\n\treturn isType(value, ArrayBuffer, arrayBufferStringified);\r\n}\r\n\r\nfunction isUint8ArrayOrArrayBuffer(value) {\r\n\treturn isUint8Array(value) || isArrayBuffer(value);\r\n}\r\n\r\nexport function assertUint8Array(value) {\r\n\tif (!isUint8Array(value)) {\r\n\t\tthrow new TypeError(`Expected \\`Uint8Array\\`, got \\`${typeof value}\\``);\r\n\t}\r\n}\r\n\r\nexport function assertUint8ArrayOrArrayBuffer(value) {\r\n\tif (!isUint8ArrayOrArrayBuffer(value)) {\r\n\t\tthrow new TypeError(`Expected \\`Uint8Array\\` or \\`ArrayBuffer\\`, got \\`${typeof value}\\``);\r\n\t}\r\n}\r\n\r\nexport function toUint8Array(value) {\r\n\tif (value instanceof ArrayBuffer) {\r\n\t\treturn new Uint8Array(value);\r\n\t}\r\n\r\n\tif (ArrayBuffer.isView(value)) {\r\n\t\treturn new Uint8Array(value.buffer, value.byteOffset, value.byteLength);\r\n\t}\r\n\r\n\tthrow new TypeError(`Unsupported value, got \\`${typeof value}\\`.`);\r\n}\r\n\r\nexport function concatUint8Arrays(arrays, totalLength) {\r\n\tif (arrays.length === 0) {\r\n\t\treturn new Uint8Array(0);\r\n\t}\r\n\r\n\ttotalLength ??= arrays.reduce((accumulator, currentValue) => accumulator + currentValue.length, 0);\r\n\r\n\tconst returnValue = new Uint8Array(totalLength);\r\n\r\n\tlet offset = 0;\r\n\tfor (const array of arrays) {\r\n\t\tassertUint8Array(array);\r\n\t\treturnValue.set(array, offset);\r\n\t\toffset += array.length;\r\n\t}\r\n\r\n\treturn returnValue;\r\n}\r\n\r\nexport function areUint8ArraysEqual(a, b) {\r\n\tassertUint8Array(a);\r\n\tassertUint8Array(b);\r\n\r\n\tif (a === b) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\tif (a.length !== b.length) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// eslint-disable-next-line unicorn/no-for-loop\r\n\tfor (let index = 0; index < a.length; index++) {\r\n\t\tif (a[index] !== b[index]) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n\r\nexport function compareUint8Arrays(a, b) {\r\n\tassertUint8Array(a);\r\n\tassertUint8Array(b);\r\n\r\n\tconst length = Math.min(a.length, b.length);\r\n\r\n\tfor (let index = 0; index < length; index++) {\r\n\t\tconst diff = a[index] - b[index];\r\n\t\tif (diff !== 0) {\r\n\t\t\treturn Math.sign(diff);\r\n\t\t}\r\n\t}\r\n\r\n\t// At this point, all the compared elements are equal.\r\n\t// The shorter array should come first if the arrays are of different lengths.\r\n\treturn Math.sign(a.length - b.length);\r\n}\r\n\r\nconst cachedDecoders = {\r\n\tutf8: new globalThis.TextDecoder('utf8'),\r\n};\r\n\r\nexport function uint8ArrayToString(array, encoding = 'utf8') {\r\n\tassertUint8ArrayOrArrayBuffer(array);\r\n\tcachedDecoders[encoding] ??= new globalThis.TextDecoder(encoding);\r\n\treturn cachedDecoders[encoding].decode(array);\r\n}\r\n\r\nfunction assertString(value) {\r\n\tif (typeof value !== 'string') {\r\n\t\tthrow new TypeError(`Expected \\`string\\`, got \\`${typeof value}\\``);\r\n\t}\r\n}\r\n\r\nconst cachedEncoder = new globalThis.TextEncoder();\r\n\r\nexport function stringToUint8Array(string) {\r\n\tassertString(string);\r\n\treturn cachedEncoder.encode(string);\r\n}\r\n\r\nfunction base64ToBase64Url(base64) {\r\n\treturn base64.replaceAll('+', '-').replaceAll('/', '_').replace(/=+$/, '');\r\n}\r\n\r\nfunction base64UrlToBase64(base64url) {\r\n\treturn base64url.replaceAll('-', '+').replaceAll('_', '/');\r\n}\r\n\r\n// Reference: https://phuoc.ng/collection/this-vs-that/concat-vs-push/\r\nconst MAX_BLOCK_SIZE = 65_535;\r\n\r\nexport function uint8ArrayToBase64(array, {urlSafe = false} = {}) {\r\n\tassertUint8Array(array);\r\n\r\n\tlet base64;\r\n\r\n\tif (array.length < MAX_BLOCK_SIZE) {\r\n\t// Required as `btoa` and `atob` don't properly support Unicode: https://developer.mozilla.org/en-US/docs/Glossary/Base64#the_unicode_problem\r\n\t\tbase64 = globalThis.btoa(String.fromCodePoint.apply(this, array));\r\n\t} else {\r\n\t\tbase64 = '';\r\n\t\tfor (const value of array) {\r\n\t\t\tbase64 += String.fromCodePoint(value);\r\n\t\t}\r\n\r\n\t\tbase64 = globalThis.btoa(base64);\r\n\t}\r\n\r\n\treturn urlSafe ? base64ToBase64Url(base64) : base64;\r\n}\r\n\r\nexport function base64ToUint8Array(base64String) {\r\n\tassertString(base64String);\r\n\treturn Uint8Array.from(globalThis.atob(base64UrlToBase64(base64String)), x => x.codePointAt(0));\r\n}\r\n\r\nexport function stringToBase64(string, {urlSafe = false} = {}) {\r\n\tassertString(string);\r\n\treturn uint8ArrayToBase64(stringToUint8Array(string), {urlSafe});\r\n}\r\n\r\nexport function base64ToString(base64String) {\r\n\tassertString(base64String);\r\n\treturn uint8ArrayToString(base64ToUint8Array(base64String));\r\n}\r\n\r\nconst byteToHexLookupTable = Array.from({length: 256}, (_, index) => index.toString(16).padStart(2, '0'));\r\n\r\nexport function uint8ArrayToHex(array) {\r\n\tassertUint8Array(array);\r\n\r\n\t// Concatenating a string is faster than using an array.\r\n\tlet hexString = '';\r\n\r\n\t// eslint-disable-next-line unicorn/no-for-loop -- Max performance is critical.\r\n\tfor (let index = 0; index < array.length; index++) {\r\n\t\thexString += byteToHexLookupTable[array[index]];\r\n\t}\r\n\r\n\treturn hexString;\r\n}\r\n\r\nconst hexToDecimalLookupTable = {\r\n\t0: 0,\r\n\t1: 1,\r\n\t2: 2,\r\n\t3: 3,\r\n\t4: 4,\r\n\t5: 5,\r\n\t6: 6,\r\n\t7: 7,\r\n\t8: 8,\r\n\t9: 9,\r\n\ta: 10,\r\n\tb: 11,\r\n\tc: 12,\r\n\td: 13,\r\n\te: 14,\r\n\tf: 15,\r\n\tA: 10,\r\n\tB: 11,\r\n\tC: 12,\r\n\tD: 13,\r\n\tE: 14,\r\n\tF: 15,\r\n};\r\n\r\nexport function hexToUint8Array(hexString) {\r\n\tassertString(hexString);\r\n\r\n\tif (hexString.length % 2 !== 0) {\r\n\t\tthrow new Error('Invalid Hex string length.');\r\n\t}\r\n\r\n\tconst resultLength = hexString.length / 2;\r\n\tconst bytes = new Uint8Array(resultLength);\r\n\r\n\tfor (let index = 0; index < resultLength; index++) {\r\n\t\tconst highNibble = hexToDecimalLookupTable[hexString[index * 2]];\r\n\t\tconst lowNibble = hexToDecimalLookupTable[hexString[(index * 2) + 1]];\r\n\r\n\t\tif (highNibble === undefined || lowNibble === undefined) {\r\n\t\t\tthrow new Error(`Invalid Hex character encountered at position ${index * 2}`);\r\n\t\t}\r\n\r\n\t\tbytes[index] = (highNibble << 4) | lowNibble; // eslint-disable-line no-bitwise\r\n\t}\r\n\r\n\treturn bytes;\r\n}\r\n\r\n/**\r\n@param {DataView} view\r\n@returns {number}\r\n*/\r\nexport function getUintBE(view) {\r\n\tconst {byteLength} = view;\r\n\r\n\tif (byteLength === 6) {\r\n\t\treturn (view.getUint16(0) * (2 ** 32)) + view.getUint32(2);\r\n\t}\r\n\r\n\tif (byteLength === 5) {\r\n\t\treturn (view.getUint8(0) * (2 ** 32)) + view.getUint32(1);\r\n\t}\r\n\r\n\tif (byteLength === 4) {\r\n\t\treturn view.getUint32(0);\r\n\t}\r\n\r\n\tif (byteLength === 3) {\r\n\t\treturn (view.getUint8(0) * (2 ** 16)) + view.getUint16(1);\r\n\t}\r\n\r\n\tif (byteLength === 2) {\r\n\t\treturn view.getUint16(0);\r\n\t}\r\n\r\n\tif (byteLength === 1) {\r\n\t\treturn view.getUint8(0);\r\n\t}\r\n}\r\n\r\n/**\r\n@param {Uint8Array} array\r\n@param {Uint8Array} value\r\n@returns {number}\r\n*/\r\nexport function indexOf(array, value) {\r\n\tconst arrayLength = array.length;\r\n\tconst valueLength = value.length;\r\n\r\n\tif (valueLength === 0) {\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tif (valueLength > arrayLength) {\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tconst validOffsetLength = arrayLength - valueLength;\r\n\r\n\tfor (let index = 0; index <= validOffsetLength; index++) {\r\n\t\tlet isMatch = true;\r\n\t\tfor (let index2 = 0; index2 < valueLength; index2++) {\r\n\t\t\tif (array[index + index2] !== value[index2]) {\r\n\t\t\t\tisMatch = false;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (isMatch) {\r\n\t\t\treturn index;\r\n\t\t}\r\n\t}\r\n\r\n\treturn -1;\r\n}\r\n\r\n/**\r\n@param {Uint8Array} array\r\n@param {Uint8Array} value\r\n@returns {boolean}\r\n*/\r\nexport function includes(array, value) {\r\n\treturn indexOf(array, value) !== -1;\r\n}\r\n", "import { StringType } from 'token-types';\r\nimport { FieldDecodingError } from '../ParseError.js';\r\nexport function getBit(buf, off, bit) {\r\n    return (buf[off] & (1 << bit)) !== 0;\r\n}\r\n/**\r\n * Found delimiting zero in uint8Array\r\n * @param uint8Array Uint8Array to find the zero delimiter in\r\n * @param start Offset in uint8Array\r\n * @param end Last position to parse in uint8Array\r\n * @param encoding The string encoding used\r\n * @return Absolute position on uint8Array where zero found\r\n */\r\nexport function findZero(uint8Array, start, end, encoding) {\r\n    let i = start;\r\n    if (encoding === 'utf-16le') {\r\n        while (uint8Array[i] !== 0 || uint8Array[i + 1] !== 0) {\r\n            if (i >= end)\r\n                return end;\r\n            i += 2;\r\n        }\r\n        return i;\r\n    }\r\n    while (uint8Array[i] !== 0) {\r\n        if (i >= end)\r\n            return end;\r\n        i++;\r\n    }\r\n    return i;\r\n}\r\nexport function trimRightNull(x) {\r\n    const pos0 = x.indexOf('\\0');\r\n    return pos0 === -1 ? x : x.substr(0, pos0);\r\n}\r\nfunction swapBytes(uint8Array) {\r\n    const l = uint8Array.length;\r\n    if ((l & 1) !== 0)\r\n        throw new FieldDecodingError('Buffer length must be even');\r\n    for (let i = 0; i < l; i += 2) {\r\n        const a = uint8Array[i];\r\n        uint8Array[i] = uint8Array[i + 1];\r\n        uint8Array[i + 1] = a;\r\n    }\r\n    return uint8Array;\r\n}\r\n/**\r\n * Decode string\r\n */\r\nexport function decodeString(uint8Array, encoding) {\r\n    // annoying workaround for a double BOM issue\r\n    // https://github.com/leetreveil/musicmetadata/issues/84\r\n    if (uint8Array[0] === 0xFF && uint8Array[1] === 0xFE) { // little endian\r\n        return decodeString(uint8Array.subarray(2), encoding);\r\n    }\r\n    if (encoding === 'utf-16le' && uint8Array[0] === 0xFE && uint8Array[1] === 0xFF) {\r\n        // BOM, indicating big endian decoding\r\n        if ((uint8Array.length & 1) !== 0)\r\n            throw new FieldDecodingError('Expected even number of octets for 16-bit unicode string');\r\n        return decodeString(swapBytes(uint8Array), encoding);\r\n    }\r\n    return new StringType(uint8Array.length, encoding).get(uint8Array, 0);\r\n}\r\nexport function stripNulls(str) {\r\n    str = str.replace(/^\\x00+/g, '');\r\n    str = str.replace(/\\x00+$/g, '');\r\n    return str;\r\n}\r\n/**\r\n * Read bit-aligned number start from buffer\r\n * Total offset in bits = byteOffset * 8 + bitOffset\r\n * @param source Byte buffer\r\n * @param byteOffset Starting offset in bytes\r\n * @param bitOffset Starting offset in bits: 0 = lsb\r\n * @param len Length of number in bits\r\n * @return Decoded bit aligned number\r\n */\r\nexport function getBitAllignedNumber(source, byteOffset, bitOffset, len) {\r\n    const byteOff = byteOffset + ~~(bitOffset / 8);\r\n    const bitOff = bitOffset % 8;\r\n    let value = source[byteOff];\r\n    value &= 0xff >> bitOff;\r\n    const bitsRead = 8 - bitOff;\r\n    const bitsLeft = len - bitsRead;\r\n    if (bitsLeft < 0) {\r\n        value >>= (8 - bitOff - len);\r\n    }\r\n    else if (bitsLeft > 0) {\r\n        value <<= bitsLeft;\r\n        value |= getBitAllignedNumber(source, byteOffset, bitOffset + bitsRead, bitsLeft);\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Read bit-aligned number start from buffer\r\n * Total offset in bits = byteOffset * 8 + bitOffset\r\n * @param source Byte Uint8Array\r\n * @param byteOffset Starting offset in bytes\r\n * @param bitOffset Starting offset in bits: 0 = most significant bit, 7 is the least significant bit\r\n * @return True if bit is set\r\n */\r\nexport function isBitSet(source, byteOffset, bitOffset) {\r\n    return getBitAllignedNumber(source, byteOffset, bitOffset, 1) === 1;\r\n}\r\nexport function a2hex(str) {\r\n    const arr = [];\r\n    for (let i = 0, l = str.length; i < l; i++) {\r\n        const hex = Number(str.charCodeAt(i)).toString(16);\r\n        arr.push(hex.length === 1 ? `0${hex}` : hex);\r\n    }\r\n    return arr.join(' ');\r\n}\r\n/**\r\n * Convert power ratio to DB\r\n * ratio: [0..1]\r\n */\r\nexport function ratioToDb(ratio) {\r\n    return 10 * Math.log10(ratio);\r\n}\r\n/**\r\n * Convert dB to ratio\r\n * db Decibels\r\n */\r\nexport function dbToRatio(dB) {\r\n    return 10 ** (dB / 10);\r\n}\r\n/**\r\n * Convert replay gain to ratio and Decibel\r\n * @param value string holding a ratio like '0.034' or '-7.54 dB'\r\n */\r\nexport function toRatio(value) {\r\n    const ps = value.split(' ').map(p => p.trim().toLowerCase());\r\n    // @ts-ignore\r\n    if (ps.length >= 1) {\r\n        const v = Number.parseFloat(ps[0]);\r\n        return ps.length === 2 && ps[1] === 'db' ? {\r\n            dB: v,\r\n            ratio: dbToRatio(v)\r\n        } : {\r\n            dB: ratioToDb(v),\r\n            ratio: v\r\n        };\r\n    }\r\n}\r\n//# sourceMappingURL=Util.js.map"],
  "mappings": "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",
  "names": []
}
