{
  "version": 3,
  "sources": ["../../music-metadata/lib/mp4/MP4Parser.js", "../../music-metadata/lib/mp4/Atom.js", "../../music-metadata/lib/mp4/AtomToken.js"],
  "sourcesContent": ["import initDebug from 'debug';\r\nimport * as Token from 'token-types';\r\nimport { BasicParser } from '../common/BasicParser.js';\r\nimport { Genres } from '../id3v1/ID3v1Parser.js';\r\nimport { Atom } from './Atom.js';\r\nimport * as AtomToken from './AtomToken.js';\r\nimport { Mp4ContentError } from './AtomToken.js';\r\nimport { TrackType } from '../type.js';\r\nimport { uint8ArrayToHex, uint8ArrayToString } from 'uint8array-extras';\r\nconst debug = initDebug('music-metadata:parser:MP4');\r\nconst tagFormat = 'iTunes';\r\nconst encoderDict = {\r\n    raw: {\r\n        lossy: false,\r\n        format: 'raw'\r\n    },\r\n    MAC3: {\r\n        lossy: true,\r\n        format: 'MACE 3:1'\r\n    },\r\n    MAC6: {\r\n        lossy: true,\r\n        format: 'MACE 6:1'\r\n    },\r\n    ima4: {\r\n        lossy: true,\r\n        format: 'IMA 4:1'\r\n    },\r\n    ulaw: {\r\n        lossy: true,\r\n        format: 'uLaw 2:1'\r\n    },\r\n    alaw: {\r\n        lossy: true,\r\n        format: 'uLaw 2:1'\r\n    },\r\n    Qclp: {\r\n        lossy: true,\r\n        format: 'QUALCOMM PureVoice'\r\n    },\r\n    '.mp3': {\r\n        lossy: true,\r\n        format: 'MPEG-1 layer 3'\r\n    },\r\n    alac: {\r\n        lossy: false,\r\n        format: 'ALAC'\r\n    },\r\n    'ac-3': {\r\n        lossy: true,\r\n        format: 'AC-3'\r\n    },\r\n    mp4a: {\r\n        lossy: true,\r\n        format: 'MPEG-4/AAC'\r\n    },\r\n    mp4s: {\r\n        lossy: true,\r\n        format: 'MP4S'\r\n    },\r\n    // Closed Captioning Media, https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-SW87\r\n    c608: {\r\n        lossy: true,\r\n        format: 'CEA-608'\r\n    },\r\n    c708: {\r\n        lossy: true,\r\n        format: 'CEA-708'\r\n    }\r\n};\r\nfunction distinct(value, index, self) {\r\n    return self.indexOf(value) === index;\r\n}\r\n/*\r\n * Parser for the MP4 (MPEG-4 Part 14) container format\r\n * Standard: ISO/IEC 14496-14\r\n * supporting:\r\n * - QuickTime container\r\n * - MP4 File Format\r\n * - 3GPP file format\r\n * - 3GPP2 file format\r\n *\r\n * MPEG-4 Audio / Part 3 (.m4a)& MPEG 4 Video (m4v, mp4) extension.\r\n * Support for Apple iTunes tags as found in a M4A/M4V files.\r\n * Ref:\r\n *   https://en.wikipedia.org/wiki/ISO_base_media_file_format\r\n *   https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/Metadata/Metadata.html\r\n *   http://atomicparsley.sourceforge.net/mpeg-4files.html\r\n *   https://github.com/sergiomb2/libmp4v2/wiki/iTunesMetadata\r\n *   https://wiki.multimedia.cx/index.php/QuickTime_container\r\n */\r\nexport class MP4Parser extends BasicParser {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.tracks = [];\r\n        this.atomParsers = {\r\n            /**\r\n             * Parse movie header (mvhd) atom\r\n             * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-56313\r\n             */\r\n            mvhd: async (len) => {\r\n                const mvhd = await this.tokenizer.readToken(new AtomToken.MvhdAtom(len));\r\n                this.metadata.setFormat('creationTime', mvhd.creationTime);\r\n                this.metadata.setFormat('modificationTime', mvhd.modificationTime);\r\n            },\r\n            /**\r\n             * Parse media header (mdhd) atom\r\n             * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25615\r\n             */\r\n            mdhd: async (len) => {\r\n                const mdhd_data = await this.tokenizer.readToken(new AtomToken.MdhdAtom(len));\r\n                // this.parse_mxhd(mdhd_data, this.currentTrack);\r\n                const td = this.getTrackDescription();\r\n                td.creationTime = mdhd_data.creationTime;\r\n                td.modificationTime = mdhd_data.modificationTime;\r\n                td.timeScale = mdhd_data.timeScale;\r\n                td.duration = mdhd_data.duration;\r\n            },\r\n            chap: async (len) => {\r\n                const td = this.getTrackDescription();\r\n                const trackIds = [];\r\n                while (len >= Token.UINT32_BE.len) {\r\n                    trackIds.push(await this.tokenizer.readNumber(Token.UINT32_BE));\r\n                    len -= Token.UINT32_BE.len;\r\n                }\r\n                td.chapterList = trackIds;\r\n            },\r\n            tkhd: async (len) => {\r\n                const track = (await this.tokenizer.readToken(new AtomToken.TrackHeaderAtom(len)));\r\n                this.tracks.push(track);\r\n            },\r\n            /**\r\n             * Parse mdat atom.\r\n             * Will scan for chapters\r\n             */\r\n            mdat: async (len) => {\r\n                this.audioLengthInBytes = len;\r\n                this.calculateBitRate();\r\n                if (this.options.includeChapters) {\r\n                    const trackWithChapters = this.tracks.filter(track => track.chapterList);\r\n                    if (trackWithChapters.length === 1) {\r\n                        const chapterTrackIds = trackWithChapters[0].chapterList;\r\n                        const chapterTracks = this.tracks.filter(track => chapterTrackIds.indexOf(track.trackId) !== -1);\r\n                        if (chapterTracks.length === 1) {\r\n                            return this.parseChapterTrack(chapterTracks[0], trackWithChapters[0], len);\r\n                        }\r\n                    }\r\n                }\r\n                await this.tokenizer.ignore(len);\r\n            },\r\n            ftyp: async (len) => {\r\n                const types = [];\r\n                while (len > 0) {\r\n                    const ftype = await this.tokenizer.readToken(AtomToken.ftyp);\r\n                    len -= AtomToken.ftyp.len;\r\n                    const value = ftype.type.replace(/\\W/g, '');\r\n                    if (value.length > 0) {\r\n                        types.push(value); // unshift for backward compatibility\r\n                    }\r\n                }\r\n                debug(`ftyp: ${types.join('/')}`);\r\n                const x = types.filter(distinct).join('/');\r\n                this.metadata.setFormat('container', x);\r\n            },\r\n            /**\r\n             * Parse sample description atom\r\n             */\r\n            stsd: async (len) => {\r\n                const stsd = await this.tokenizer.readToken(new AtomToken.StsdAtom(len));\r\n                const trackDescription = this.getTrackDescription();\r\n                trackDescription.soundSampleDescription = stsd.table.map(dfEntry => this.parseSoundSampleDescription(dfEntry));\r\n            },\r\n            /**\r\n             * sample-to-Chunk Atoms\r\n             */\r\n            stsc: async (len) => {\r\n                const stsc = await this.tokenizer.readToken(new AtomToken.StscAtom(len));\r\n                this.getTrackDescription().sampleToChunkTable = stsc.entries;\r\n            },\r\n            /**\r\n             * time-to-sample table\r\n             */\r\n            stts: async (len) => {\r\n                const stts = await this.tokenizer.readToken(new AtomToken.SttsAtom(len));\r\n                this.getTrackDescription().timeToSampleTable = stts.entries;\r\n            },\r\n            /**\r\n             * Parse sample-sizes atom ('stsz')\r\n             */\r\n            stsz: async (len) => {\r\n                const stsz = await this.tokenizer.readToken(new AtomToken.StszAtom(len));\r\n                const td = this.getTrackDescription();\r\n                td.sampleSize = stsz.sampleSize;\r\n                td.sampleSizeTable = stsz.entries;\r\n            },\r\n            /**\r\n             * Parse chunk-offset atom ('stco')\r\n             */\r\n            stco: async (len) => {\r\n                const stco = await this.tokenizer.readToken(new AtomToken.StcoAtom(len));\r\n                this.getTrackDescription().chunkOffsetTable = stco.entries; // remember chunk offsets\r\n            },\r\n            date: async (len) => {\r\n                const date = await this.tokenizer.readToken(new Token.StringType(len, 'utf-8'));\r\n                await this.addTag('date', date);\r\n            }\r\n        };\r\n    }\r\n    static read_BE_Integer(array, signed) {\r\n        const integerType = (signed ? 'INT' : 'UINT') + array.length * 8 + (array.length > 1 ? '_BE' : '');\r\n        const token = Token[integerType];\r\n        if (!token) {\r\n            throw new Mp4ContentError(`Token for integer type not found: \"${integerType}\"`);\r\n        }\r\n        return Number(token.get(array, 0));\r\n    }\r\n    async parse() {\r\n        this.tracks = [];\r\n        let remainingFileSize = this.tokenizer.fileInfo.size || 0;\r\n        while (!this.tokenizer.fileInfo.size || remainingFileSize > 0) {\r\n            try {\r\n                const token = await this.tokenizer.peekToken(AtomToken.Header);\r\n                if (token.name === '\\0\\0\\0\\0') {\r\n                    const errMsg = `Error at offset=${this.tokenizer.position}: box.id=0`;\r\n                    debug(errMsg);\r\n                    this.addWarning(errMsg);\r\n                    break;\r\n                }\r\n            }\r\n            catch (error) {\r\n                if (error instanceof Error) {\r\n                    const errMsg = `Error at offset=${this.tokenizer.position}: ${error.message}`;\r\n                    debug(errMsg);\r\n                    this.addWarning(errMsg);\r\n                }\r\n                else\r\n                    throw error;\r\n                break;\r\n            }\r\n            const rootAtom = await Atom.readAtom(this.tokenizer, (atom, remaining) => this.handleAtom(atom, remaining), null, remainingFileSize);\r\n            remainingFileSize -= rootAtom.header.length === BigInt(0) ? remainingFileSize : Number(rootAtom.header.length);\r\n        }\r\n        // Post process metadata\r\n        const formatList = [];\r\n        this.tracks.forEach(track => {\r\n            const trackFormats = [];\r\n            track.soundSampleDescription.forEach(ssd => {\r\n                const streamInfo = {};\r\n                const encoderInfo = encoderDict[ssd.dataFormat];\r\n                if (encoderInfo) {\r\n                    trackFormats.push(encoderInfo.format);\r\n                    streamInfo.codecName = encoderInfo.format;\r\n                }\r\n                else {\r\n                    streamInfo.codecName = `<${ssd.dataFormat}>`;\r\n                }\r\n                if (ssd.description) {\r\n                    const { description } = ssd;\r\n                    if (description.sampleRate > 0) {\r\n                        streamInfo.type = TrackType.audio;\r\n                        streamInfo.audio = {\r\n                            samplingFrequency: description.sampleRate,\r\n                            bitDepth: description.sampleSize,\r\n                            channels: description.numAudioChannels\r\n                        };\r\n                    }\r\n                }\r\n                this.metadata.addStreamInfo(streamInfo);\r\n            });\r\n            if (trackFormats.length >= 1) {\r\n                formatList.push(trackFormats.join('/'));\r\n            }\r\n        });\r\n        if (formatList.length > 0) {\r\n            this.metadata.setFormat('codec', formatList.filter(distinct).join('+'));\r\n        }\r\n        const audioTracks = this.tracks.filter(track => {\r\n            return track.soundSampleDescription.length >= 1 && track.soundSampleDescription[0].description && track.soundSampleDescription[0].description.numAudioChannels > 0;\r\n        });\r\n        if (audioTracks.length >= 1) {\r\n            const audioTrack = audioTracks[0];\r\n            if (audioTrack.timeScale > 0) {\r\n                const duration = audioTrack.duration / audioTrack.timeScale; // calculate duration in seconds\r\n                this.metadata.setFormat('duration', duration);\r\n            }\r\n            const ssd = audioTrack.soundSampleDescription[0];\r\n            if (ssd.description) {\r\n                this.metadata.setFormat('sampleRate', ssd.description.sampleRate);\r\n                this.metadata.setFormat('bitsPerSample', ssd.description.sampleSize);\r\n                this.metadata.setFormat('numberOfChannels', ssd.description.numAudioChannels);\r\n                if (audioTrack.timeScale === 0 && audioTrack.timeToSampleTable.length > 0) {\r\n                    const totalSampleSize = audioTrack.timeToSampleTable\r\n                        .map(ttstEntry => ttstEntry.count * ttstEntry.duration)\r\n                        .reduce((total, sampleSize) => total + sampleSize);\r\n                    const duration = totalSampleSize / ssd.description.sampleRate;\r\n                    this.metadata.setFormat('duration', duration);\r\n                }\r\n            }\r\n            const encoderInfo = encoderDict[ssd.dataFormat];\r\n            if (encoderInfo) {\r\n                this.metadata.setFormat('lossless', !encoderInfo.lossy);\r\n            }\r\n            this.calculateBitRate();\r\n        }\r\n    }\r\n    async handleAtom(atom, remaining) {\r\n        if (atom.parent) {\r\n            switch (atom.parent.header.name) {\r\n                case 'ilst':\r\n                case '<id>':\r\n                    return this.parseMetadataItemData(atom);\r\n            }\r\n        }\r\n        // const payloadLength = atom.getPayloadLength(remaining);\r\n        if (this.atomParsers[atom.header.name]) {\r\n            return this.atomParsers[atom.header.name](remaining);\r\n        }\r\n        debug(`No parser for atom path=${atom.atomPath}, payload-len=${remaining}, ignoring atom`);\r\n        await this.tokenizer.ignore(remaining);\r\n    }\r\n    getTrackDescription() {\r\n        return this.tracks[this.tracks.length - 1];\r\n    }\r\n    calculateBitRate() {\r\n        if (this.audioLengthInBytes && this.metadata.format.duration) {\r\n            this.metadata.setFormat('bitrate', 8 * this.audioLengthInBytes / this.metadata.format.duration);\r\n        }\r\n    }\r\n    async addTag(id, value) {\r\n        await this.metadata.addTag(tagFormat, id, value);\r\n    }\r\n    addWarning(message) {\r\n        debug(`Warning: ${message}`);\r\n        this.metadata.addWarning(message);\r\n    }\r\n    /**\r\n     * Parse data of Meta-item-list-atom (item of 'ilst' atom)\r\n     * @param metaAtom\r\n     * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW8\r\n     */\r\n    parseMetadataItemData(metaAtom) {\r\n        let tagKey = metaAtom.header.name;\r\n        return metaAtom.readAtoms(this.tokenizer, async (child, remaining) => {\r\n            const payLoadLength = child.getPayloadLength(remaining);\r\n            switch (child.header.name) {\r\n                case 'data': // value atom\r\n                    return this.parseValueAtom(tagKey, child);\r\n                case 'name': // name atom (optional)\r\n                case 'mean':\r\n                case 'rate': {\r\n                    const name = await this.tokenizer.readToken(new AtomToken.NameAtom(payLoadLength));\r\n                    tagKey += `:${name.name}`;\r\n                    break;\r\n                }\r\n                default: {\r\n                    const uint8Array = await this.tokenizer.readToken(new Token.Uint8ArrayType(payLoadLength));\r\n                    this.addWarning(`Unsupported meta-item: ${tagKey}[${child.header.name}] => value=${uint8ArrayToHex(uint8Array)} ascii=${uint8ArrayToString(uint8Array, 'ascii')}`);\r\n                }\r\n            }\r\n        }, metaAtom.getPayloadLength(0));\r\n    }\r\n    async parseValueAtom(tagKey, metaAtom) {\r\n        const dataAtom = await this.tokenizer.readToken(new AtomToken.DataAtom(Number(metaAtom.header.length) - AtomToken.Header.len));\r\n        if (dataAtom.type.set !== 0) {\r\n            throw new Mp4ContentError(`Unsupported type-set != 0: ${dataAtom.type.set}`);\r\n        }\r\n        // Use well-known-type table\r\n        // Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW35\r\n        switch (dataAtom.type.type) {\r\n            case 0: // reserved: Reserved for use where no type needs to be indicated\r\n                switch (tagKey) {\r\n                    case 'trkn':\r\n                    case 'disk': {\r\n                        const num = Token.UINT8.get(dataAtom.value, 3);\r\n                        const of = Token.UINT8.get(dataAtom.value, 5);\r\n                        // console.log(\"  %s[data] = %s/%s\", tagKey, num, of);\r\n                        await this.addTag(tagKey, `${num}/${of}`);\r\n                        break;\r\n                    }\r\n                    case 'gnre': {\r\n                        const genreInt = Token.UINT8.get(dataAtom.value, 1);\r\n                        const genreStr = Genres[genreInt - 1];\r\n                        // console.log(\"  %s[data] = %s\", tagKey, genreStr);\r\n                        await this.addTag(tagKey, genreStr);\r\n                        break;\r\n                    }\r\n                    case 'rate': {\r\n                        const rate = new TextDecoder('ascii').decode(dataAtom.value);\r\n                        await this.addTag(tagKey, rate);\r\n                        break;\r\n                    }\r\n                    default:\r\n                        debug(`unknown proprietary value type for: ${metaAtom.atomPath}`);\r\n                }\r\n                break;\r\n            case 1: // UTF-8: Without any count or NULL terminator\r\n            case 18: // Unknown: Found in m4b in combination with a '©gen' tag\r\n                await this.addTag(tagKey, new TextDecoder('utf-8').decode(dataAtom.value));\r\n                break;\r\n            case 13: // JPEG\r\n                if (this.options.skipCovers)\r\n                    break;\r\n                await this.addTag(tagKey, {\r\n                    format: 'image/jpeg',\r\n                    data: Uint8Array.from(dataAtom.value)\r\n                });\r\n                break;\r\n            case 14: // PNG\r\n                if (this.options.skipCovers)\r\n                    break;\r\n                await this.addTag(tagKey, {\r\n                    format: 'image/png',\r\n                    data: Uint8Array.from(dataAtom.value)\r\n                });\r\n                break;\r\n            case 21: // BE Signed Integer\r\n                await this.addTag(tagKey, MP4Parser.read_BE_Integer(dataAtom.value, true));\r\n                break;\r\n            case 22: // BE Unsigned Integer\r\n                await this.addTag(tagKey, MP4Parser.read_BE_Integer(dataAtom.value, false));\r\n                break;\r\n            case 65: // An 8-bit signed integer\r\n                await this.addTag(tagKey, Token.UINT8.get(dataAtom.value, 0));\r\n                break;\r\n            case 66: // A big-endian 16-bit signed integer\r\n                await this.addTag(tagKey, Token.UINT16_BE.get(dataAtom.value, 0));\r\n                break;\r\n            case 67: // A big-endian 32-bit signed integer\r\n                await this.addTag(tagKey, Token.UINT32_BE.get(dataAtom.value, 0));\r\n                break;\r\n            default:\r\n                this.addWarning(`atom key=${tagKey}, has unknown well-known-type (data-type): ${dataAtom.type.type}`);\r\n        }\r\n    }\r\n    /**\r\n     * @param sampleDescription\r\n     * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-128916\r\n     */\r\n    parseSoundSampleDescription(sampleDescription) {\r\n        const ssd = {\r\n            dataFormat: sampleDescription.dataFormat,\r\n            dataReferenceIndex: sampleDescription.dataReferenceIndex\r\n        };\r\n        let offset = 0;\r\n        if (sampleDescription.description) {\r\n            const version = AtomToken.SoundSampleDescriptionVersion.get(sampleDescription.description, offset);\r\n            offset += AtomToken.SoundSampleDescriptionVersion.len;\r\n            if (version.version === 0 || version.version === 1) {\r\n                // Sound Sample Description (Version 0)\r\n                ssd.description = AtomToken.SoundSampleDescriptionV0.get(sampleDescription.description, offset);\r\n            }\r\n            else {\r\n                debug(`Warning: sound-sample-description ${version} not implemented`);\r\n            }\r\n        }\r\n        return ssd;\r\n    }\r\n    async parseChapterTrack(chapterTrack, track, len) {\r\n        if (!chapterTrack.sampleSize) {\r\n            if (chapterTrack.chunkOffsetTable.length !== chapterTrack.sampleSizeTable.length)\r\n                throw new Error('Expected equal chunk-offset-table & sample-size-table length.');\r\n        }\r\n        const chapters = [];\r\n        for (let i = 0; i < chapterTrack.chunkOffsetTable.length && len > 0; ++i) {\r\n            const chunkOffset = chapterTrack.chunkOffsetTable[i];\r\n            const nextChunkLen = chunkOffset - this.tokenizer.position;\r\n            const sampleSize = chapterTrack.sampleSize > 0 ? chapterTrack.sampleSize : chapterTrack.sampleSizeTable[i];\r\n            len -= nextChunkLen + sampleSize;\r\n            if (len < 0)\r\n                throw new Mp4ContentError('Chapter chunk exceeding token length');\r\n            await this.tokenizer.ignore(nextChunkLen);\r\n            const title = await this.tokenizer.readToken(new AtomToken.ChapterText(sampleSize));\r\n            debug(`Chapter ${i + 1}: ${title}`);\r\n            const chapter = {\r\n                title,\r\n                sampleOffset: this.findSampleOffset(track, this.tokenizer.position)\r\n            };\r\n            debug(`Chapter title=${chapter.title}, offset=${chapter.sampleOffset}/${this.tracks[0].duration}`);\r\n            chapters.push(chapter);\r\n        }\r\n        this.metadata.setFormat('chapters', chapters);\r\n        await this.tokenizer.ignore(len);\r\n    }\r\n    findSampleOffset(track, chapterOffset) {\r\n        let totalDuration = 0;\r\n        track.timeToSampleTable.forEach(e => {\r\n            totalDuration += e.count * e.duration;\r\n        });\r\n        debug(`Total duration=${totalDuration}`);\r\n        let chunkIndex = 0;\r\n        while (chunkIndex < track.chunkOffsetTable.length && track.chunkOffsetTable[chunkIndex] < chapterOffset) {\r\n            ++chunkIndex;\r\n        }\r\n        return this.getChunkDuration(chunkIndex + 1, track);\r\n    }\r\n    getChunkDuration(chunkId, track) {\r\n        let ttsi = 0;\r\n        let ttsc = track.timeToSampleTable[ttsi].count;\r\n        let ttsd = track.timeToSampleTable[ttsi].duration;\r\n        let curChunkId = 1;\r\n        let samplesPerChunk = this.getSamplesPerChunk(curChunkId, track.sampleToChunkTable);\r\n        let totalDuration = 0;\r\n        while (curChunkId < chunkId) {\r\n            const nrOfSamples = Math.min(ttsc, samplesPerChunk);\r\n            totalDuration += nrOfSamples * ttsd;\r\n            ttsc -= nrOfSamples;\r\n            samplesPerChunk -= nrOfSamples;\r\n            if (samplesPerChunk === 0) {\r\n                ++curChunkId;\r\n                samplesPerChunk = this.getSamplesPerChunk(curChunkId, track.sampleToChunkTable);\r\n            }\r\n            else {\r\n                ++ttsi;\r\n                ttsc = track.timeToSampleTable[ttsi].count;\r\n                ttsd = track.timeToSampleTable[ttsi].duration;\r\n            }\r\n        }\r\n        return totalDuration;\r\n    }\r\n    getSamplesPerChunk(chunkId, stcTable) {\r\n        for (let i = 0; i < stcTable.length - 1; ++i) {\r\n            if (chunkId >= stcTable[i].firstChunk && chunkId < stcTable[i + 1].firstChunk) {\r\n                return stcTable[i].samplesPerChunk;\r\n            }\r\n        }\r\n        return stcTable[stcTable.length - 1].samplesPerChunk;\r\n    }\r\n}\r\n//# sourceMappingURL=MP4Parser.js.map", "import initDebug from 'debug';\r\nimport * as AtomToken from './AtomToken.js';\r\nimport { Header } from './AtomToken.js';\r\nconst debug = initDebug('music-metadata:parser:MP4:Atom');\r\nexport class Atom {\r\n    static async readAtom(tokenizer, dataHandler, parent, remaining) {\r\n        // Parse atom header\r\n        const offset = tokenizer.position;\r\n        debug(`Reading next token on offset=${offset}...`); //  buf.toString('ascii')\r\n        const header = await tokenizer.readToken(AtomToken.Header);\r\n        const extended = header.length === 1n;\r\n        if (extended) {\r\n            header.length = await tokenizer.readToken(AtomToken.ExtendedSize);\r\n        }\r\n        const atomBean = new Atom(header, extended, parent);\r\n        const payloadLength = atomBean.getPayloadLength(remaining);\r\n        debug(`parse atom name=${atomBean.atomPath}, extended=${atomBean.extended}, offset=${offset}, len=${atomBean.header.length}`); //  buf.toString('ascii')\r\n        await atomBean.readData(tokenizer, dataHandler, payloadLength);\r\n        return atomBean;\r\n    }\r\n    constructor(header, extended, parent) {\r\n        this.header = header;\r\n        this.extended = extended;\r\n        this.parent = parent;\r\n        this.children = [];\r\n        this.atomPath = (this.parent ? `${this.parent.atomPath}.` : '') + this.header.name;\r\n    }\r\n    getHeaderLength() {\r\n        return this.extended ? 16 : 8;\r\n    }\r\n    getPayloadLength(remaining) {\r\n        return (this.header.length === 0n ? remaining : Number(this.header.length)) - this.getHeaderLength();\r\n    }\r\n    async readAtoms(tokenizer, dataHandler, size) {\r\n        while (size > 0) {\r\n            const atomBean = await Atom.readAtom(tokenizer, dataHandler, this, size);\r\n            this.children.push(atomBean);\r\n            size -= atomBean.header.length === 0n ? size : Number(atomBean.header.length);\r\n        }\r\n    }\r\n    async readData(tokenizer, dataHandler, remaining) {\r\n        switch (this.header.name) {\r\n            // \"Container\" atoms, contains nested atoms\r\n            case 'moov': // The Movie Atom: contains other atoms\r\n            case 'udta': // User defined atom\r\n            case 'trak':\r\n            case 'mdia': // Media atom\r\n            case 'minf': // Media Information Atom\r\n            case 'stbl': // The Sample Table Atom\r\n            case '<id>':\r\n            case 'ilst':\r\n            case 'tref':\r\n                return this.readAtoms(tokenizer, dataHandler, this.getPayloadLength(remaining));\r\n            case 'meta': { // Metadata Atom, ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW8\r\n                // meta has 4 bytes of padding, ignore\r\n                const peekHeader = await tokenizer.peekToken(Header);\r\n                const paddingLength = peekHeader.name === 'hdlr' ? 0 : 4;\r\n                await tokenizer.ignore(paddingLength);\r\n                return this.readAtoms(tokenizer, dataHandler, this.getPayloadLength(remaining) - paddingLength);\r\n            }\r\n            default:\r\n                return dataHandler(this, remaining);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=Atom.js.map", "import * as Token from 'token-types';\r\nimport initDebug from 'debug';\r\nimport { FourCcToken } from '../common/FourCC.js';\r\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\r\nconst debug = initDebug('music-metadata:parser:MP4:atom');\r\nexport class Mp4ContentError extends makeUnexpectedFileContentError('MP4') {\r\n}\r\nexport const Header = {\r\n    len: 8,\r\n    get: (buf, off) => {\r\n        const length = Token.UINT32_BE.get(buf, off);\r\n        if (length < 0)\r\n            throw new Mp4ContentError('Invalid atom header length');\r\n        return {\r\n            length: BigInt(length),\r\n            name: new Token.StringType(4, 'latin1').get(buf, off + 4)\r\n        };\r\n    },\r\n    put: (buf, off, hdr) => {\r\n        Token.UINT32_BE.put(buf, off, Number(hdr.length));\r\n        return FourCcToken.put(buf, off + 4, hdr.name);\r\n    }\r\n};\r\n/**\r\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap1/qtff1.html#//apple_ref/doc/uid/TP40000939-CH203-38190\r\n */\r\nexport const ExtendedSize = Token.UINT64_BE;\r\nexport const ftyp = {\r\n    len: 4,\r\n    get: (buf, off) => {\r\n        return {\r\n            type: new Token.StringType(4, 'ascii').get(buf, off)\r\n        };\r\n    }\r\n};\r\nexport const tkhd = {\r\n    len: 4,\r\n    get: (buf, off) => {\r\n        return {\r\n            type: new Token.StringType(4, 'ascii').get(buf, off)\r\n        };\r\n    }\r\n};\r\n/**\r\n * Token: Movie Header Atom\r\n */\r\nexport const mhdr = {\r\n    len: 8,\r\n    get: (buf, off) => {\r\n        return {\r\n            version: Token.UINT8.get(buf, off),\r\n            flags: Token.UINT24_BE.get(buf, off + 1),\r\n            nextItemID: Token.UINT32_BE.get(buf, off + 4)\r\n        };\r\n    }\r\n};\r\n/**\r\n * Base class for 'fixed' length atoms.\r\n * In some cases these atoms are longer then the sum of the described fields.\r\n * Issue: https://github.com/Borewit/music-metadata/issues/120\r\n */\r\nexport class FixedLengthAtom {\r\n    /**\r\n     *\r\n     * @param {number} len Length as specified in the size field\r\n     * @param {number} expLen Total length of sum of specified fields in the standard\r\n     * @param atomId Atom ID\r\n     */\r\n    constructor(len, expLen, atomId) {\r\n        this.len = len;\r\n        if (len < expLen) {\r\n            throw new Mp4ContentError(`Atom ${atomId} expected to be ${expLen}, but specifies ${len} bytes long.`);\r\n        }\r\n        if (len > expLen) {\r\n            debug(`Warning: atom ${atomId} expected to be ${expLen}, but was actually ${len} bytes long.`);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Timestamp stored in seconds since Mac Epoch (1 January 1904)\r\n */\r\nconst SecondsSinceMacEpoch = {\r\n    len: 4,\r\n    get: (buf, off) => {\r\n        const secondsSinceUnixEpoch = Token.UINT32_BE.get(buf, off) - 2082844800;\r\n        return new Date(secondsSinceUnixEpoch * 1000);\r\n    }\r\n};\r\n/**\r\n * Token: Media Header Atom\r\n * Ref:\r\n * - https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-SW34\r\n * - https://wiki.multimedia.cx/index.php/QuickTime_container#mdhd\r\n */\r\nexport class MdhdAtom extends FixedLengthAtom {\r\n    constructor(len) {\r\n        super(len, 24, 'mdhd');\r\n        this.len = len;\r\n    }\r\n    get(buf, off) {\r\n        return {\r\n            version: Token.UINT8.get(buf, off + 0),\r\n            flags: Token.UINT24_BE.get(buf, off + 1),\r\n            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),\r\n            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),\r\n            timeScale: Token.UINT32_BE.get(buf, off + 12),\r\n            duration: Token.UINT32_BE.get(buf, off + 16),\r\n            language: Token.UINT16_BE.get(buf, off + 20),\r\n            quality: Token.UINT16_BE.get(buf, off + 22)\r\n        };\r\n    }\r\n}\r\n/**\r\n * Token: Movie Header Atom\r\n */\r\nexport class MvhdAtom extends FixedLengthAtom {\r\n    constructor(len) {\r\n        super(len, 100, 'mvhd');\r\n        this.len = len;\r\n    }\r\n    get(buf, off) {\r\n        return {\r\n            version: Token.UINT8.get(buf, off),\r\n            flags: Token.UINT24_BE.get(buf, off + 1),\r\n            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),\r\n            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),\r\n            timeScale: Token.UINT32_BE.get(buf, off + 12),\r\n            duration: Token.UINT32_BE.get(buf, off + 16),\r\n            preferredRate: Token.UINT32_BE.get(buf, off + 20),\r\n            preferredVolume: Token.UINT16_BE.get(buf, off + 24),\r\n            // ignore reserver: 10 bytes\r\n            // ignore matrix structure: 36 bytes\r\n            previewTime: Token.UINT32_BE.get(buf, off + 72),\r\n            previewDuration: Token.UINT32_BE.get(buf, off + 76),\r\n            posterTime: Token.UINT32_BE.get(buf, off + 80),\r\n            selectionTime: Token.UINT32_BE.get(buf, off + 84),\r\n            selectionDuration: Token.UINT32_BE.get(buf, off + 88),\r\n            currentTime: Token.UINT32_BE.get(buf, off + 92),\r\n            nextTrackID: Token.UINT32_BE.get(buf, off + 96)\r\n        };\r\n    }\r\n}\r\n/**\r\n * Data Atom Structure\r\n */\r\nexport class DataAtom {\r\n    constructor(len) {\r\n        this.len = len;\r\n    }\r\n    get(buf, off) {\r\n        return {\r\n            type: {\r\n                set: Token.UINT8.get(buf, off + 0),\r\n                type: Token.UINT24_BE.get(buf, off + 1)\r\n            },\r\n            locale: Token.UINT24_BE.get(buf, off + 4),\r\n            value: new Token.Uint8ArrayType(this.len - 8).get(buf, off + 8)\r\n        };\r\n    }\r\n}\r\n/**\r\n * Data Atom Structure\r\n * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW31\r\n */\r\nexport class NameAtom {\r\n    constructor(len) {\r\n        this.len = len;\r\n    }\r\n    get(buf, off) {\r\n        return {\r\n            version: Token.UINT8.get(buf, off),\r\n            flags: Token.UINT24_BE.get(buf, off + 1),\r\n            name: new Token.StringType(this.len - 4, 'utf-8').get(buf, off + 4)\r\n        };\r\n    }\r\n}\r\n/**\r\n * Track Header Atoms structure\r\n * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25550\r\n */\r\nexport class TrackHeaderAtom {\r\n    constructor(len) {\r\n        this.len = len;\r\n    }\r\n    get(buf, off) {\r\n        return {\r\n            version: Token.UINT8.get(buf, off),\r\n            flags: Token.UINT24_BE.get(buf, off + 1),\r\n            creationTime: SecondsSinceMacEpoch.get(buf, off + 4),\r\n            modificationTime: SecondsSinceMacEpoch.get(buf, off + 8),\r\n            trackId: Token.UINT32_BE.get(buf, off + 12),\r\n            // reserved 4 bytes\r\n            duration: Token.UINT32_BE.get(buf, off + 20),\r\n            layer: Token.UINT16_BE.get(buf, off + 24),\r\n            alternateGroup: Token.UINT16_BE.get(buf, off + 26),\r\n            volume: Token.UINT16_BE.get(buf, off + 28) // ToDo: fixed point\r\n            // ToDo: add remaining fields\r\n        };\r\n    }\r\n}\r\n/**\r\n * Atom: Sample Description Atom ('stsd')\r\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25691\r\n */\r\nconst stsdHeader = {\r\n    len: 8,\r\n    get: (buf, off) => {\r\n        return {\r\n            version: Token.UINT8.get(buf, off),\r\n            flags: Token.UINT24_BE.get(buf, off + 1),\r\n            numberOfEntries: Token.UINT32_BE.get(buf, off + 4)\r\n        };\r\n    }\r\n};\r\n/**\r\n * Atom: Sample Description Atom ('stsd')\r\n * Ref: https://developer.apple.com/documentation/quicktime-file-format/sample_description_atom\r\n */\r\nclass SampleDescriptionTable {\r\n    constructor(len) {\r\n        this.len = len;\r\n    }\r\n    get(buf, off) {\r\n        const descrLen = this.len - 12;\r\n        return {\r\n            dataFormat: FourCcToken.get(buf, off),\r\n            dataReferenceIndex: Token.UINT16_BE.get(buf, off + 10),\r\n            description: descrLen > 0 ? new Token.Uint8ArrayType(descrLen).get(buf, off + 12) : undefined\r\n        };\r\n    }\r\n}\r\n/**\r\n * Atom: Sample-description Atom ('stsd')\r\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25691\r\n */\r\nexport class StsdAtom {\r\n    constructor(len) {\r\n        this.len = len;\r\n    }\r\n    get(buf, off) {\r\n        const header = stsdHeader.get(buf, off);\r\n        off += stsdHeader.len;\r\n        const table = [];\r\n        for (let n = 0; n < header.numberOfEntries; ++n) {\r\n            const size = Token.UINT32_BE.get(buf, off); // Sample description size\r\n            off += Token.UINT32_BE.len;\r\n            table.push(new SampleDescriptionTable(size - Token.UINT32_BE.len).get(buf, off));\r\n            off += size;\r\n        }\r\n        return {\r\n            header,\r\n            table\r\n        };\r\n    }\r\n}\r\n/**\r\n * Common Sound Sample Description (version & revision)\r\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-57317\r\n */\r\nexport const SoundSampleDescriptionVersion = {\r\n    len: 8,\r\n    get(buf, off) {\r\n        return {\r\n            version: Token.INT16_BE.get(buf, off),\r\n            revision: Token.INT16_BE.get(buf, off + 2),\r\n            vendor: Token.INT32_BE.get(buf, off + 4)\r\n        };\r\n    }\r\n};\r\n/**\r\n * Sound Sample Description (Version 0)\r\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-130736\r\n */\r\nexport const SoundSampleDescriptionV0 = {\r\n    len: 12,\r\n    get(buf, off) {\r\n        return {\r\n            numAudioChannels: Token.INT16_BE.get(buf, off + 0),\r\n            sampleSize: Token.INT16_BE.get(buf, off + 2),\r\n            compressionId: Token.INT16_BE.get(buf, off + 4),\r\n            packetSize: Token.INT16_BE.get(buf, off + 6),\r\n            sampleRate: Token.UINT16_BE.get(buf, off + 8) + Token.UINT16_BE.get(buf, off + 10) / 10000\r\n        };\r\n    }\r\n};\r\nclass SimpleTableAtom {\r\n    constructor(len, token) {\r\n        this.len = len;\r\n        this.token = token;\r\n    }\r\n    get(buf, off) {\r\n        const nrOfEntries = Token.INT32_BE.get(buf, off + 4);\r\n        return {\r\n            version: Token.INT8.get(buf, off + 0),\r\n            flags: Token.INT24_BE.get(buf, off + 1),\r\n            numberOfEntries: nrOfEntries,\r\n            entries: readTokenTable(buf, this.token, off + 8, this.len - 8, nrOfEntries)\r\n        };\r\n    }\r\n}\r\nexport const TimeToSampleToken = {\r\n    len: 8,\r\n    get(buf, off) {\r\n        return {\r\n            count: Token.INT32_BE.get(buf, off + 0),\r\n            duration: Token.INT32_BE.get(buf, off + 4)\r\n        };\r\n    }\r\n};\r\n/**\r\n * Time-to-sample('stts') atom.\r\n * Store duration information for a media’s samples.\r\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25696\r\n */\r\nexport class SttsAtom extends SimpleTableAtom {\r\n    constructor(len) {\r\n        super(len, TimeToSampleToken);\r\n        this.len = len;\r\n    }\r\n}\r\nexport const SampleToChunkToken = {\r\n    len: 12,\r\n    get(buf, off) {\r\n        return {\r\n            firstChunk: Token.INT32_BE.get(buf, off),\r\n            samplesPerChunk: Token.INT32_BE.get(buf, off + 4),\r\n            sampleDescriptionId: Token.INT32_BE.get(buf, off + 8)\r\n        };\r\n    }\r\n};\r\n/**\r\n * Sample-to-Chunk ('stsc') atom interface\r\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25706\r\n */\r\nexport class StscAtom extends SimpleTableAtom {\r\n    constructor(len) {\r\n        super(len, SampleToChunkToken);\r\n        this.len = len;\r\n    }\r\n}\r\n/**\r\n * Sample-size ('stsz') atom\r\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25710\r\n */\r\nexport class StszAtom {\r\n    constructor(len) {\r\n        this.len = len;\r\n    }\r\n    get(buf, off) {\r\n        const nrOfEntries = Token.INT32_BE.get(buf, off + 8);\r\n        return {\r\n            version: Token.INT8.get(buf, off),\r\n            flags: Token.INT24_BE.get(buf, off + 1),\r\n            sampleSize: Token.INT32_BE.get(buf, off + 4),\r\n            numberOfEntries: nrOfEntries,\r\n            entries: readTokenTable(buf, Token.INT32_BE, off + 12, this.len - 12, nrOfEntries)\r\n        };\r\n    }\r\n}\r\n/**\r\n * Chunk offset atom, 'stco'\r\n * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25715\r\n */\r\nexport class StcoAtom extends SimpleTableAtom {\r\n    constructor(len) {\r\n        super(len, Token.INT32_BE);\r\n        this.len = len;\r\n    }\r\n}\r\n/**\r\n * Token used to decode text-track from 'mdat' atom (raw data stream)\r\n */\r\nexport class ChapterText {\r\n    constructor(len) {\r\n        this.len = len;\r\n    }\r\n    get(buf, off) {\r\n        const titleLen = Token.INT16_BE.get(buf, off + 0);\r\n        const str = new Token.StringType(titleLen, 'utf-8');\r\n        return str.get(buf, off + 2);\r\n    }\r\n}\r\nfunction readTokenTable(buf, token, off, remainingLen, numberOfEntries) {\r\n    debug(`remainingLen=${remainingLen}, numberOfEntries=${numberOfEntries} * token-len=${token.len}`);\r\n    if (remainingLen === 0)\r\n        return [];\r\n    if (remainingLen !== numberOfEntries * token.len)\r\n        throw new Mp4ContentError('mismatch number-of-entries with remaining atom-length');\r\n    const entries = [];\r\n    // parse offset-table\r\n    for (let n = 0; n < numberOfEntries; ++n) {\r\n        entries.push(token.get(buf, off));\r\n        off += token.len;\r\n    }\r\n    return entries;\r\n}\r\n//# sourceMappingURL=AtomToken.js.map"],
  "mappings": "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",
  "names": ["import_debug", "import_debug", "initDebug", "debug", "initDebug", "debug", "initDebug"]
}
