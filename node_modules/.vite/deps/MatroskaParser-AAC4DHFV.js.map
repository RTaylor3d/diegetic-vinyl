{
  "version": 3,
  "sources": ["../../music-metadata/lib/matroska/MatroskaParser.js", "../../music-metadata/lib/ebml/types.js", "../../music-metadata/lib/matroska/MatroskaDtd.js", "../../music-metadata/lib/ebml/EbmlIterator.js"],
  "sourcesContent": ["import initDebug from 'debug';\r\nimport { BasicParser } from '../common/BasicParser.js';\r\nimport { matroskaDtd } from './MatroskaDtd.js';\r\nimport { TargetType, TrackType } from './types.js';\r\nimport { EbmlIterator, ParseAction } from '../ebml/EbmlIterator.js';\r\nconst debug = initDebug('music-metadata:parser:matroska');\r\n/**\r\n * Extensible Binary Meta Language (EBML) parser\r\n * https://en.wikipedia.org/wiki/Extensible_Binary_Meta_Language\r\n * http://matroska.sourceforge.net/technical/specs/rfc/index.html\r\n *\r\n * WEBM VP8 AUDIO FILE\r\n */\r\nexport class MatroskaParser extends BasicParser {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.seekHeadOffset = 0;\r\n        /**\r\n         * Use index to skip multiple segment/cluster elements at once.\r\n         * Significant performance impact\r\n         */\r\n        this.flagUseIndexToSkipClusters = this.options.mkvUseIndex ?? false;\r\n    }\r\n    async parse() {\r\n        const containerSize = this.tokenizer.fileInfo.size ?? Number.MAX_SAFE_INTEGER;\r\n        const matroskaIterator = new EbmlIterator(this.tokenizer);\r\n        debug('Initializing DTD end MatroskaIterator');\r\n        await matroskaIterator.iterate(matroskaDtd, containerSize, {\r\n            startNext: (element) => {\r\n                switch (element.id) {\r\n                    // case 0x1f43b675: // cluster\r\n                    case 0x1c53bb6b: // Cueing Data\r\n                        debug(`Skip element: name=${element.name}, id=0x${element.id.toString(16)}`);\r\n                        return ParseAction.IgnoreElement;\r\n                    case 0x1f43b675: // cluster\r\n                        if (this.flagUseIndexToSkipClusters && this.seekHead) {\r\n                            const index = this.seekHead.seek.find(index => index.position + this.seekHeadOffset > this.tokenizer.position);\r\n                            if (index) {\r\n                                // Go to next index position\r\n                                const ignoreSize = index.position + this.seekHeadOffset - this.tokenizer.position;\r\n                                debug(`Use index to go to next position, ignoring ${ignoreSize} bytes`);\r\n                                this.tokenizer.ignore(ignoreSize);\r\n                                return ParseAction.SkipElement;\r\n                            }\r\n                        }\r\n                        return ParseAction.IgnoreElement;\r\n                    default:\r\n                        return ParseAction.ReadNext;\r\n                }\r\n            },\r\n            elementValue: async (element, value, offset) => {\r\n                debug(`Received: name=${element.name}, value=${value}`);\r\n                switch (element.id) {\r\n                    case 0x4282: // docType\r\n                        this.metadata.setFormat('container', `EBML/${value}`);\r\n                        break;\r\n                    case 0x114d9b74:\r\n                        this.seekHead = value;\r\n                        this.seekHeadOffset = offset;\r\n                        break;\r\n                    case 0x1549a966:\r\n                        { // Info (Segment Information)\r\n                            const info = value;\r\n                            const timecodeScale = info.timecodeScale ? info.timecodeScale : 1000000;\r\n                            if (typeof info.duration === 'number') {\r\n                                const duration = info.duration * timecodeScale / 1000000000;\r\n                                await this.addTag('segment:title', info.title);\r\n                                this.metadata.setFormat('duration', Number(duration));\r\n                            }\r\n                        }\r\n                        break;\r\n                    case 0x1654ae6b:\r\n                        { // tracks\r\n                            const audioTracks = value;\r\n                            if (audioTracks?.entries) {\r\n                                audioTracks.entries.forEach(entry => {\r\n                                    const stream = {\r\n                                        codecName: entry.codecID.replace('A_', '').replace('V_', ''),\r\n                                        codecSettings: entry.codecSettings,\r\n                                        flagDefault: entry.flagDefault,\r\n                                        flagLacing: entry.flagLacing,\r\n                                        flagEnabled: entry.flagEnabled,\r\n                                        language: entry.language,\r\n                                        name: entry.name,\r\n                                        type: entry.trackType,\r\n                                        audio: entry.audio,\r\n                                        video: entry.video\r\n                                    };\r\n                                    this.metadata.addStreamInfo(stream);\r\n                                });\r\n                                const audioTrack = audioTracks.entries\r\n                                    .filter(entry => entry.trackType === TrackType.audio)\r\n                                    .reduce((acc, cur) => {\r\n                                    if (!acc)\r\n                                        return cur;\r\n                                    if (cur.flagDefault && !acc.flagDefault)\r\n                                        return cur;\r\n                                    if (cur.trackNumber < acc.trackNumber)\r\n                                        return cur;\r\n                                    return acc;\r\n                                }, null);\r\n                                if (audioTrack) {\r\n                                    this.metadata.setFormat('codec', audioTrack.codecID.replace('A_', ''));\r\n                                    this.metadata.setFormat('sampleRate', audioTrack.audio.samplingFrequency);\r\n                                    this.metadata.setFormat('numberOfChannels', audioTrack.audio.channels);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case 0x1254c367:\r\n                        { // tags\r\n                            const tags = value;\r\n                            await Promise.all(tags.tag.map(async (tag) => {\r\n                                const target = tag.target;\r\n                                const targetType = target?.targetTypeValue ? TargetType[target.targetTypeValue] : (target?.targetType ? target.targetType : 'track');\r\n                                await Promise.all(tag.simpleTags.map(async (simpleTag) => {\r\n                                    const value = simpleTag.string ? simpleTag.string : simpleTag.binary;\r\n                                    await this.addTag(`${targetType}:${simpleTag.name}`, value);\r\n                                }));\r\n                            }));\r\n                        }\r\n                        break;\r\n                    case 0x1941a469:\r\n                        { // attachments\r\n                            const attachments = value;\r\n                            await Promise.all(attachments.attachedFiles\r\n                                .filter(file => file.mimeType.startsWith('image/'))\r\n                                .map(file => this.addTag('picture', {\r\n                                data: file.data,\r\n                                format: file.mimeType,\r\n                                description: file.description,\r\n                                name: file.name\r\n                            })));\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    async addTag(tagId, value) {\r\n        await this.metadata.addTag('matroska', tagId, value);\r\n    }\r\n}\r\n//# sourceMappingURL=MatroskaParser.js.map", "export var DataType;\r\n(function (DataType) {\r\n    DataType[DataType[\"string\"] = 0] = \"string\";\r\n    DataType[DataType[\"uint\"] = 1] = \"uint\";\r\n    DataType[DataType[\"uid\"] = 2] = \"uid\";\r\n    DataType[DataType[\"bool\"] = 3] = \"bool\";\r\n    DataType[DataType[\"binary\"] = 4] = \"binary\";\r\n    DataType[DataType[\"float\"] = 5] = \"float\";\r\n})(DataType || (DataType = {}));\r\n//# sourceMappingURL=types.js.map", "import { DataType } from '../ebml/types.js';\r\n/**\r\n * Elements of document type description\r\n * Derived from https://github.com/tungol/EBML/blob/master/doctypes/matroska.dtd\r\n * Extended with:\r\n * - https://www.matroska.org/technical/specs/index.html\r\n */\r\nexport const matroskaDtd = {\r\n    name: 'dtd',\r\n    container: {\r\n        0x1a45dfa3: {\r\n            name: 'ebml',\r\n            container: {\r\n                0x4286: { name: 'ebmlVersion', value: DataType.uint }, // 5.1.1\r\n                0x42f7: { name: 'ebmlReadVersion', value: DataType.uint }, // 5.1.2\r\n                0x42f2: { name: 'ebmlMaxIDWidth', value: DataType.uint }, // 5.1.3\r\n                0x42f3: { name: 'ebmlMaxSizeWidth', value: DataType.uint }, // 5.1.4\r\n                0x4282: { name: 'docType', value: DataType.string }, // 5.1.5\r\n                0x4287: { name: 'docTypeVersion', value: DataType.uint }, // 5.1.6\r\n                0x4285: { name: 'docTypeReadVersion', value: DataType.uint } // 5.1.7\r\n            }\r\n        },\r\n        // Matroska segments\r\n        0x18538067: {\r\n            name: 'segment',\r\n            container: {\r\n                // Meta Seek Information (also known as MetaSeek)\r\n                0x114d9b74: {\r\n                    name: 'seekHead',\r\n                    container: {\r\n                        0x4dbb: {\r\n                            name: 'seek',\r\n                            multiple: true,\r\n                            container: {\r\n                                0x53ab: { name: 'id', value: DataType.binary },\r\n                                0x53ac: { name: 'position', value: DataType.uint }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                // Segment Information\r\n                0x1549a966: {\r\n                    name: 'info',\r\n                    container: {\r\n                        0x73a4: { name: 'uid', value: DataType.uid },\r\n                        0x7384: { name: 'filename', value: DataType.string },\r\n                        0x3cb923: { name: 'prevUID', value: DataType.uid },\r\n                        0x3c83ab: { name: 'prevFilename', value: DataType.string },\r\n                        0x3eb923: { name: 'nextUID', value: DataType.uid },\r\n                        0x3e83bb: { name: 'nextFilename', value: DataType.string },\r\n                        0x2ad7b1: { name: 'timecodeScale', value: DataType.uint },\r\n                        0x4489: { name: 'duration', value: DataType.float },\r\n                        0x4461: { name: 'dateUTC', value: DataType.uint },\r\n                        0x7ba9: { name: 'title', value: DataType.string },\r\n                        0x4d80: { name: 'muxingApp', value: DataType.string },\r\n                        0x5741: { name: 'writingApp', value: DataType.string }\r\n                    }\r\n                },\r\n                // Cluster\r\n                0x1f43b675: {\r\n                    name: 'cluster',\r\n                    multiple: true,\r\n                    container: {\r\n                        0xe7: { name: 'timecode', value: DataType.uid },\r\n                        0x58d7: { name: 'silentTracks ', multiple: true },\r\n                        0xa7: { name: 'position', value: DataType.uid },\r\n                        0xab: { name: 'prevSize', value: DataType.uid },\r\n                        0xa0: { name: 'blockGroup' },\r\n                        0xa3: { name: 'simpleBlock' }\r\n                    }\r\n                },\r\n                // Track\r\n                0x1654ae6b: {\r\n                    name: 'tracks',\r\n                    container: {\r\n                        0xae: {\r\n                            name: 'entries',\r\n                            multiple: true,\r\n                            container: {\r\n                                0xd7: { name: 'trackNumber', value: DataType.uint },\r\n                                0x73c5: { name: 'uid', value: DataType.uid },\r\n                                0x83: { name: 'trackType', value: DataType.uint },\r\n                                0xb9: { name: 'flagEnabled', value: DataType.bool },\r\n                                0x88: { name: 'flagDefault', value: DataType.bool },\r\n                                0x55aa: { name: 'flagForced', value: DataType.bool }, // extended\r\n                                0x9c: { name: 'flagLacing', value: DataType.bool },\r\n                                0x6de7: { name: 'minCache', value: DataType.uint },\r\n                                0x6de8: { name: 'maxCache', value: DataType.uint },\r\n                                0x23e383: { name: 'defaultDuration', value: DataType.uint },\r\n                                0x23314f: { name: 'timecodeScale', value: DataType.float },\r\n                                0x536e: { name: 'name', value: DataType.string },\r\n                                0x22b59c: { name: 'language', value: DataType.string },\r\n                                0x86: { name: 'codecID', value: DataType.string },\r\n                                0x63a2: { name: 'codecPrivate', value: DataType.binary },\r\n                                0x258688: { name: 'codecName', value: DataType.string },\r\n                                0x3a9697: { name: 'codecSettings', value: DataType.string },\r\n                                0x3b4040: { name: 'codecInfoUrl', value: DataType.string },\r\n                                0x26b240: { name: 'codecDownloadUrl', value: DataType.string },\r\n                                0xaa: { name: 'codecDecodeAll', value: DataType.bool },\r\n                                0x6fab: { name: 'trackOverlay', value: DataType.uint },\r\n                                // Video\r\n                                0xe0: {\r\n                                    name: 'video',\r\n                                    container: {\r\n                                        0x9a: { name: 'flagInterlaced', value: DataType.bool },\r\n                                        0x53b8: { name: 'stereoMode', value: DataType.uint },\r\n                                        0xb0: { name: 'pixelWidth', value: DataType.uint },\r\n                                        0xba: { name: 'pixelHeight', value: DataType.uint },\r\n                                        0x54b0: { name: 'displayWidth', value: DataType.uint },\r\n                                        0x54ba: { name: 'displayHeight', value: DataType.uint },\r\n                                        0x54b3: { name: 'aspectRatioType', value: DataType.uint },\r\n                                        0x2eb524: { name: 'colourSpace', value: DataType.uint },\r\n                                        0x2fb523: { name: 'gammaValue', value: DataType.float }\r\n                                    }\r\n                                },\r\n                                // Audio\r\n                                0xe1: {\r\n                                    name: 'audio',\r\n                                    container: {\r\n                                        0xb5: { name: 'samplingFrequency', value: DataType.float },\r\n                                        0x78b5: { name: 'outputSamplingFrequency', value: DataType.float },\r\n                                        0x9f: { name: 'channels', value: DataType.uint }, // https://www.matroska.org/technical/specs/index.html\r\n                                        0x94: { name: 'channels', value: DataType.uint },\r\n                                        0x7d7b: { name: 'channelPositions', value: DataType.binary },\r\n                                        0x6264: { name: 'bitDepth', value: DataType.uint }\r\n                                    }\r\n                                },\r\n                                // Content Encoding\r\n                                0x6d80: {\r\n                                    name: 'contentEncodings',\r\n                                    container: {\r\n                                        0x6240: {\r\n                                            name: 'contentEncoding',\r\n                                            container: {\r\n                                                0x5031: { name: 'order', value: DataType.uint },\r\n                                                0x5032: { name: 'scope', value: DataType.bool },\r\n                                                0x5033: { name: 'type', value: DataType.uint },\r\n                                                0x5034: {\r\n                                                    name: 'contentEncoding',\r\n                                                    container: {\r\n                                                        0x4254: { name: 'contentCompAlgo', value: DataType.uint },\r\n                                                        0x4255: { name: 'contentCompSettings', value: DataType.binary }\r\n                                                    }\r\n                                                },\r\n                                                0x5035: {\r\n                                                    name: 'contentEncoding',\r\n                                                    container: {\r\n                                                        0x47e1: { name: 'contentEncAlgo', value: DataType.uint },\r\n                                                        0x47e2: { name: 'contentEncKeyID', value: DataType.binary },\r\n                                                        0x47e3: { name: 'contentSignature ', value: DataType.binary },\r\n                                                        0x47e4: { name: 'ContentSigKeyID  ', value: DataType.binary },\r\n                                                        0x47e5: { name: 'contentSigAlgo ', value: DataType.uint },\r\n                                                        0x47e6: { name: 'contentSigHashAlgo ', value: DataType.uint }\r\n                                                    }\r\n                                                },\r\n                                                0x6264: { name: 'bitDepth', value: DataType.uint }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                // Cueing Data\r\n                0x1c53bb6b: {\r\n                    name: 'cues',\r\n                    container: {\r\n                        0xbb: {\r\n                            name: 'cuePoint',\r\n                            container: {\r\n                                0xb3: { name: 'cueTime', value: DataType.uid },\r\n                                0xb7: {\r\n                                    name: 'positions',\r\n                                    container: {\r\n                                        0xf7: { name: 'track', value: DataType.uint },\r\n                                        0xf1: { name: 'clusterPosition', value: DataType.uint },\r\n                                        0x5378: { name: 'blockNumber', value: DataType.uint },\r\n                                        0xea: { name: 'codecState', value: DataType.uint },\r\n                                        0xdb: {\r\n                                            name: 'reference', container: {\r\n                                                0x96: { name: 'time', value: DataType.uint },\r\n                                                0x97: { name: 'cluster', value: DataType.uint },\r\n                                                0x535f: { name: 'number', value: DataType.uint },\r\n                                                0xeb: { name: 'codecState', value: DataType.uint }\r\n                                            }\r\n                                        },\r\n                                        0xf0: { name: 'relativePosition', value: DataType.uint } // extended\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                // Attachment\r\n                0x1941a469: {\r\n                    name: 'attachments',\r\n                    container: {\r\n                        0x61a7: {\r\n                            name: 'attachedFiles',\r\n                            multiple: true,\r\n                            container: {\r\n                                0x467e: { name: 'description', value: DataType.string },\r\n                                0x466e: { name: 'name', value: DataType.string },\r\n                                0x4660: { name: 'mimeType', value: DataType.string },\r\n                                0x465c: { name: 'data', value: DataType.binary },\r\n                                0x46ae: { name: 'uid', value: DataType.uid }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                // Chapters\r\n                0x1043a770: {\r\n                    name: 'chapters',\r\n                    container: {\r\n                        0x45b9: {\r\n                            name: 'editionEntry',\r\n                            container: {\r\n                                0xb6: {\r\n                                    name: 'chapterAtom',\r\n                                    container: {\r\n                                        0x73c4: { name: 'uid', value: DataType.uid },\r\n                                        0x91: { name: 'timeStart', value: DataType.uint },\r\n                                        0x92: { name: 'timeEnd', value: DataType.uid },\r\n                                        0x98: { name: 'hidden', value: DataType.bool },\r\n                                        0x4598: { name: 'enabled', value: DataType.uid },\r\n                                        0x8f: {\r\n                                            name: 'track', container: {\r\n                                                0x89: { name: 'trackNumber', value: DataType.uid },\r\n                                                0x80: {\r\n                                                    name: 'display', container: {\r\n                                                        0x85: { name: 'string', value: DataType.string },\r\n                                                        0x437c: { name: 'language ', value: DataType.string },\r\n                                                        0x437e: { name: 'country ', value: DataType.string }\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                // Tagging\r\n                0x1254c367: {\r\n                    name: 'tags',\r\n                    container: {\r\n                        0x7373: {\r\n                            name: 'tag',\r\n                            multiple: true,\r\n                            container: {\r\n                                0x63c0: {\r\n                                    name: 'target',\r\n                                    container: {\r\n                                        0x63c5: { name: 'tagTrackUID', value: DataType.uid },\r\n                                        0x63c4: { name: 'tagChapterUID', value: DataType.uint },\r\n                                        0x63c6: { name: 'tagAttachmentUID', value: DataType.uid },\r\n                                        0x63ca: { name: 'targetType', value: DataType.string }, // extended\r\n                                        0x68ca: { name: 'targetTypeValue', value: DataType.uint }, // extended\r\n                                        0x63c9: { name: 'tagEditionUID', value: DataType.uid } // extended\r\n                                    }\r\n                                },\r\n                                0x67c8: {\r\n                                    name: 'simpleTags',\r\n                                    multiple: true,\r\n                                    container: {\r\n                                        0x45a3: { name: 'name', value: DataType.string },\r\n                                        0x4487: { name: 'string', value: DataType.string },\r\n                                        0x4485: { name: 'binary', value: DataType.binary },\r\n                                        0x447a: { name: 'language', value: DataType.string }, // extended\r\n                                        0x447b: { name: 'languageIETF', value: DataType.string }, // extended\r\n                                        0x4484: { name: 'default', value: DataType.bool } // extended\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n//# sourceMappingURL=MatroskaDtd.js.map", "import { Float32_BE, Float64_BE, StringType, UINT8 } from 'token-types';\r\nimport initDebug from 'debug';\r\nimport { EndOfStreamError } from 'strtok3';\r\nimport { DataType } from './types.js';\r\nimport * as Token from 'token-types';\r\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\r\nconst debug = initDebug('music-metadata:parser:ebml');\r\nexport class EbmlContentError extends makeUnexpectedFileContentError('EBML') {\r\n}\r\nexport var ParseAction;\r\n(function (ParseAction) {\r\n    ParseAction[ParseAction[\"ReadNext\"] = 0] = \"ReadNext\";\r\n    ParseAction[ParseAction[\"IgnoreElement\"] = 2] = \"IgnoreElement\";\r\n    ParseAction[ParseAction[\"SkipSiblings\"] = 3] = \"SkipSiblings\";\r\n    ParseAction[ParseAction[\"TerminateParsing\"] = 4] = \"TerminateParsing\";\r\n    ParseAction[ParseAction[\"SkipElement\"] = 5] = \"SkipElement\"; // Consider the element has read, assume position is at the next element\r\n})(ParseAction || (ParseAction = {}));\r\n/**\r\n * Extensible Binary Meta Language (EBML) iterator\r\n * https://en.wikipedia.org/wiki/Extensible_Binary_Meta_Language\r\n * http://matroska.sourceforge.net/technical/specs/rfc/index.html\r\n *\r\n * WEBM VP8 AUDIO FILE\r\n */\r\nexport class EbmlIterator {\r\n    /**\r\n     * @param {ITokenizer} tokenizer Input\r\n     * @param tokenizer\r\n     */\r\n    constructor(tokenizer) {\r\n        this.tokenizer = tokenizer;\r\n        this.padding = 0;\r\n        this.parserMap = new Map();\r\n        this.ebmlMaxIDLength = 4;\r\n        this.ebmlMaxSizeLength = 8;\r\n        this.parserMap.set(DataType.uint, e => this.readUint(e));\r\n        this.parserMap.set(DataType.string, e => this.readString(e));\r\n        this.parserMap.set(DataType.binary, e => this.readBuffer(e));\r\n        this.parserMap.set(DataType.uid, async (e) => this.readBuffer(e));\r\n        this.parserMap.set(DataType.bool, e => this.readFlag(e));\r\n        this.parserMap.set(DataType.float, e => this.readFloat(e));\r\n    }\r\n    async iterate(dtdElement, posDone, listener) {\r\n        return this.parseContainer(linkParents(dtdElement), posDone, listener);\r\n    }\r\n    async parseContainer(dtdElement, posDone, listener) {\r\n        const tree = {};\r\n        while (this.tokenizer.position < posDone) {\r\n            let element;\r\n            const elementPosition = this.tokenizer.position;\r\n            try {\r\n                element = await this.readElement();\r\n            }\r\n            catch (error) {\r\n                if (error instanceof EndOfStreamError) {\r\n                    break;\r\n                }\r\n                throw error;\r\n            }\r\n            const child = dtdElement.container[element.id];\r\n            if (child) {\r\n                const action = listener.startNext(child);\r\n                switch (action) {\r\n                    case ParseAction.ReadNext:\r\n                        {\r\n                            if (element.id === 0x1F43B675) {\r\n                                // Hack to ignore remaining segment, when cluster element received\r\n                                // await this.tokenizer.ignore(posDone - this.tokenizer.position);\r\n                                // break;\r\n                            }\r\n                            debug(`Read element: name=${getElementPath(child)}{id=0x${element.id.toString(16)}, container=${!!child.container}} at position=${elementPosition}`);\r\n                            if (child.container) {\r\n                                const res = await this.parseContainer(child, element.len >= 0 ? this.tokenizer.position + element.len : -1, listener);\r\n                                if (child.multiple) {\r\n                                    if (!tree[child.name]) {\r\n                                        tree[child.name] = [];\r\n                                    }\r\n                                    tree[child.name].push(res);\r\n                                }\r\n                                else {\r\n                                    tree[child.name] = res;\r\n                                }\r\n                                await listener.elementValue(child, res, elementPosition);\r\n                            }\r\n                            else {\r\n                                const parser = this.parserMap.get(child.value);\r\n                                if (typeof parser === 'function') {\r\n                                    const value = await parser(element);\r\n                                    tree[child.name] = value;\r\n                                    await listener.elementValue(child, value, elementPosition);\r\n                                }\r\n                            }\r\n                        }\r\n                        break;\r\n                    case ParseAction.SkipElement:\r\n                        debug(`Go to next element: name=${getElementPath(child)}, element.id=0x${element.id}, container=${!!child.container} at position=${elementPosition}`);\r\n                        break;\r\n                    case ParseAction.IgnoreElement:\r\n                        debug(`Ignore element: name=${getElementPath(child)}, element.id=0x${element.id}, container=${!!child.container} at position=${elementPosition}`);\r\n                        await this.tokenizer.ignore(element.len);\r\n                        break;\r\n                    case ParseAction.SkipSiblings:\r\n                        debug(`Ignore remaining container, at: name=${getElementPath(child)}, element.id=0x${element.id}, container=${!!child.container} at position=${elementPosition}`);\r\n                        await this.tokenizer.ignore(posDone - this.tokenizer.position);\r\n                        break;\r\n                    case ParseAction.TerminateParsing:\r\n                        debug(`Terminate parsing at element: name=${getElementPath(child)}, element.id=0x${element.id}, container=${!!child.container} at position=${elementPosition}`);\r\n                        return tree;\r\n                }\r\n            }\r\n            else {\r\n                switch (element.id) {\r\n                    case 0xec: // void\r\n                        this.padding += element.len;\r\n                        await this.tokenizer.ignore(element.len);\r\n                        break;\r\n                    default:\r\n                        debug(`parseEbml: parent=${getElementPath(dtdElement)}, unknown child: id=${element.id.toString(16)} at position=${elementPosition}`);\r\n                        this.padding += element.len;\r\n                        await this.tokenizer.ignore(element.len);\r\n                }\r\n            }\r\n        }\r\n        return tree;\r\n    }\r\n    async readVintData(maxLength) {\r\n        const msb = await this.tokenizer.peekNumber(UINT8);\r\n        let mask = 0x80;\r\n        let oc = 1;\r\n        // Calculate VINT_WIDTH\r\n        while ((msb & mask) === 0) {\r\n            if (oc > maxLength) {\r\n                throw new EbmlContentError('VINT value exceeding maximum size');\r\n            }\r\n            ++oc;\r\n            mask >>= 1;\r\n        }\r\n        const id = new Uint8Array(oc);\r\n        await this.tokenizer.readBuffer(id);\r\n        return id;\r\n    }\r\n    async readElement() {\r\n        const id = await this.readVintData(this.ebmlMaxIDLength);\r\n        const lenField = await this.readVintData(this.ebmlMaxSizeLength);\r\n        lenField[0] ^= 0x80 >> (lenField.length - 1);\r\n        return {\r\n            id: readUIntBE(id, id.length),\r\n            len: readUIntBE(lenField, lenField.length)\r\n        };\r\n    }\r\n    async readFloat(e) {\r\n        switch (e.len) {\r\n            case 0:\r\n                return 0.0;\r\n            case 4:\r\n                return this.tokenizer.readNumber(Float32_BE);\r\n            case 8:\r\n                return this.tokenizer.readNumber(Float64_BE);\r\n            case 10:\r\n                return this.tokenizer.readNumber(Float64_BE);\r\n            default:\r\n                throw new EbmlContentError(`Invalid IEEE-754 float length: ${e.len}`);\r\n        }\r\n    }\r\n    async readFlag(e) {\r\n        return (await this.readUint(e)) === 1;\r\n    }\r\n    async readUint(e) {\r\n        const buf = await this.readBuffer(e);\r\n        return readUIntBE(buf, e.len);\r\n    }\r\n    async readString(e) {\r\n        const rawString = await this.tokenizer.readToken(new StringType(e.len, 'utf-8'));\r\n        return rawString.replace(/\\x00.*$/g, '');\r\n    }\r\n    async readBuffer(e) {\r\n        const buf = new Uint8Array(e.len);\r\n        await this.tokenizer.readBuffer(buf);\r\n        return buf;\r\n    }\r\n}\r\nfunction readUIntBE(buf, len) {\r\n    return Number(readUIntBeAsBigInt(buf, len));\r\n}\r\n/**\r\n * Reeds an unsigned integer from a big endian buffer of length `len`\r\n * @param buf Buffer to decode from\r\n * @param len Number of bytes\r\n * @private\r\n */\r\nfunction readUIntBeAsBigInt(buf, len) {\r\n    const normalizedNumber = new Uint8Array(8);\r\n    const cleanNumber = buf.subarray(0, len);\r\n    try {\r\n        normalizedNumber.set(cleanNumber, 8 - len);\r\n        return Token.UINT64_BE.get(normalizedNumber, 0);\r\n    }\r\n    catch (error) {\r\n        return BigInt(-1);\r\n    }\r\n}\r\nfunction linkParents(element) {\r\n    if (element.container) {\r\n        Object.keys(element.container)\r\n            .map(id => {\r\n            const child = element.container[id];\r\n            child.id = Number.parseInt(id);\r\n            return child;\r\n        }).forEach(child => {\r\n            child.parent = element;\r\n            linkParents(child);\r\n        });\r\n    }\r\n    return element;\r\n}\r\nexport function getElementPath(element) {\r\n    let path = '';\r\n    if (element.parent && element.parent.name !== 'dtd') {\r\n        path += `${getElementPath(element.parent)}/`;\r\n    }\r\n    return path + element.name;\r\n}\r\n//# sourceMappingURL=EbmlIterator.js.map"],
  "mappings": "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",
  "names": ["import_debug", "DataType", "initDebug", "ParseAction", "debug", "initDebug", "index", "value"]
}
