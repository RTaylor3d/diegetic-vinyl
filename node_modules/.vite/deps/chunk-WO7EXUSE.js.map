{
  "version": 3,
  "sources": ["../../music-metadata/lib/ogg/vorbis/Vorbis.js", "../../music-metadata/lib/ogg/vorbis/VorbisDecoder.js", "../../music-metadata/lib/ogg/vorbis/VorbisParser.js"],
  "sourcesContent": ["import * as Token from 'token-types';\r\nimport { AttachedPictureType } from '../../id3v2/ID3v2Token.js';\r\n/**\r\n * Parse the METADATA_BLOCK_PICTURE\r\n * Ref: https://wiki.xiph.org/VorbisComment#METADATA_BLOCK_PICTURE\r\n * Ref: https://xiph.org/flac/format.html#metadata_block_picture\r\n * // ToDo: move to ID3 / APIC?\r\n */\r\nexport class VorbisPictureToken {\r\n    static fromBase64(base64str) {\r\n        return VorbisPictureToken.fromBuffer(Uint8Array.from(atob(base64str), c => c.charCodeAt(0)));\r\n    }\r\n    static fromBuffer(buffer) {\r\n        const pic = new VorbisPictureToken(buffer.length);\r\n        return pic.get(buffer, 0);\r\n    }\r\n    constructor(len) {\r\n        this.len = len;\r\n    }\r\n    get(buffer, offset) {\r\n        const type = AttachedPictureType[Token.UINT32_BE.get(buffer, offset)];\r\n        offset += 4;\r\n        const mimeLen = Token.UINT32_BE.get(buffer, offset);\r\n        offset += 4;\r\n        const format = new Token.StringType(mimeLen, 'utf-8').get(buffer, offset);\r\n        offset += mimeLen;\r\n        const descLen = Token.UINT32_BE.get(buffer, offset);\r\n        offset += 4;\r\n        const description = new Token.StringType(descLen, 'utf-8').get(buffer, offset);\r\n        offset += descLen;\r\n        const width = Token.UINT32_BE.get(buffer, offset);\r\n        offset += 4;\r\n        const height = Token.UINT32_BE.get(buffer, offset);\r\n        offset += 4;\r\n        const colour_depth = Token.UINT32_BE.get(buffer, offset);\r\n        offset += 4;\r\n        const indexed_color = Token.UINT32_BE.get(buffer, offset);\r\n        offset += 4;\r\n        const picDataLen = Token.UINT32_BE.get(buffer, offset);\r\n        offset += 4;\r\n        const data = Uint8Array.from(buffer.slice(offset, offset + picDataLen));\r\n        return {\r\n            type,\r\n            format,\r\n            description,\r\n            width,\r\n            height,\r\n            colour_depth,\r\n            indexed_color,\r\n            data\r\n        };\r\n    }\r\n}\r\n/**\r\n * Comment header decoder\r\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-620004.2.1\r\n */\r\nexport const CommonHeader = {\r\n    len: 7,\r\n    get: (buf, off) => {\r\n        return {\r\n            packetType: Token.UINT8.get(buf, off),\r\n            vorbis: new Token.StringType(6, 'ascii').get(buf, off + 1)\r\n        };\r\n    }\r\n};\r\n/**\r\n * Identification header decoder\r\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-630004.2.2\r\n */\r\nexport const IdentificationHeader = {\r\n    len: 23,\r\n    get: (uint8Array, off) => {\r\n        return {\r\n            version: Token.UINT32_LE.get(uint8Array, off + 0),\r\n            channelMode: Token.UINT8.get(uint8Array, off + 4),\r\n            sampleRate: Token.UINT32_LE.get(uint8Array, off + 5),\r\n            bitrateMax: Token.UINT32_LE.get(uint8Array, off + 9),\r\n            bitrateNominal: Token.UINT32_LE.get(uint8Array, off + 13),\r\n            bitrateMin: Token.UINT32_LE.get(uint8Array, off + 17)\r\n        };\r\n    }\r\n};\r\n//# sourceMappingURL=Vorbis.js.map", "import * as Token from 'token-types';\r\nexport class VorbisDecoder {\r\n    constructor(data, offset) {\r\n        this.data = data;\r\n        this.offset = offset;\r\n    }\r\n    readInt32() {\r\n        const value = Token.UINT32_LE.get(this.data, this.offset);\r\n        this.offset += 4;\r\n        return value;\r\n    }\r\n    readStringUtf8() {\r\n        const len = this.readInt32();\r\n        const value = new TextDecoder('utf-8').decode(this.data.subarray(this.offset, this.offset + len));\r\n        this.offset += len;\r\n        return value;\r\n    }\r\n    parseUserComment() {\r\n        const offset0 = this.offset;\r\n        const v = this.readStringUtf8();\r\n        const idx = v.indexOf('=');\r\n        return {\r\n            key: v.slice(0, idx).toUpperCase(),\r\n            value: v.slice(idx + 1),\r\n            len: this.offset - offset0\r\n        };\r\n    }\r\n}\r\n//# sourceMappingURL=VorbisDecoder.js.map", "import * as Token from 'token-types';\r\nimport debugInit from 'debug';\r\nimport { VorbisDecoder } from './VorbisDecoder.js';\r\nimport { CommonHeader, IdentificationHeader, VorbisPictureToken } from './Vorbis.js';\r\nimport { makeUnexpectedFileContentError } from '../../ParseError.js';\r\nconst debug = debugInit('music-metadata:parser:ogg:vorbis1');\r\nexport class VorbisContentError extends makeUnexpectedFileContentError('Vorbis') {\r\n}\r\n/**\r\n * Vorbis 1 Parser.\r\n * Used by OggParser\r\n */\r\nexport class VorbisParser {\r\n    constructor(metadata, options) {\r\n        this.metadata = metadata;\r\n        this.options = options;\r\n        this.pageSegments = [];\r\n    }\r\n    /**\r\n     * Vorbis 1 parser\r\n     * @param header Ogg Page Header\r\n     * @param pageData Page data\r\n     */\r\n    async parsePage(header, pageData) {\r\n        if (header.headerType.firstPage) {\r\n            this.parseFirstPage(header, pageData);\r\n        }\r\n        else {\r\n            if (header.headerType.continued) {\r\n                if (this.pageSegments.length === 0) {\r\n                    throw new VorbisContentError('Cannot continue on previous page');\r\n                }\r\n                this.pageSegments.push(pageData);\r\n            }\r\n            if (header.headerType.lastPage || !header.headerType.continued) {\r\n                // Flush page segments\r\n                if (this.pageSegments.length > 0) {\r\n                    const fullPage = VorbisParser.mergeUint8Arrays(this.pageSegments);\r\n                    await this.parseFullPage(fullPage);\r\n                }\r\n                // Reset page segments\r\n                this.pageSegments = header.headerType.lastPage ? [] : [pageData];\r\n            }\r\n        }\r\n        if (header.headerType.lastPage) {\r\n            this.calculateDuration(header);\r\n        }\r\n    }\r\n    static mergeUint8Arrays(arrays) {\r\n        const totalSize = arrays.reduce((acc, e) => acc + e.length, 0);\r\n        const merged = new Uint8Array(totalSize);\r\n        arrays.forEach((array, i, _arrays) => {\r\n            const offset = _arrays.slice(0, i).reduce((acc, e) => acc + e.length, 0);\r\n            merged.set(array, offset);\r\n        });\r\n        return merged;\r\n    }\r\n    async flush() {\r\n        await this.parseFullPage(VorbisParser.mergeUint8Arrays(this.pageSegments));\r\n    }\r\n    async parseUserComment(pageData, offset) {\r\n        const decoder = new VorbisDecoder(pageData, offset);\r\n        const tag = decoder.parseUserComment();\r\n        await this.addTag(tag.key, tag.value);\r\n        return tag.len;\r\n    }\r\n    async addTag(id, value) {\r\n        if (id === 'METADATA_BLOCK_PICTURE' && (typeof value === 'string')) {\r\n            if (this.options.skipCovers) {\r\n                debug(\"Ignore picture\");\r\n                return;\r\n            }\r\n            value = VorbisPictureToken.fromBase64(value);\r\n            debug(`Push picture: id=${id}, format=${value.format}`);\r\n        }\r\n        else {\r\n            debug(`Push tag: id=${id}, value=${value}`);\r\n        }\r\n        await this.metadata.addTag('vorbis', id, value);\r\n    }\r\n    calculateDuration(header) {\r\n        if (this.metadata.format.sampleRate && header.absoluteGranulePosition >= 0) {\r\n            // Calculate duration\r\n            this.metadata.setFormat('numberOfSamples', header.absoluteGranulePosition);\r\n            this.metadata.setFormat('duration', header.absoluteGranulePosition / this.metadata.format.sampleRate);\r\n        }\r\n    }\r\n    /**\r\n     * Parse first Ogg/Vorbis page\r\n     * @param header\r\n     * @param pageData\r\n     */\r\n    parseFirstPage(header, pageData) {\r\n        this.metadata.setFormat('codec', 'Vorbis I');\r\n        debug('Parse first page');\r\n        // Parse  Vorbis common header\r\n        const commonHeader = CommonHeader.get(pageData, 0);\r\n        if (commonHeader.vorbis !== 'vorbis')\r\n            throw new VorbisContentError('Metadata does not look like Vorbis');\r\n        if (commonHeader.packetType === 1) {\r\n            const idHeader = IdentificationHeader.get(pageData, CommonHeader.len);\r\n            this.metadata.setFormat('sampleRate', idHeader.sampleRate);\r\n            this.metadata.setFormat('bitrate', idHeader.bitrateNominal);\r\n            this.metadata.setFormat('numberOfChannels', idHeader.channelMode);\r\n            debug('sample-rate=%s[hz], bitrate=%s[b/s], channel-mode=%s', idHeader.sampleRate, idHeader.bitrateNominal, idHeader.channelMode);\r\n        }\r\n        else\r\n            throw new VorbisContentError('First Ogg page should be type 1: the identification header');\r\n    }\r\n    async parseFullPage(pageData) {\r\n        // New page\r\n        const commonHeader = CommonHeader.get(pageData, 0);\r\n        debug('Parse full page: type=%s, byteLength=%s', commonHeader.packetType, pageData.byteLength);\r\n        switch (commonHeader.packetType) {\r\n            case 3: //  type 3: comment header\r\n                return this.parseUserCommentList(pageData, CommonHeader.len);\r\n            case 1: // type 1: the identification header\r\n            case 5: // type 5: setup header type\r\n                break; // ignore\r\n        }\r\n    }\r\n    /**\r\n     * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-840005.2\r\n     */\r\n    async parseUserCommentList(pageData, offset) {\r\n        const strLen = Token.UINT32_LE.get(pageData, offset);\r\n        offset += 4;\r\n        // const vendorString = new Token.StringType(strLen, 'utf-8').get(pageData, offset);\r\n        offset += strLen;\r\n        let userCommentListLength = Token.UINT32_LE.get(pageData, offset);\r\n        offset += 4;\r\n        while (userCommentListLength-- > 0) {\r\n            offset += (await this.parseUserComment(pageData, offset));\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=VorbisParser.js.map"],
  "mappings": "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",
  "names": ["debugInit"]
}
