{
  "version": 3,
  "sources": ["../../content-type/index.js", "../../media-typer/index.js", "../../file-type/node_modules/peek-readable/lib/EndOfStreamError.js", "../../file-type/node_modules/peek-readable/lib/AbstractStreamReader.js", "../../file-type/node_modules/peek-readable/lib/WebStreamReader.js", "../../file-type/node_modules/strtok3/lib/AbstractTokenizer.js", "../../file-type/node_modules/strtok3/lib/ReadStreamTokenizer.js", "../../file-type/node_modules/strtok3/lib/BufferTokenizer.js", "../../file-type/node_modules/strtok3/lib/core.js", "../../file-type/util.js", "../../file-type/supported.js", "../../file-type/core.js", "../../music-metadata/lib/ParserFactory.js", "../../music-metadata/lib/common/MetadataCollector.js", "../../music-metadata/lib/common/GenericTagTypes.js", "../../music-metadata/lib/common/GenericTagMapper.js", "../../music-metadata/lib/id3v1/ID3v1TagMap.js", "../../music-metadata/lib/common/CaseInsensitiveTagMap.js", "../../music-metadata/lib/id3v2/ID3v24TagMapper.js", "../../music-metadata/lib/asf/AsfTagMapper.js", "../../music-metadata/lib/id3v2/ID3v22TagMapper.js", "../../music-metadata/lib/apev2/APEv2TagMapper.js", "../../music-metadata/lib/mp4/MP4TagMapper.js", "../../music-metadata/lib/ogg/vorbis/VorbisTagMapper.js", "../../music-metadata/lib/riff/RiffInfoTagMap.js", "../../music-metadata/lib/matroska/MatroskaTagMapper.js", "../../music-metadata/lib/aiff/AiffTagMap.js", "../../music-metadata/lib/common/CombinedTagMapper.js", "../../music-metadata/lib/lrc/LyricsParser.js", "../../music-metadata/lib/mpeg/MpegLoader.js", "../../music-metadata/lib/apev2/Apev2Loader.js", "../../music-metadata/lib/asf/AsfLoader.js", "../../music-metadata/lib/dsdiff/DsdiffLoader.js", "../../music-metadata/lib/aiff/AiffLoader.js", "../../music-metadata/lib/dsf/DsfLoader.js", "../../music-metadata/lib/flac/FlacLoader.js", "../../music-metadata/lib/matroska/MatroskaLoader.js", "../../music-metadata/lib/mp4/Mp4Loader.js", "../../music-metadata/lib/musepack/MusepackLoader.js", "../../music-metadata/lib/ogg/OggLoader.js", "../../music-metadata/lib/wavpack/WavPackLoader.js", "../../music-metadata/lib/wav/WaveLoader.js", "../../music-metadata/lib/lyrics3/Lyrics3.js", "../../music-metadata/lib/core.js"],
  "sourcesContent": ["/*!\r\n * content-type\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict'\r\n\r\n/**\r\n * RegExp to match *( \";\" parameter ) in RFC 7231 sec 3.1.1.1\r\n *\r\n * parameter     = token \"=\" ( token / quoted-string )\r\n * token         = 1*tchar\r\n * tchar         = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\r\n *               / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\r\n *               / DIGIT / ALPHA\r\n *               ; any VCHAR, except delimiters\r\n * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE\r\n * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text\r\n * obs-text      = %x80-FF\r\n * quoted-pair   = \"\\\" ( HTAB / SP / VCHAR / obs-text )\r\n */\r\nvar PARAM_REGEXP = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *(\"(?:[\\u000b\\u0020\\u0021\\u0023-\\u005b\\u005d-\\u007e\\u0080-\\u00ff]|\\\\[\\u000b\\u0020-\\u00ff])*\"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g // eslint-disable-line no-control-regex\r\nvar TEXT_REGEXP = /^[\\u000b\\u0020-\\u007e\\u0080-\\u00ff]+$/ // eslint-disable-line no-control-regex\r\nvar TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/\r\n\r\n/**\r\n * RegExp to match quoted-pair in RFC 7230 sec 3.2.6\r\n *\r\n * quoted-pair = \"\\\" ( HTAB / SP / VCHAR / obs-text )\r\n * obs-text    = %x80-FF\r\n */\r\nvar QESC_REGEXP = /\\\\([\\u000b\\u0020-\\u00ff])/g // eslint-disable-line no-control-regex\r\n\r\n/**\r\n * RegExp to match chars that must be quoted-pair in RFC 7230 sec 3.2.6\r\n */\r\nvar QUOTE_REGEXP = /([\\\\\"])/g\r\n\r\n/**\r\n * RegExp to match type in RFC 7231 sec 3.1.1.1\r\n *\r\n * media-type = type \"/\" subtype\r\n * type       = token\r\n * subtype    = token\r\n */\r\nvar TYPE_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nexports.format = format\r\nexports.parse = parse\r\n\r\n/**\r\n * Format object to media type.\r\n *\r\n * @param {object} obj\r\n * @return {string}\r\n * @public\r\n */\r\n\r\nfunction format (obj) {\r\n  if (!obj || typeof obj !== 'object') {\r\n    throw new TypeError('argument obj is required')\r\n  }\r\n\r\n  var parameters = obj.parameters\r\n  var type = obj.type\r\n\r\n  if (!type || !TYPE_REGEXP.test(type)) {\r\n    throw new TypeError('invalid type')\r\n  }\r\n\r\n  var string = type\r\n\r\n  // append parameters\r\n  if (parameters && typeof parameters === 'object') {\r\n    var param\r\n    var params = Object.keys(parameters).sort()\r\n\r\n    for (var i = 0; i < params.length; i++) {\r\n      param = params[i]\r\n\r\n      if (!TOKEN_REGEXP.test(param)) {\r\n        throw new TypeError('invalid parameter name')\r\n      }\r\n\r\n      string += '; ' + param + '=' + qstring(parameters[param])\r\n    }\r\n  }\r\n\r\n  return string\r\n}\r\n\r\n/**\r\n * Parse media type to object.\r\n *\r\n * @param {string|object} string\r\n * @return {Object}\r\n * @public\r\n */\r\n\r\nfunction parse (string) {\r\n  if (!string) {\r\n    throw new TypeError('argument string is required')\r\n  }\r\n\r\n  // support req/res-like objects as argument\r\n  var header = typeof string === 'object'\r\n    ? getcontenttype(string)\r\n    : string\r\n\r\n  if (typeof header !== 'string') {\r\n    throw new TypeError('argument string is required to be a string')\r\n  }\r\n\r\n  var index = header.indexOf(';')\r\n  var type = index !== -1\r\n    ? header.slice(0, index).trim()\r\n    : header.trim()\r\n\r\n  if (!TYPE_REGEXP.test(type)) {\r\n    throw new TypeError('invalid media type')\r\n  }\r\n\r\n  var obj = new ContentType(type.toLowerCase())\r\n\r\n  // parse parameters\r\n  if (index !== -1) {\r\n    var key\r\n    var match\r\n    var value\r\n\r\n    PARAM_REGEXP.lastIndex = index\r\n\r\n    while ((match = PARAM_REGEXP.exec(header))) {\r\n      if (match.index !== index) {\r\n        throw new TypeError('invalid parameter format')\r\n      }\r\n\r\n      index += match[0].length\r\n      key = match[1].toLowerCase()\r\n      value = match[2]\r\n\r\n      if (value.charCodeAt(0) === 0x22 /* \" */) {\r\n        // remove quotes\r\n        value = value.slice(1, -1)\r\n\r\n        // remove escapes\r\n        if (value.indexOf('\\\\') !== -1) {\r\n          value = value.replace(QESC_REGEXP, '$1')\r\n        }\r\n      }\r\n\r\n      obj.parameters[key] = value\r\n    }\r\n\r\n    if (index !== header.length) {\r\n      throw new TypeError('invalid parameter format')\r\n    }\r\n  }\r\n\r\n  return obj\r\n}\r\n\r\n/**\r\n * Get content-type from req/res objects.\r\n *\r\n * @param {object}\r\n * @return {Object}\r\n * @private\r\n */\r\n\r\nfunction getcontenttype (obj) {\r\n  var header\r\n\r\n  if (typeof obj.getHeader === 'function') {\r\n    // res-like\r\n    header = obj.getHeader('content-type')\r\n  } else if (typeof obj.headers === 'object') {\r\n    // req-like\r\n    header = obj.headers && obj.headers['content-type']\r\n  }\r\n\r\n  if (typeof header !== 'string') {\r\n    throw new TypeError('content-type header is missing from object')\r\n  }\r\n\r\n  return header\r\n}\r\n\r\n/**\r\n * Quote a string if necessary.\r\n *\r\n * @param {string} val\r\n * @return {string}\r\n * @private\r\n */\r\n\r\nfunction qstring (val) {\r\n  var str = String(val)\r\n\r\n  // no need to quote tokens\r\n  if (TOKEN_REGEXP.test(str)) {\r\n    return str\r\n  }\r\n\r\n  if (str.length > 0 && !TEXT_REGEXP.test(str)) {\r\n    throw new TypeError('invalid parameter value')\r\n  }\r\n\r\n  return '\"' + str.replace(QUOTE_REGEXP, '\\\\$1') + '\"'\r\n}\r\n\r\n/**\r\n * Class to represent a content type.\r\n * @private\r\n */\r\nfunction ContentType (type) {\r\n  this.parameters = Object.create(null)\r\n  this.type = type\r\n}\r\n", "/*!\r\n * media-typer\r\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n'use strict'\r\n\r\n/**\r\n * RegExp to match type in RFC 6838\r\n *\r\n * type-name = restricted-name\r\n * subtype-name = restricted-name\r\n * restricted-name = restricted-name-first *126restricted-name-chars\r\n * restricted-name-first  = ALPHA / DIGIT\r\n * restricted-name-chars  = ALPHA / DIGIT / \"!\" / \"#\" /\r\n *                          \"$\" / \"&\" / \"-\" / \"^\" / \"_\"\r\n * restricted-name-chars =/ \".\" ; Characters before first dot always\r\n *                              ; specify a facet name\r\n * restricted-name-chars =/ \"+\" ; Characters after last plus always\r\n *                              ; specify a structured syntax suffix\r\n * ALPHA =  %x41-5A / %x61-7A   ; A-Z / a-z\r\n * DIGIT =  %x30-39             ; 0-9\r\n */\r\nvar SUBTYPE_NAME_REGEXP = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/\r\nvar TYPE_NAME_REGEXP = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/\r\nvar TYPE_REGEXP = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nexports.format = format\r\nexports.parse = parse\r\nexports.test = test\r\n\r\n/**\r\n * Format object to media type.\r\n *\r\n * @param {object} obj\r\n * @return {string}\r\n * @public\r\n */\r\n\r\nfunction format (obj) {\r\n  if (!obj || typeof obj !== 'object') {\r\n    throw new TypeError('argument obj is required')\r\n  }\r\n\r\n  var subtype = obj.subtype\r\n  var suffix = obj.suffix\r\n  var type = obj.type\r\n\r\n  if (!type || !TYPE_NAME_REGEXP.test(type)) {\r\n    throw new TypeError('invalid type')\r\n  }\r\n\r\n  if (!subtype || !SUBTYPE_NAME_REGEXP.test(subtype)) {\r\n    throw new TypeError('invalid subtype')\r\n  }\r\n\r\n  // format as type/subtype\r\n  var string = type + '/' + subtype\r\n\r\n  // append +suffix\r\n  if (suffix) {\r\n    if (!TYPE_NAME_REGEXP.test(suffix)) {\r\n      throw new TypeError('invalid suffix')\r\n    }\r\n\r\n    string += '+' + suffix\r\n  }\r\n\r\n  return string\r\n}\r\n\r\n/**\r\n * Test media type.\r\n *\r\n * @param {string} string\r\n * @return {object}\r\n * @public\r\n */\r\n\r\nfunction test (string) {\r\n  if (!string) {\r\n    throw new TypeError('argument string is required')\r\n  }\r\n\r\n  if (typeof string !== 'string') {\r\n    throw new TypeError('argument string is required to be a string')\r\n  }\r\n\r\n  return TYPE_REGEXP.test(string.toLowerCase())\r\n}\r\n\r\n/**\r\n * Parse media type to object.\r\n *\r\n * @param {string} string\r\n * @return {object}\r\n * @public\r\n */\r\n\r\nfunction parse (string) {\r\n  if (!string) {\r\n    throw new TypeError('argument string is required')\r\n  }\r\n\r\n  if (typeof string !== 'string') {\r\n    throw new TypeError('argument string is required to be a string')\r\n  }\r\n\r\n  var match = TYPE_REGEXP.exec(string.toLowerCase())\r\n\r\n  if (!match) {\r\n    throw new TypeError('invalid media type')\r\n  }\r\n\r\n  var type = match[1]\r\n  var subtype = match[2]\r\n  var suffix\r\n\r\n  // suffix after last +\r\n  var index = subtype.lastIndexOf('+')\r\n  if (index !== -1) {\r\n    suffix = subtype.substr(index + 1)\r\n    subtype = subtype.substr(0, index)\r\n  }\r\n\r\n  return new MediaType(type, subtype, suffix)\r\n}\r\n\r\n/**\r\n * Class for MediaType object.\r\n * @public\r\n */\r\n\r\nfunction MediaType (type, subtype, suffix) {\r\n  this.type = type\r\n  this.subtype = subtype\r\n  this.suffix = suffix\r\n}\r\n", "export const defaultMessages = 'End-Of-Stream';\r\n/**\r\n * Thrown on read operation of the end of file or stream has been reached\r\n */\r\nexport class EndOfStreamError extends Error {\r\n    constructor() {\r\n        super(defaultMessages);\r\n    }\r\n}\r\n", "import { EndOfStreamError } from \"./EndOfStreamError.js\";\r\nexport class AbstractStreamReader {\r\n    constructor() {\r\n        /**\r\n         * Maximum request length on read-stream operation\r\n         */\r\n        this.maxStreamReadSize = 1 * 1024 * 1024;\r\n        this.endOfStream = false;\r\n        /**\r\n         * Store peeked data\r\n         * @type {Array}\r\n         */\r\n        this.peekQueue = [];\r\n    }\r\n    async peek(uint8Array, offset, length) {\r\n        const bytesRead = await this.read(uint8Array, offset, length);\r\n        this.peekQueue.push(uint8Array.subarray(offset, offset + bytesRead)); // Put read data back to peek buffer\r\n        return bytesRead;\r\n    }\r\n    async read(buffer, offset, length) {\r\n        if (length === 0) {\r\n            return 0;\r\n        }\r\n        let bytesRead = this.readFromPeekBuffer(buffer, offset, length);\r\n        bytesRead += await this.readRemainderFromStream(buffer, offset + bytesRead, length - bytesRead);\r\n        if (bytesRead === 0) {\r\n            throw new EndOfStreamError();\r\n        }\r\n        return bytesRead;\r\n    }\r\n    /**\r\n     * Read chunk from stream\r\n     * @param buffer - Target Uint8Array (or Buffer) to store data read from stream in\r\n     * @param offset - Offset target\r\n     * @param length - Number of bytes to read\r\n     * @returns Number of bytes read\r\n     */\r\n    readFromPeekBuffer(buffer, offset, length) {\r\n        let remaining = length;\r\n        let bytesRead = 0;\r\n        // consume peeked data first\r\n        while (this.peekQueue.length > 0 && remaining > 0) {\r\n            const peekData = this.peekQueue.pop(); // Front of queue\r\n            if (!peekData)\r\n                throw new Error('peekData should be defined');\r\n            const lenCopy = Math.min(peekData.length, remaining);\r\n            buffer.set(peekData.subarray(0, lenCopy), offset + bytesRead);\r\n            bytesRead += lenCopy;\r\n            remaining -= lenCopy;\r\n            if (lenCopy < peekData.length) {\r\n                // remainder back to queue\r\n                this.peekQueue.push(peekData.subarray(lenCopy));\r\n            }\r\n        }\r\n        return bytesRead;\r\n    }\r\n    async readRemainderFromStream(buffer, offset, initialRemaining) {\r\n        let remaining = initialRemaining;\r\n        let bytesRead = 0;\r\n        // Continue reading from stream if required\r\n        while (remaining > 0 && !this.endOfStream) {\r\n            const reqLen = Math.min(remaining, this.maxStreamReadSize);\r\n            const chunkLen = await this.readFromStream(buffer, offset + bytesRead, reqLen);\r\n            if (chunkLen === 0)\r\n                break;\r\n            bytesRead += chunkLen;\r\n            remaining -= chunkLen;\r\n        }\r\n        return bytesRead;\r\n    }\r\n}\r\n", "import { EndOfStreamError } from './EndOfStreamError.js';\r\nexport { EndOfStreamError } from './EndOfStreamError.js';\r\nimport { AbstractStreamReader } from \"./AbstractStreamReader.js\";\r\n/**\r\n * Read from a WebStream\r\n * Reference: https://nodejs.org/api/webstreams.html#class-readablestreambyobreader\r\n */\r\nexport class WebStreamReader extends AbstractStreamReader {\r\n    constructor(stream) {\r\n        super();\r\n        this.reader = stream.getReader({ mode: 'byob' });\r\n    }\r\n    async readFromStream(buffer, offset, length) {\r\n        if (this.endOfStream) {\r\n            throw new EndOfStreamError();\r\n        }\r\n        const result = await this.reader.read(new Uint8Array(length));\r\n        if (result.done) {\r\n            this.endOfStream = result.done;\r\n        }\r\n        if (result.value) {\r\n            buffer.set(result.value, offset);\r\n            return result.value.byteLength;\r\n        }\r\n        return 0;\r\n    }\r\n    abort() {\r\n        return this.reader.cancel(); // Signals a loss of interest in the stream by a consumer\r\n    }\r\n    async close() {\r\n        await this.abort();\r\n        this.reader.releaseLock();\r\n    }\r\n}\r\n", "import { EndOfStreamError } from 'peek-readable';\r\n/**\r\n * Core tokenizer\r\n */\r\nexport class AbstractTokenizer {\r\n    /**\r\n     * Constructor\r\n     * @param options Tokenizer options\r\n     * @protected\r\n     */\r\n    constructor(options) {\r\n        this.numBuffer = new Uint8Array(8);\r\n        /**\r\n         * Tokenizer-stream position\r\n         */\r\n        this.position = 0;\r\n        this.onClose = options?.onClose;\r\n        if (options?.abortSignal) {\r\n            options.abortSignal.addEventListener('abort', () => {\r\n                this.abort();\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Read a token from the tokenizer-stream\r\n     * @param token - The token to read\r\n     * @param position - If provided, the desired position in the tokenizer-stream\r\n     * @returns Promise with token data\r\n     */\r\n    async readToken(token, position = this.position) {\r\n        const uint8Array = new Uint8Array(token.len);\r\n        const len = await this.readBuffer(uint8Array, { position });\r\n        if (len < token.len)\r\n            throw new EndOfStreamError();\r\n        return token.get(uint8Array, 0);\r\n    }\r\n    /**\r\n     * Peek a token from the tokenizer-stream.\r\n     * @param token - Token to peek from the tokenizer-stream.\r\n     * @param position - Offset where to begin reading within the file. If position is null, data will be read from the current file position.\r\n     * @returns Promise with token data\r\n     */\r\n    async peekToken(token, position = this.position) {\r\n        const uint8Array = new Uint8Array(token.len);\r\n        const len = await this.peekBuffer(uint8Array, { position });\r\n        if (len < token.len)\r\n            throw new EndOfStreamError();\r\n        return token.get(uint8Array, 0);\r\n    }\r\n    /**\r\n     * Read a numeric token from the stream\r\n     * @param token - Numeric token\r\n     * @returns Promise with number\r\n     */\r\n    async readNumber(token) {\r\n        const len = await this.readBuffer(this.numBuffer, { length: token.len });\r\n        if (len < token.len)\r\n            throw new EndOfStreamError();\r\n        return token.get(this.numBuffer, 0);\r\n    }\r\n    /**\r\n     * Read a numeric token from the stream\r\n     * @param token - Numeric token\r\n     * @returns Promise with number\r\n     */\r\n    async peekNumber(token) {\r\n        const len = await this.peekBuffer(this.numBuffer, { length: token.len });\r\n        if (len < token.len)\r\n            throw new EndOfStreamError();\r\n        return token.get(this.numBuffer, 0);\r\n    }\r\n    /**\r\n     * Ignore number of bytes, advances the pointer in under tokenizer-stream.\r\n     * @param length - Number of bytes to ignore\r\n     * @return resolves the number of bytes ignored, equals length if this available, otherwise the number of bytes available\r\n     */\r\n    async ignore(length) {\r\n        if (this.fileInfo.size !== undefined) {\r\n            const bytesLeft = this.fileInfo.size - this.position;\r\n            if (length > bytesLeft) {\r\n                this.position += bytesLeft;\r\n                return bytesLeft;\r\n            }\r\n        }\r\n        this.position += length;\r\n        return length;\r\n    }\r\n    async close() {\r\n        await this.abort();\r\n        await this.onClose?.();\r\n    }\r\n    normalizeOptions(uint8Array, options) {\r\n        if (options && options.position !== undefined && options.position < this.position) {\r\n            throw new Error('`options.position` must be equal or greater than `tokenizer.position`');\r\n        }\r\n        if (options) {\r\n            return {\r\n                mayBeLess: options.mayBeLess === true,\r\n                offset: options.offset ? options.offset : 0,\r\n                length: options.length ? options.length : (uint8Array.length - (options.offset ? options.offset : 0)),\r\n                position: options.position ? options.position : this.position\r\n            };\r\n        }\r\n        return {\r\n            mayBeLess: false,\r\n            offset: 0,\r\n            length: uint8Array.length,\r\n            position: this.position\r\n        };\r\n    }\r\n    abort() {\r\n        return Promise.resolve(); // Ignore abort signal\r\n    }\r\n}\r\n", "import { AbstractTokenizer } from './AbstractTokenizer.js';\r\nimport { EndOfStreamError } from 'peek-readable';\r\nconst maxBufferSize = 256000;\r\nexport class ReadStreamTokenizer extends AbstractTokenizer {\r\n    /**\r\n     * Constructor\r\n     * @param streamReader stream-reader to read from\r\n     * @param options Tokenizer options\r\n     */\r\n    constructor(streamReader, options) {\r\n        super(options);\r\n        this.streamReader = streamReader;\r\n        this.fileInfo = options?.fileInfo ?? {};\r\n    }\r\n    /**\r\n     * Read buffer from tokenizer\r\n     * @param uint8Array - Target Uint8Array to fill with data read from the tokenizer-stream\r\n     * @param options - Read behaviour options\r\n     * @returns Promise with number of bytes read\r\n     */\r\n    async readBuffer(uint8Array, options) {\r\n        const normOptions = this.normalizeOptions(uint8Array, options);\r\n        const skipBytes = normOptions.position - this.position;\r\n        if (skipBytes > 0) {\r\n            await this.ignore(skipBytes);\r\n            return this.readBuffer(uint8Array, options);\r\n        }\r\n        if (skipBytes < 0) {\r\n            throw new Error('`options.position` must be equal or greater than `tokenizer.position`');\r\n        }\r\n        if (normOptions.length === 0) {\r\n            return 0;\r\n        }\r\n        const bytesRead = await this.streamReader.read(uint8Array, normOptions.offset, normOptions.length);\r\n        this.position += bytesRead;\r\n        if ((!options || !options.mayBeLess) && bytesRead < normOptions.length) {\r\n            throw new EndOfStreamError();\r\n        }\r\n        return bytesRead;\r\n    }\r\n    /**\r\n     * Peek (read ahead) buffer from tokenizer\r\n     * @param uint8Array - Uint8Array (or Buffer) to write data to\r\n     * @param options - Read behaviour options\r\n     * @returns Promise with number of bytes peeked\r\n     */\r\n    async peekBuffer(uint8Array, options) {\r\n        const normOptions = this.normalizeOptions(uint8Array, options);\r\n        let bytesRead = 0;\r\n        if (normOptions.position) {\r\n            const skipBytes = normOptions.position - this.position;\r\n            if (skipBytes > 0) {\r\n                const skipBuffer = new Uint8Array(normOptions.length + skipBytes);\r\n                bytesRead = await this.peekBuffer(skipBuffer, { mayBeLess: normOptions.mayBeLess });\r\n                uint8Array.set(skipBuffer.subarray(skipBytes), normOptions.offset);\r\n                return bytesRead - skipBytes;\r\n            }\r\n            if (skipBytes < 0) {\r\n                throw new Error('Cannot peek from a negative offset in a stream');\r\n            }\r\n        }\r\n        if (normOptions.length > 0) {\r\n            try {\r\n                bytesRead = await this.streamReader.peek(uint8Array, normOptions.offset, normOptions.length);\r\n            }\r\n            catch (err) {\r\n                if (options?.mayBeLess && err instanceof EndOfStreamError) {\r\n                    return 0;\r\n                }\r\n                throw err;\r\n            }\r\n            if ((!normOptions.mayBeLess) && bytesRead < normOptions.length) {\r\n                throw new EndOfStreamError();\r\n            }\r\n        }\r\n        return bytesRead;\r\n    }\r\n    async ignore(length) {\r\n        // debug(`ignore ${this.position}...${this.position + length - 1}`);\r\n        const bufSize = Math.min(maxBufferSize, length);\r\n        const buf = new Uint8Array(bufSize);\r\n        let totBytesRead = 0;\r\n        while (totBytesRead < length) {\r\n            const remaining = length - totBytesRead;\r\n            const bytesRead = await this.readBuffer(buf, { length: Math.min(bufSize, remaining) });\r\n            if (bytesRead < 0) {\r\n                return bytesRead;\r\n            }\r\n            totBytesRead += bytesRead;\r\n        }\r\n        return totBytesRead;\r\n    }\r\n    abort() {\r\n        return this.streamReader.abort();\r\n    }\r\n    supportsRandomAccess() {\r\n        return false;\r\n    }\r\n}\r\n", "import { EndOfStreamError } from 'peek-readable';\r\nimport { AbstractTokenizer } from './AbstractTokenizer.js';\r\nexport class BufferTokenizer extends AbstractTokenizer {\r\n    /**\r\n     * Construct BufferTokenizer\r\n     * @param uint8Array - Uint8Array to tokenize\r\n     * @param options Tokenizer options\r\n     */\r\n    constructor(uint8Array, options) {\r\n        super(options);\r\n        this.uint8Array = uint8Array;\r\n        this.fileInfo = { ...options?.fileInfo ?? {}, ...{ size: uint8Array.length } };\r\n    }\r\n    /**\r\n     * Read buffer from tokenizer\r\n     * @param uint8Array - Uint8Array to tokenize\r\n     * @param options - Read behaviour options\r\n     * @returns {Promise<number>}\r\n     */\r\n    async readBuffer(uint8Array, options) {\r\n        if (options?.position) {\r\n            if (options.position < this.position) {\r\n                throw new Error('`options.position` must be equal or greater than `tokenizer.position`');\r\n            }\r\n            this.position = options.position;\r\n        }\r\n        const bytesRead = await this.peekBuffer(uint8Array, options);\r\n        this.position += bytesRead;\r\n        return bytesRead;\r\n    }\r\n    /**\r\n     * Peek (read ahead) buffer from tokenizer\r\n     * @param uint8Array\r\n     * @param options - Read behaviour options\r\n     * @returns {Promise<number>}\r\n     */\r\n    async peekBuffer(uint8Array, options) {\r\n        const normOptions = this.normalizeOptions(uint8Array, options);\r\n        const bytes2read = Math.min(this.uint8Array.length - normOptions.position, normOptions.length);\r\n        if ((!normOptions.mayBeLess) && bytes2read < normOptions.length) {\r\n            throw new EndOfStreamError();\r\n        }\r\n        uint8Array.set(this.uint8Array.subarray(normOptions.position, normOptions.position + bytes2read), normOptions.offset);\r\n        return bytes2read;\r\n    }\r\n    close() {\r\n        return super.close();\r\n    }\r\n    supportsRandomAccess() {\r\n        return true;\r\n    }\r\n    setPosition(position) {\r\n        this.position = position;\r\n    }\r\n}\r\n", "import { StreamReader, WebStreamReader } from 'peek-readable';\r\nimport { ReadStreamTokenizer } from './ReadStreamTokenizer.js';\r\nimport { BufferTokenizer } from './BufferTokenizer.js';\r\nexport { EndOfStreamError } from 'peek-readable';\r\nexport { AbstractTokenizer } from './AbstractTokenizer.js';\r\n/**\r\n * Construct ReadStreamTokenizer from given Stream.\r\n * Will set fileSize, if provided given Stream has set the .path property/\r\n * @param stream - Read from Node.js Stream.Readable\r\n * @param options - Tokenizer options\r\n * @returns ReadStreamTokenizer\r\n */\r\nexport function fromStream(stream, options) {\r\n    return new ReadStreamTokenizer(new StreamReader(stream), options);\r\n}\r\n/**\r\n * Construct ReadStreamTokenizer from given ReadableStream (WebStream API).\r\n * Will set fileSize, if provided given Stream has set the .path property/\r\n * @param webStream - Read from Node.js Stream.Readable (must be a byte stream)\r\n * @param options - Tokenizer options\r\n * @returns ReadStreamTokenizer\r\n */\r\nexport function fromWebStream(webStream, options) {\r\n    return new ReadStreamTokenizer(new WebStreamReader(webStream), options);\r\n}\r\n/**\r\n * Construct ReadStreamTokenizer from given Buffer.\r\n * @param uint8Array - Uint8Array to tokenize\r\n * @param options - Tokenizer options\r\n * @returns BufferTokenizer\r\n */\r\nexport function fromBuffer(uint8Array, options) {\r\n    return new BufferTokenizer(uint8Array, options);\r\n}\r\n", "import {StringType} from 'token-types';\r\n\r\nexport function stringToBytes(string) {\r\n\treturn [...string].map(character => character.charCodeAt(0)); // eslint-disable-line unicorn/prefer-code-point\r\n}\r\n\r\n/**\r\nChecks whether the TAR checksum is valid.\r\n\r\n@param {Uint8Array} arrayBuffer - The TAR header `[offset ... offset + 512]`.\r\n@param {number} offset - TAR header offset.\r\n@returns {boolean} `true` if the TAR checksum is valid, otherwise `false`.\r\n*/\r\nexport function tarHeaderChecksumMatches(arrayBuffer, offset = 0) {\r\n\tconst readSum = Number.parseInt(new StringType(6).get(arrayBuffer, 148).replace(/\\0.*$/, '').trim(), 8); // Read sum in header\r\n\tif (Number.isNaN(readSum)) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tlet sum = 8 * 0x20; // Initialize signed bit sum\r\n\r\n\tfor (let index = offset; index < offset + 148; index++) {\r\n\t\tsum += arrayBuffer[index];\r\n\t}\r\n\r\n\tfor (let index = offset + 156; index < offset + 512; index++) {\r\n\t\tsum += arrayBuffer[index];\r\n\t}\r\n\r\n\treturn readSum === sum;\r\n}\r\n\r\n/**\r\nID3 UINT32 sync-safe tokenizer token.\r\n28 bits (representing up to 256MB) integer, the msb is 0 to avoid \"false syncsignals\".\r\n*/\r\nexport const uint32SyncSafeToken = {\r\n\tget: (buffer, offset) => (buffer[offset + 3] & 0x7F) | ((buffer[offset + 2]) << 7) | ((buffer[offset + 1]) << 14) | ((buffer[offset]) << 21),\r\n\tlen: 4,\r\n};\r\n", "export const extensions = [\r\n\t'jpg',\r\n\t'png',\r\n\t'apng',\r\n\t'gif',\r\n\t'webp',\r\n\t'flif',\r\n\t'xcf',\r\n\t'cr2',\r\n\t'cr3',\r\n\t'orf',\r\n\t'arw',\r\n\t'dng',\r\n\t'nef',\r\n\t'rw2',\r\n\t'raf',\r\n\t'tif',\r\n\t'bmp',\r\n\t'icns',\r\n\t'jxr',\r\n\t'psd',\r\n\t'indd',\r\n\t'zip',\r\n\t'tar',\r\n\t'rar',\r\n\t'gz',\r\n\t'bz2',\r\n\t'7z',\r\n\t'dmg',\r\n\t'mp4',\r\n\t'mid',\r\n\t'mkv',\r\n\t'webm',\r\n\t'mov',\r\n\t'avi',\r\n\t'mpg',\r\n\t'mp2',\r\n\t'mp3',\r\n\t'm4a',\r\n\t'oga',\r\n\t'ogg',\r\n\t'ogv',\r\n\t'opus',\r\n\t'flac',\r\n\t'wav',\r\n\t'spx',\r\n\t'amr',\r\n\t'pdf',\r\n\t'epub',\r\n\t'elf',\r\n\t'macho',\r\n\t'exe',\r\n\t'swf',\r\n\t'rtf',\r\n\t'wasm',\r\n\t'woff',\r\n\t'woff2',\r\n\t'eot',\r\n\t'ttf',\r\n\t'otf',\r\n\t'ico',\r\n\t'flv',\r\n\t'ps',\r\n\t'xz',\r\n\t'sqlite',\r\n\t'nes',\r\n\t'crx',\r\n\t'xpi',\r\n\t'cab',\r\n\t'deb',\r\n\t'ar',\r\n\t'rpm',\r\n\t'Z',\r\n\t'lz',\r\n\t'cfb',\r\n\t'mxf',\r\n\t'mts',\r\n\t'blend',\r\n\t'bpg',\r\n\t'docx',\r\n\t'pptx',\r\n\t'xlsx',\r\n\t'3gp',\r\n\t'3g2',\r\n\t'j2c',\r\n\t'jp2',\r\n\t'jpm',\r\n\t'jpx',\r\n\t'mj2',\r\n\t'aif',\r\n\t'qcp',\r\n\t'odt',\r\n\t'ods',\r\n\t'odp',\r\n\t'xml',\r\n\t'mobi',\r\n\t'heic',\r\n\t'cur',\r\n\t'ktx',\r\n\t'ape',\r\n\t'wv',\r\n\t'dcm',\r\n\t'ics',\r\n\t'glb',\r\n\t'pcap',\r\n\t'dsf',\r\n\t'lnk',\r\n\t'alias',\r\n\t'voc',\r\n\t'ac3',\r\n\t'm4v',\r\n\t'm4p',\r\n\t'm4b',\r\n\t'f4v',\r\n\t'f4p',\r\n\t'f4b',\r\n\t'f4a',\r\n\t'mie',\r\n\t'asf',\r\n\t'ogm',\r\n\t'ogx',\r\n\t'mpc',\r\n\t'arrow',\r\n\t'shp',\r\n\t'aac',\r\n\t'mp1',\r\n\t'it',\r\n\t's3m',\r\n\t'xm',\r\n\t'ai',\r\n\t'skp',\r\n\t'avif',\r\n\t'eps',\r\n\t'lzh',\r\n\t'pgp',\r\n\t'asar',\r\n\t'stl',\r\n\t'chm',\r\n\t'3mf',\r\n\t'zst',\r\n\t'jxl',\r\n\t'vcf',\r\n\t'jls',\r\n\t'pst',\r\n\t'dwg',\r\n\t'parquet',\r\n\t'class',\r\n\t'arj',\r\n\t'cpio',\r\n\t'ace',\r\n\t'avro',\r\n\t'icc',\r\n\t'fbx',\r\n\t'vsdx',\r\n\t'vtt',\r\n\t'apk',\r\n];\r\n\r\nexport const mimeTypes = [\r\n\t'image/jpeg',\r\n\t'image/png',\r\n\t'image/gif',\r\n\t'image/webp',\r\n\t'image/flif',\r\n\t'image/x-xcf',\r\n\t'image/x-canon-cr2',\r\n\t'image/x-canon-cr3',\r\n\t'image/tiff',\r\n\t'image/bmp',\r\n\t'image/vnd.ms-photo',\r\n\t'image/vnd.adobe.photoshop',\r\n\t'application/x-indesign',\r\n\t'application/epub+zip',\r\n\t'application/x-xpinstall',\r\n\t'application/vnd.oasis.opendocument.text',\r\n\t'application/vnd.oasis.opendocument.spreadsheet',\r\n\t'application/vnd.oasis.opendocument.presentation',\r\n\t'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n\t'application/vnd.openxmlformats-officedocument.presentationml.presentation',\r\n\t'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n\t'application/zip',\r\n\t'application/x-tar',\r\n\t'application/x-rar-compressed',\r\n\t'application/gzip',\r\n\t'application/x-bzip2',\r\n\t'application/x-7z-compressed',\r\n\t'application/x-apple-diskimage',\r\n\t'application/x-apache-arrow',\r\n\t'video/mp4',\r\n\t'audio/midi',\r\n\t'video/x-matroska',\r\n\t'video/webm',\r\n\t'video/quicktime',\r\n\t'video/vnd.avi',\r\n\t'audio/wav',\r\n\t'audio/qcelp',\r\n\t'audio/x-ms-asf',\r\n\t'video/x-ms-asf',\r\n\t'application/vnd.ms-asf',\r\n\t'video/mpeg',\r\n\t'video/3gpp',\r\n\t'audio/mpeg',\r\n\t'audio/mp4', // RFC 4337\r\n\t'video/ogg',\r\n\t'audio/ogg',\r\n\t'audio/ogg; codecs=opus',\r\n\t'application/ogg',\r\n\t'audio/x-flac',\r\n\t'audio/ape',\r\n\t'audio/wavpack',\r\n\t'audio/amr',\r\n\t'application/pdf',\r\n\t'application/x-elf',\r\n\t'application/x-mach-binary',\r\n\t'application/x-msdownload',\r\n\t'application/x-shockwave-flash',\r\n\t'application/rtf',\r\n\t'application/wasm',\r\n\t'font/woff',\r\n\t'font/woff2',\r\n\t'application/vnd.ms-fontobject',\r\n\t'font/ttf',\r\n\t'font/otf',\r\n\t'image/x-icon',\r\n\t'video/x-flv',\r\n\t'application/postscript',\r\n\t'application/eps',\r\n\t'application/x-xz',\r\n\t'application/x-sqlite3',\r\n\t'application/x-nintendo-nes-rom',\r\n\t'application/x-google-chrome-extension',\r\n\t'application/vnd.ms-cab-compressed',\r\n\t'application/x-deb',\r\n\t'application/x-unix-archive',\r\n\t'application/x-rpm',\r\n\t'application/x-compress',\r\n\t'application/x-lzip',\r\n\t'application/x-cfb',\r\n\t'application/x-mie',\r\n\t'application/mxf',\r\n\t'video/mp2t',\r\n\t'application/x-blender',\r\n\t'image/bpg',\r\n\t'image/j2c',\r\n\t'image/jp2',\r\n\t'image/jpx',\r\n\t'image/jpm',\r\n\t'image/mj2',\r\n\t'audio/aiff',\r\n\t'application/xml',\r\n\t'application/x-mobipocket-ebook',\r\n\t'image/heif',\r\n\t'image/heif-sequence',\r\n\t'image/heic',\r\n\t'image/heic-sequence',\r\n\t'image/icns',\r\n\t'image/ktx',\r\n\t'application/dicom',\r\n\t'audio/x-musepack',\r\n\t'text/calendar',\r\n\t'text/vcard',\r\n\t'text/vtt',\r\n\t'model/gltf-binary',\r\n\t'application/vnd.tcpdump.pcap',\r\n\t'audio/x-dsf', // Non-standard\r\n\t'application/x.ms.shortcut', // Invented by us\r\n\t'application/x.apple.alias', // Invented by us\r\n\t'audio/x-voc',\r\n\t'audio/vnd.dolby.dd-raw',\r\n\t'audio/x-m4a',\r\n\t'image/apng',\r\n\t'image/x-olympus-orf',\r\n\t'image/x-sony-arw',\r\n\t'image/x-adobe-dng',\r\n\t'image/x-nikon-nef',\r\n\t'image/x-panasonic-rw2',\r\n\t'image/x-fujifilm-raf',\r\n\t'video/x-m4v',\r\n\t'video/3gpp2',\r\n\t'application/x-esri-shape',\r\n\t'audio/aac',\r\n\t'audio/x-it',\r\n\t'audio/x-s3m',\r\n\t'audio/x-xm',\r\n\t'video/MP1S',\r\n\t'video/MP2P',\r\n\t'application/vnd.sketchup.skp',\r\n\t'image/avif',\r\n\t'application/x-lzh-compressed',\r\n\t'application/pgp-encrypted',\r\n\t'application/x-asar',\r\n\t'model/stl',\r\n\t'application/vnd.ms-htmlhelp',\r\n\t'model/3mf',\r\n\t'image/jxl',\r\n\t'application/zstd',\r\n\t'image/jls',\r\n\t'application/vnd.ms-outlook',\r\n\t'image/vnd.dwg',\r\n\t'application/x-parquet',\r\n\t'application/java-vm',\r\n\t'application/x-arj',\r\n\t'application/x-cpio',\r\n\t'application/x-ace-compressed',\r\n\t'application/avro',\r\n\t'application/vnd.iccprofile',\r\n\t'application/x.autodesk.fbx', // Invented by us\r\n\t'application/vnd.visio',\r\n\t'application/vnd.android.package-archive',\r\n];\r\n", "/**\r\nPrimary entry point, Node.js specific entry point is index.js\r\n*/\r\n\r\nimport * as Token from 'token-types';\r\nimport * as strtok3 from 'strtok3/core';\r\nimport {includes, indexOf, getUintBE} from 'uint8array-extras';\r\nimport {\r\n\tstringToBytes,\r\n\ttarHeaderChecksumMatches,\r\n\tuint32SyncSafeToken,\r\n} from './util.js';\r\nimport {extensions, mimeTypes} from './supported.js';\r\n\r\nexport const reasonableDetectionSizeInBytes = 4100; // A fair amount of file-types are detectable within this range.\r\n\r\nexport async function fileTypeFromStream(stream) {\r\n\treturn new FileTypeParser().fromStream(stream);\r\n}\r\n\r\nexport async function fileTypeFromBuffer(input) {\r\n\treturn new FileTypeParser().fromBuffer(input);\r\n}\r\n\r\nexport async function fileTypeFromBlob(blob) {\r\n\treturn new FileTypeParser().fromBlob(blob);\r\n}\r\n\r\nfunction _check(buffer, headers, options) {\r\n\toptions = {\r\n\t\toffset: 0,\r\n\t\t...options,\r\n\t};\r\n\r\n\tfor (const [index, header] of headers.entries()) {\r\n\t\t// If a bitmask is set\r\n\t\tif (options.mask) {\r\n\t\t\t// If header doesn't equal `buf` with bits masked off\r\n\t\t\tif (header !== (options.mask[index] & buffer[index + options.offset])) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t} else if (header !== buffer[index + options.offset]) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n\r\nexport async function fileTypeFromTokenizer(tokenizer) {\r\n\treturn new FileTypeParser().fromTokenizer(tokenizer);\r\n}\r\n\r\nexport async function fileTypeStream(webStream, options) {\r\n\treturn new FileTypeParser(options).toDetectionStream(webStream, options);\r\n}\r\n\r\nexport class FileTypeParser {\r\n\tconstructor(options) {\r\n\t\tthis.detectors = options?.customDetectors;\r\n\t\tthis.tokenizerOptions = {\r\n\t\t\tabortSignal: options?.signal,\r\n\t\t};\r\n\t\tthis.fromTokenizer = this.fromTokenizer.bind(this);\r\n\t\tthis.fromBuffer = this.fromBuffer.bind(this);\r\n\t\tthis.parse = this.parse.bind(this);\r\n\t}\r\n\r\n\tasync fromTokenizer(tokenizer) {\r\n\t\tconst initialPosition = tokenizer.position;\r\n\r\n\t\tfor (const detector of this.detectors || []) {\r\n\t\t\tconst fileType = await detector(tokenizer);\r\n\t\t\tif (fileType) {\r\n\t\t\t\treturn fileType;\r\n\t\t\t}\r\n\r\n\t\t\tif (initialPosition !== tokenizer.position) {\r\n\t\t\t\treturn undefined; // Cannot proceed scanning of the tokenizer is at an arbitrary position\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.parse(tokenizer);\r\n\t}\r\n\r\n\tasync fromBuffer(input) {\r\n\t\tif (!(input instanceof Uint8Array || input instanceof ArrayBuffer)) {\r\n\t\t\tthrow new TypeError(`Expected the \\`input\\` argument to be of type \\`Uint8Array\\` or \\`ArrayBuffer\\`, got \\`${typeof input}\\``);\r\n\t\t}\r\n\r\n\t\tconst buffer = input instanceof Uint8Array ? input : new Uint8Array(input);\r\n\r\n\t\tif (!(buffer?.length > 1)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\treturn this.fromTokenizer(strtok3.fromBuffer(buffer, this.tokenizerOptions));\r\n\t}\r\n\r\n\tasync fromBlob(blob) {\r\n\t\treturn this.fromStream(blob.stream());\r\n\t}\r\n\r\n\tasync fromStream(stream) {\r\n\t\tconst tokenizer = await strtok3.fromWebStream(stream, this.tokenizerOptions);\r\n\t\ttry {\r\n\t\t\treturn await this.fromTokenizer(tokenizer);\r\n\t\t} finally {\r\n\t\t\tawait tokenizer.close();\r\n\t\t}\r\n\t}\r\n\r\n\tasync toDetectionStream(stream, options) {\r\n\t\tconst {sampleSize = reasonableDetectionSizeInBytes} = options;\r\n\t\tlet detectedFileType;\r\n\t\tlet firstChunk;\r\n\r\n\t\tconst reader = stream.getReader({mode: 'byob'});\r\n\t\ttry {\r\n\t\t\t// Read the first chunk from the stream\r\n\t\t\tconst {value: chunk, done} = await reader.read(new Uint8Array(sampleSize));\r\n\t\t\tfirstChunk = chunk;\r\n\t\t\tif (!done && chunk) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// Attempt to detect the file type from the chunk\r\n\t\t\t\t\tdetectedFileType = await this.fromBuffer(chunk.slice(0, sampleSize));\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tif (!(error instanceof strtok3.EndOfStreamError)) {\r\n\t\t\t\t\t\tthrow error; // Re-throw non-EndOfStreamError\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdetectedFileType = undefined;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfirstChunk = chunk;\r\n\t\t} finally {\r\n\t\t\treader.releaseLock(); // Ensure the reader is released\r\n\t\t}\r\n\r\n\t\t// Create a new ReadableStream to manage locking issues\r\n\t\tconst transformStream = new TransformStream({\r\n\t\t\tasync start(controller) {\r\n\t\t\t\tcontroller.enqueue(firstChunk); // Enqueue the initial chunk\r\n\t\t\t},\r\n\t\t\ttransform(chunk, controller) {\r\n\t\t\t\t// Pass through the chunks without modification\r\n\t\t\t\tcontroller.enqueue(chunk);\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\tconst newStream = stream.pipeThrough(transformStream);\r\n\t\tnewStream.fileType = detectedFileType;\r\n\r\n\t\treturn newStream;\r\n\t}\r\n\r\n\tcheck(header, options) {\r\n\t\treturn _check(this.buffer, header, options);\r\n\t}\r\n\r\n\tcheckString(header, options) {\r\n\t\treturn this.check(stringToBytes(header), options);\r\n\t}\r\n\r\n\tasync parse(tokenizer) {\r\n\t\tthis.buffer = new Uint8Array(reasonableDetectionSizeInBytes);\r\n\r\n\t\t// Keep reading until EOF if the file size is unknown.\r\n\t\tif (tokenizer.fileInfo.size === undefined) {\r\n\t\t\ttokenizer.fileInfo.size = Number.MAX_SAFE_INTEGER;\r\n\t\t}\r\n\r\n\t\tthis.tokenizer = tokenizer;\r\n\r\n\t\tawait tokenizer.peekBuffer(this.buffer, {length: 12, mayBeLess: true});\r\n\r\n\t\t// -- 2-byte signatures --\r\n\r\n\t\tif (this.check([0x42, 0x4D])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'bmp',\r\n\t\t\t\tmime: 'image/bmp',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x0B, 0x77])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'ac3',\r\n\t\t\t\tmime: 'audio/vnd.dolby.dd-raw',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x78, 0x01])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'dmg',\r\n\t\t\t\tmime: 'application/x-apple-diskimage',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x4D, 0x5A])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'exe',\r\n\t\t\t\tmime: 'application/x-msdownload',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x25, 0x21])) {\r\n\t\t\tawait tokenizer.peekBuffer(this.buffer, {length: 24, mayBeLess: true});\r\n\r\n\t\t\tif (\r\n\t\t\t\tthis.checkString('PS-Adobe-', {offset: 2})\r\n\t\t\t\t&& this.checkString(' EPSF-', {offset: 14})\r\n\t\t\t) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\text: 'eps',\r\n\t\t\t\t\tmime: 'application/eps',\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\text: 'ps',\r\n\t\t\t\tmime: 'application/postscript',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\tthis.check([0x1F, 0xA0])\r\n\t\t\t|| this.check([0x1F, 0x9D])\r\n\t\t) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'Z',\r\n\t\t\t\tmime: 'application/x-compress',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0xC7, 0x71])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'cpio',\r\n\t\t\t\tmime: 'application/x-cpio',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x60, 0xEA])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'arj',\r\n\t\t\t\tmime: 'application/x-arj',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// -- 3-byte signatures --\r\n\r\n\t\tif (this.check([0xEF, 0xBB, 0xBF])) { // UTF-8-BOM\r\n\t\t\t// Strip off UTF-8-BOM\r\n\t\t\tthis.tokenizer.ignore(3);\r\n\t\t\treturn this.parse(tokenizer);\r\n\t\t}\r\n\r\n\t\tif (this.check([0x47, 0x49, 0x46])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'gif',\r\n\t\t\t\tmime: 'image/gif',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x49, 0x49, 0xBC])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'jxr',\r\n\t\t\t\tmime: 'image/vnd.ms-photo',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x1F, 0x8B, 0x8])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'gz',\r\n\t\t\t\tmime: 'application/gzip',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x42, 0x5A, 0x68])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'bz2',\r\n\t\t\t\tmime: 'application/x-bzip2',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.checkString('ID3')) {\r\n\t\t\tawait tokenizer.ignore(6); // Skip ID3 header until the header size\r\n\t\t\tconst id3HeaderLength = await tokenizer.readToken(uint32SyncSafeToken);\r\n\t\t\tif (tokenizer.position + id3HeaderLength > tokenizer.fileInfo.size) {\r\n\t\t\t\t// Guess file type based on ID3 header for backward compatibility\r\n\t\t\t\treturn {\r\n\t\t\t\t\text: 'mp3',\r\n\t\t\t\t\tmime: 'audio/mpeg',\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tawait tokenizer.ignore(id3HeaderLength);\r\n\t\t\treturn this.fromTokenizer(tokenizer); // Skip ID3 header, recursion\r\n\t\t}\r\n\r\n\t\t// Musepack, SV7\r\n\t\tif (this.checkString('MP+')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'mpc',\r\n\t\t\t\tmime: 'audio/x-musepack',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\t(this.buffer[0] === 0x43 || this.buffer[0] === 0x46)\r\n\t\t\t&& this.check([0x57, 0x53], {offset: 1})\r\n\t\t) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'swf',\r\n\t\t\t\tmime: 'application/x-shockwave-flash',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// -- 4-byte signatures --\r\n\r\n\t\t// Requires a sample size of 4 bytes\r\n\t\tif (this.check([0xFF, 0xD8, 0xFF])) {\r\n\t\t\tif (this.check([0xF7], {offset: 3})) { // JPG7/SOF55, indicating a ISO/IEC 14495 / JPEG-LS file\r\n\t\t\t\treturn {\r\n\t\t\t\t\text: 'jls',\r\n\t\t\t\t\tmime: 'image/jls',\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\text: 'jpg',\r\n\t\t\t\tmime: 'image/jpeg',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x4F, 0x62, 0x6A, 0x01])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'avro',\r\n\t\t\t\tmime: 'application/avro',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.checkString('FLIF')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'flif',\r\n\t\t\t\tmime: 'image/flif',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.checkString('8BPS')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'psd',\r\n\t\t\t\tmime: 'image/vnd.adobe.photoshop',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.checkString('WEBP', {offset: 8})) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'webp',\r\n\t\t\t\tmime: 'image/webp',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// Musepack, SV8\r\n\t\tif (this.checkString('MPCK')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'mpc',\r\n\t\t\t\tmime: 'audio/x-musepack',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.checkString('FORM')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'aif',\r\n\t\t\t\tmime: 'audio/aiff',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.checkString('icns', {offset: 0})) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'icns',\r\n\t\t\t\tmime: 'image/icns',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// Zip-based file formats\r\n\t\t// Need to be before the `zip` check\r\n\t\tif (this.check([0x50, 0x4B, 0x3, 0x4])) { // Local file header signature\r\n\t\t\ttry {\r\n\t\t\t\twhile (tokenizer.position + 30 < tokenizer.fileInfo.size) {\r\n\t\t\t\t\tawait tokenizer.readBuffer(this.buffer, {length: 30});\r\n\r\n\t\t\t\t\tconst view = new DataView(this.buffer.buffer);\r\n\r\n\t\t\t\t\t// https://en.wikipedia.org/wiki/Zip_(file_format)#File_headers\r\n\t\t\t\t\tconst zipHeader = {\r\n\t\t\t\t\t\tcompressedSize: view.getUint32(18, true),\r\n\t\t\t\t\t\tuncompressedSize: view.getUint32(22, true),\r\n\t\t\t\t\t\tfilenameLength: view.getUint16(26, true),\r\n\t\t\t\t\t\textraFieldLength: view.getUint16(28, true),\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tzipHeader.filename = await tokenizer.readToken(new Token.StringType(zipHeader.filenameLength, 'utf-8'));\r\n\t\t\t\t\tawait tokenizer.ignore(zipHeader.extraFieldLength);\r\n\r\n\t\t\t\t\tif (/classes\\d*\\.dex/.test(zipHeader.filename)) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\text: 'apk',\r\n\t\t\t\t\t\t\tmime: 'application/vnd.android.package-archive',\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Assumes signed `.xpi` from addons.mozilla.org\r\n\t\t\t\t\tif (zipHeader.filename === 'META-INF/mozilla.rsa') {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\text: 'xpi',\r\n\t\t\t\t\t\t\tmime: 'application/x-xpinstall',\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (zipHeader.filename.endsWith('.rels') || zipHeader.filename.endsWith('.xml')) {\r\n\t\t\t\t\t\tconst type = zipHeader.filename.split('/')[0];\r\n\t\t\t\t\t\tswitch (type) {\r\n\t\t\t\t\t\t\tcase '_rels':\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 'word':\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\text: 'docx',\r\n\t\t\t\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tcase 'ppt':\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\text: 'pptx',\r\n\t\t\t\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tcase 'xl':\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\text: 'xlsx',\r\n\t\t\t\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tcase 'visio':\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\text: 'vsdx',\r\n\t\t\t\t\t\t\t\t\tmime: 'application/vnd.visio',\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (zipHeader.filename.startsWith('xl/')) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\text: 'xlsx',\r\n\t\t\t\t\t\t\tmime: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (zipHeader.filename.startsWith('3D/') && zipHeader.filename.endsWith('.model')) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\text: '3mf',\r\n\t\t\t\t\t\t\tmime: 'model/3mf',\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// The docx, xlsx and pptx file types extend the Office Open XML file format:\r\n\t\t\t\t\t// https://en.wikipedia.org/wiki/Office_Open_XML_file_formats\r\n\t\t\t\t\t// We look for:\r\n\t\t\t\t\t// - one entry named '[Content_Types].xml' or '_rels/.rels',\r\n\t\t\t\t\t// - one entry indicating specific type of file.\r\n\t\t\t\t\t// MS Office, OpenOffice and LibreOffice may put the parts in different order, so the check should not rely on it.\r\n\t\t\t\t\tif (zipHeader.filename === 'mimetype' && zipHeader.compressedSize === zipHeader.uncompressedSize) {\r\n\t\t\t\t\t\tlet mimeType = await tokenizer.readToken(new Token.StringType(zipHeader.compressedSize, 'utf-8'));\r\n\t\t\t\t\t\tmimeType = mimeType.trim();\r\n\r\n\t\t\t\t\t\tswitch (mimeType) {\r\n\t\t\t\t\t\t\tcase 'application/epub+zip':\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\text: 'epub',\r\n\t\t\t\t\t\t\t\t\tmime: 'application/epub+zip',\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tcase 'application/vnd.oasis.opendocument.text':\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\text: 'odt',\r\n\t\t\t\t\t\t\t\t\tmime: 'application/vnd.oasis.opendocument.text',\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tcase 'application/vnd.oasis.opendocument.spreadsheet':\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\text: 'ods',\r\n\t\t\t\t\t\t\t\t\tmime: 'application/vnd.oasis.opendocument.spreadsheet',\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tcase 'application/vnd.oasis.opendocument.presentation':\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\text: 'odp',\r\n\t\t\t\t\t\t\t\t\tmime: 'application/vnd.oasis.opendocument.presentation',\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Try to find next header manually when current one is corrupted\r\n\t\t\t\t\tif (zipHeader.compressedSize === 0) {\r\n\t\t\t\t\t\tlet nextHeaderIndex = -1;\r\n\r\n\t\t\t\t\t\twhile (nextHeaderIndex < 0 && (tokenizer.position < tokenizer.fileInfo.size)) {\r\n\t\t\t\t\t\t\tawait tokenizer.peekBuffer(this.buffer, {mayBeLess: true});\r\n\r\n\t\t\t\t\t\t\tnextHeaderIndex = indexOf(this.buffer, new Uint8Array([0x50, 0x4B, 0x03, 0x04]));\r\n\r\n\t\t\t\t\t\t\t// Move position to the next header if found, skip the whole buffer otherwise\r\n\t\t\t\t\t\t\tawait tokenizer.ignore(nextHeaderIndex >= 0 ? nextHeaderIndex : this.buffer.length);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tawait tokenizer.ignore(zipHeader.compressedSize);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tif (!(error instanceof strtok3.EndOfStreamError)) {\r\n\t\t\t\t\tthrow error;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\text: 'zip',\r\n\t\t\t\tmime: 'application/zip',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.checkString('OggS')) {\r\n\t\t\t// This is an OGG container\r\n\t\t\tawait tokenizer.ignore(28);\r\n\t\t\tconst type = new Uint8Array(8);\r\n\t\t\tawait tokenizer.readBuffer(type);\r\n\r\n\t\t\t// Needs to be before `ogg` check\r\n\t\t\tif (_check(type, [0x4F, 0x70, 0x75, 0x73, 0x48, 0x65, 0x61, 0x64])) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\text: 'opus',\r\n\t\t\t\t\tmime: 'audio/ogg; codecs=opus',\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// If ' theora' in header.\r\n\t\t\tif (_check(type, [0x80, 0x74, 0x68, 0x65, 0x6F, 0x72, 0x61])) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\text: 'ogv',\r\n\t\t\t\t\tmime: 'video/ogg',\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// If '\\x01video' in header.\r\n\t\t\tif (_check(type, [0x01, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x00])) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\text: 'ogm',\r\n\t\t\t\t\tmime: 'video/ogg',\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// If ' FLAC' in header  https://xiph.org/flac/faq.html\r\n\t\t\tif (_check(type, [0x7F, 0x46, 0x4C, 0x41, 0x43])) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\text: 'oga',\r\n\t\t\t\t\tmime: 'audio/ogg',\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// 'Speex  ' in header https://en.wikipedia.org/wiki/Speex\r\n\t\t\tif (_check(type, [0x53, 0x70, 0x65, 0x65, 0x78, 0x20, 0x20])) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\text: 'spx',\r\n\t\t\t\t\tmime: 'audio/ogg',\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// If '\\x01vorbis' in header\r\n\t\t\tif (_check(type, [0x01, 0x76, 0x6F, 0x72, 0x62, 0x69, 0x73])) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\text: 'ogg',\r\n\t\t\t\t\tmime: 'audio/ogg',\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// Default OGG container https://www.iana.org/assignments/media-types/application/ogg\r\n\t\t\treturn {\r\n\t\t\t\text: 'ogx',\r\n\t\t\t\tmime: 'application/ogg',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\tthis.check([0x50, 0x4B])\r\n\t\t\t&& (this.buffer[2] === 0x3 || this.buffer[2] === 0x5 || this.buffer[2] === 0x7)\r\n\t\t\t&& (this.buffer[3] === 0x4 || this.buffer[3] === 0x6 || this.buffer[3] === 0x8)\r\n\t\t) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'zip',\r\n\t\t\t\tmime: 'application/zip',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\t// File Type Box (https://en.wikipedia.org/wiki/ISO_base_media_file_format)\r\n\t\t// It's not required to be first, but it's recommended to be. Almost all ISO base media files start with `ftyp` box.\r\n\t\t// `ftyp` box must contain a brand major identifier, which must consist of ISO 8859-1 printable characters.\r\n\t\t// Here we check for 8859-1 printable characters (for simplicity, it's a mask which also catches one non-printable character).\r\n\t\tif (\r\n\t\t\tthis.checkString('ftyp', {offset: 4})\r\n\t\t\t&& (this.buffer[8] & 0x60) !== 0x00 // Brand major, first character ASCII?\r\n\t\t) {\r\n\t\t\t// They all can have MIME `video/mp4` except `application/mp4` special-case which is hard to detect.\r\n\t\t\t// For some cases, we're specific, everything else falls to `video/mp4` with `mp4` extension.\r\n\t\t\tconst brandMajor = new Token.StringType(4, 'latin1').get(this.buffer, 8).replace('\\0', ' ').trim();\r\n\t\t\tswitch (brandMajor) {\r\n\t\t\t\tcase 'avif':\r\n\t\t\t\tcase 'avis':\r\n\t\t\t\t\treturn {ext: 'avif', mime: 'image/avif'};\r\n\t\t\t\tcase 'mif1':\r\n\t\t\t\t\treturn {ext: 'heic', mime: 'image/heif'};\r\n\t\t\t\tcase 'msf1':\r\n\t\t\t\t\treturn {ext: 'heic', mime: 'image/heif-sequence'};\r\n\t\t\t\tcase 'heic':\r\n\t\t\t\tcase 'heix':\r\n\t\t\t\t\treturn {ext: 'heic', mime: 'image/heic'};\r\n\t\t\t\tcase 'hevc':\r\n\t\t\t\tcase 'hevx':\r\n\t\t\t\t\treturn {ext: 'heic', mime: 'image/heic-sequence'};\r\n\t\t\t\tcase 'qt':\r\n\t\t\t\t\treturn {ext: 'mov', mime: 'video/quicktime'};\r\n\t\t\t\tcase 'M4V':\r\n\t\t\t\tcase 'M4VH':\r\n\t\t\t\tcase 'M4VP':\r\n\t\t\t\t\treturn {ext: 'm4v', mime: 'video/x-m4v'};\r\n\t\t\t\tcase 'M4P':\r\n\t\t\t\t\treturn {ext: 'm4p', mime: 'video/mp4'};\r\n\t\t\t\tcase 'M4B':\r\n\t\t\t\t\treturn {ext: 'm4b', mime: 'audio/mp4'};\r\n\t\t\t\tcase 'M4A':\r\n\t\t\t\t\treturn {ext: 'm4a', mime: 'audio/x-m4a'};\r\n\t\t\t\tcase 'F4V':\r\n\t\t\t\t\treturn {ext: 'f4v', mime: 'video/mp4'};\r\n\t\t\t\tcase 'F4P':\r\n\t\t\t\t\treturn {ext: 'f4p', mime: 'video/mp4'};\r\n\t\t\t\tcase 'F4A':\r\n\t\t\t\t\treturn {ext: 'f4a', mime: 'audio/mp4'};\r\n\t\t\t\tcase 'F4B':\r\n\t\t\t\t\treturn {ext: 'f4b', mime: 'audio/mp4'};\r\n\t\t\t\tcase 'crx':\r\n\t\t\t\t\treturn {ext: 'cr3', mime: 'image/x-canon-cr3'};\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif (brandMajor.startsWith('3g')) {\r\n\t\t\t\t\t\tif (brandMajor.startsWith('3g2')) {\r\n\t\t\t\t\t\t\treturn {ext: '3g2', mime: 'video/3gpp2'};\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn {ext: '3gp', mime: 'video/3gpp'};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn {ext: 'mp4', mime: 'video/mp4'};\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.checkString('MThd')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'mid',\r\n\t\t\t\tmime: 'audio/midi',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\tthis.checkString('wOFF')\r\n\t\t\t&& (\r\n\t\t\t\tthis.check([0x00, 0x01, 0x00, 0x00], {offset: 4})\r\n\t\t\t\t|| this.checkString('OTTO', {offset: 4})\r\n\t\t\t)\r\n\t\t) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'woff',\r\n\t\t\t\tmime: 'font/woff',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\tthis.checkString('wOF2')\r\n\t\t\t&& (\r\n\t\t\t\tthis.check([0x00, 0x01, 0x00, 0x00], {offset: 4})\r\n\t\t\t\t|| this.checkString('OTTO', {offset: 4})\r\n\t\t\t)\r\n\t\t) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'woff2',\r\n\t\t\t\tmime: 'font/woff2',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0xD4, 0xC3, 0xB2, 0xA1]) || this.check([0xA1, 0xB2, 0xC3, 0xD4])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'pcap',\r\n\t\t\t\tmime: 'application/vnd.tcpdump.pcap',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// Sony DSD Stream File (DSF)\r\n\t\tif (this.checkString('DSD ')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'dsf',\r\n\t\t\t\tmime: 'audio/x-dsf', // Non-standard\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.checkString('LZIP')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'lz',\r\n\t\t\t\tmime: 'application/x-lzip',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.checkString('fLaC')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'flac',\r\n\t\t\t\tmime: 'audio/x-flac',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x42, 0x50, 0x47, 0xFB])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'bpg',\r\n\t\t\t\tmime: 'image/bpg',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.checkString('wvpk')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'wv',\r\n\t\t\t\tmime: 'audio/wavpack',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.checkString('%PDF')) {\r\n\t\t\ttry {\r\n\t\t\t\tawait tokenizer.ignore(1350);\r\n\t\t\t\tconst maxBufferSize = 10 * 1024 * 1024;\r\n\t\t\t\tconst buffer = new Uint8Array(Math.min(maxBufferSize, tokenizer.fileInfo.size));\r\n\t\t\t\tawait tokenizer.readBuffer(buffer, {mayBeLess: true});\r\n\r\n\t\t\t\t// Check if this is an Adobe Illustrator file\r\n\t\t\t\tif (includes(buffer, new TextEncoder().encode('AIPrivateData'))) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\text: 'ai',\r\n\t\t\t\t\t\tmime: 'application/postscript',\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\t// Swallow end of stream error if file is too small for the Adobe AI check\r\n\t\t\t\tif (!(error instanceof strtok3.EndOfStreamError)) {\r\n\t\t\t\t\tthrow error;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Assume this is just a normal PDF\r\n\t\t\treturn {\r\n\t\t\t\text: 'pdf',\r\n\t\t\t\tmime: 'application/pdf',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x00, 0x61, 0x73, 0x6D])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'wasm',\r\n\t\t\t\tmime: 'application/wasm',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// TIFF, little-endian type\r\n\t\tif (this.check([0x49, 0x49])) {\r\n\t\t\tconst fileType = await this.readTiffHeader(false);\r\n\t\t\tif (fileType) {\r\n\t\t\t\treturn fileType;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// TIFF, big-endian type\r\n\t\tif (this.check([0x4D, 0x4D])) {\r\n\t\t\tconst fileType = await this.readTiffHeader(true);\r\n\t\t\tif (fileType) {\r\n\t\t\t\treturn fileType;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.checkString('MAC ')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'ape',\r\n\t\t\t\tmime: 'audio/ape',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// https://github.com/file/file/blob/master/magic/Magdir/matroska\r\n\t\tif (this.check([0x1A, 0x45, 0xDF, 0xA3])) { // Root element: EBML\r\n\t\t\tasync function readField() {\r\n\t\t\t\tconst msb = await tokenizer.peekNumber(Token.UINT8);\r\n\t\t\t\tlet mask = 0x80;\r\n\t\t\t\tlet ic = 0; // 0 = A, 1 = B, 2 = C, 3 = D\r\n\r\n\t\t\t\twhile ((msb & mask) === 0 && mask !== 0) {\r\n\t\t\t\t\t++ic;\r\n\t\t\t\t\tmask >>= 1;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst id = new Uint8Array(ic + 1);\r\n\t\t\t\tawait tokenizer.readBuffer(id);\r\n\t\t\t\treturn id;\r\n\t\t\t}\r\n\r\n\t\t\tasync function readElement() {\r\n\t\t\t\tconst idField = await readField();\r\n\t\t\t\tconst lengthField = await readField();\r\n\r\n\t\t\t\tlengthField[0] ^= 0x80 >> (lengthField.length - 1);\r\n\t\t\t\tconst nrLength = Math.min(6, lengthField.length); // JavaScript can max read 6 bytes integer\r\n\r\n\t\t\t\tconst idView = new DataView(idField.buffer);\r\n\t\t\t\tconst lengthView = new DataView(lengthField.buffer, lengthField.length - nrLength, nrLength);\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tid: getUintBE(idView),\r\n\t\t\t\t\tlen: getUintBE(lengthView),\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tasync function readChildren(children) {\r\n\t\t\t\twhile (children > 0) {\r\n\t\t\t\t\tconst element = await readElement();\r\n\t\t\t\t\tif (element.id === 0x42_82) {\r\n\t\t\t\t\t\tconst rawValue = await tokenizer.readToken(new Token.StringType(element.len));\r\n\t\t\t\t\t\treturn rawValue.replaceAll(/\\00.*$/g, ''); // Return DocType\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tawait tokenizer.ignore(element.len); // ignore payload\r\n\t\t\t\t\t--children;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst re = await readElement();\r\n\t\t\tconst docType = await readChildren(re.len);\r\n\r\n\t\t\tswitch (docType) {\r\n\t\t\t\tcase 'webm':\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\text: 'webm',\r\n\t\t\t\t\t\tmime: 'video/webm',\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\tcase 'matroska':\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\text: 'mkv',\r\n\t\t\t\t\t\tmime: 'video/x-matroska',\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// RIFF file format which might be AVI, WAV, QCP, etc\r\n\t\tif (this.check([0x52, 0x49, 0x46, 0x46])) {\r\n\t\t\tif (this.check([0x41, 0x56, 0x49], {offset: 8})) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\text: 'avi',\r\n\t\t\t\t\tmime: 'video/vnd.avi',\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tif (this.check([0x57, 0x41, 0x56, 0x45], {offset: 8})) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\text: 'wav',\r\n\t\t\t\t\tmime: 'audio/wav',\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// QLCM, QCP file\r\n\t\t\tif (this.check([0x51, 0x4C, 0x43, 0x4D], {offset: 8})) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\text: 'qcp',\r\n\t\t\t\t\tmime: 'audio/qcelp',\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.checkString('SQLi')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'sqlite',\r\n\t\t\t\tmime: 'application/x-sqlite3',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x4E, 0x45, 0x53, 0x1A])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'nes',\r\n\t\t\t\tmime: 'application/x-nintendo-nes-rom',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.checkString('Cr24')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'crx',\r\n\t\t\t\tmime: 'application/x-google-chrome-extension',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\tthis.checkString('MSCF')\r\n\t\t\t|| this.checkString('ISc(')\r\n\t\t) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'cab',\r\n\t\t\t\tmime: 'application/vnd.ms-cab-compressed',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0xED, 0xAB, 0xEE, 0xDB])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'rpm',\r\n\t\t\t\tmime: 'application/x-rpm',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0xC5, 0xD0, 0xD3, 0xC6])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'eps',\r\n\t\t\t\tmime: 'application/eps',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x28, 0xB5, 0x2F, 0xFD])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'zst',\r\n\t\t\t\tmime: 'application/zstd',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x7F, 0x45, 0x4C, 0x46])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'elf',\r\n\t\t\t\tmime: 'application/x-elf',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x21, 0x42, 0x44, 0x4E])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'pst',\r\n\t\t\t\tmime: 'application/vnd.ms-outlook',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.checkString('PAR1')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'parquet',\r\n\t\t\t\tmime: 'application/x-parquet',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0xCF, 0xFA, 0xED, 0xFE])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'macho',\r\n\t\t\t\tmime: 'application/x-mach-binary',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// -- 5-byte signatures --\r\n\r\n\t\tif (this.check([0x4F, 0x54, 0x54, 0x4F, 0x00])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'otf',\r\n\t\t\t\tmime: 'font/otf',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.checkString('#!AMR')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'amr',\r\n\t\t\t\tmime: 'audio/amr',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.checkString('{\\\\rtf')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'rtf',\r\n\t\t\t\tmime: 'application/rtf',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x46, 0x4C, 0x56, 0x01])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'flv',\r\n\t\t\t\tmime: 'video/x-flv',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.checkString('IMPM')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'it',\r\n\t\t\t\tmime: 'audio/x-it',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\tthis.checkString('-lh0-', {offset: 2})\r\n\t\t\t|| this.checkString('-lh1-', {offset: 2})\r\n\t\t\t|| this.checkString('-lh2-', {offset: 2})\r\n\t\t\t|| this.checkString('-lh3-', {offset: 2})\r\n\t\t\t|| this.checkString('-lh4-', {offset: 2})\r\n\t\t\t|| this.checkString('-lh5-', {offset: 2})\r\n\t\t\t|| this.checkString('-lh6-', {offset: 2})\r\n\t\t\t|| this.checkString('-lh7-', {offset: 2})\r\n\t\t\t|| this.checkString('-lzs-', {offset: 2})\r\n\t\t\t|| this.checkString('-lz4-', {offset: 2})\r\n\t\t\t|| this.checkString('-lz5-', {offset: 2})\r\n\t\t\t|| this.checkString('-lhd-', {offset: 2})\r\n\t\t) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'lzh',\r\n\t\t\t\tmime: 'application/x-lzh-compressed',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// MPEG program stream (PS or MPEG-PS)\r\n\t\tif (this.check([0x00, 0x00, 0x01, 0xBA])) {\r\n\t\t\t//  MPEG-PS, MPEG-1 Part 1\r\n\t\t\tif (this.check([0x21], {offset: 4, mask: [0xF1]})) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\text: 'mpg', // May also be .ps, .mpeg\r\n\t\t\t\t\tmime: 'video/MP1S',\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// MPEG-PS, MPEG-2 Part 1\r\n\t\t\tif (this.check([0x44], {offset: 4, mask: [0xC4]})) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\text: 'mpg', // May also be .mpg, .m2p, .vob or .sub\r\n\t\t\t\t\tmime: 'video/MP2P',\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.checkString('ITSF')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'chm',\r\n\t\t\t\tmime: 'application/vnd.ms-htmlhelp',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0xCA, 0xFE, 0xBA, 0xBE])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'class',\r\n\t\t\t\tmime: 'application/java-vm',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// -- 6-byte signatures --\r\n\r\n\t\tif (this.check([0xFD, 0x37, 0x7A, 0x58, 0x5A, 0x00])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'xz',\r\n\t\t\t\tmime: 'application/x-xz',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.checkString('<?xml ')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'xml',\r\n\t\t\t\tmime: 'application/xml',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x37, 0x7A, 0xBC, 0xAF, 0x27, 0x1C])) {\r\n\t\t\treturn {\r\n\t\t\t\text: '7z',\r\n\t\t\t\tmime: 'application/x-7z-compressed',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\tthis.check([0x52, 0x61, 0x72, 0x21, 0x1A, 0x7])\r\n\t\t\t&& (this.buffer[6] === 0x0 || this.buffer[6] === 0x1)\r\n\t\t) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'rar',\r\n\t\t\t\tmime: 'application/x-rar-compressed',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.checkString('solid ')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'stl',\r\n\t\t\t\tmime: 'model/stl',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.checkString('AC')) {\r\n\t\t\tconst version = new Token.StringType(4, 'latin1').get(this.buffer, 2);\r\n\t\t\tif (version.match('^d*') && version >= 1000 && version <= 1050) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\text: 'dwg',\r\n\t\t\t\t\tmime: 'image/vnd.dwg',\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.checkString('070707')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'cpio',\r\n\t\t\t\tmime: 'application/x-cpio',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// -- 7-byte signatures --\r\n\r\n\t\tif (this.checkString('BLENDER')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'blend',\r\n\t\t\t\tmime: 'application/x-blender',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.checkString('!<arch>')) {\r\n\t\t\tawait tokenizer.ignore(8);\r\n\t\t\tconst string = await tokenizer.readToken(new Token.StringType(13, 'ascii'));\r\n\t\t\tif (string === 'debian-binary') {\r\n\t\t\t\treturn {\r\n\t\t\t\t\text: 'deb',\r\n\t\t\t\t\tmime: 'application/x-deb',\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\text: 'ar',\r\n\t\t\t\tmime: 'application/x-unix-archive',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\tthis.checkString('WEBVTT')\r\n\t\t\t&&\t(\r\n\t\t\t\t// One of LF, CR, tab, space, or end of file must follow \"WEBVTT\" per the spec (see `fixture/fixture-vtt-*.vtt` for examples). Note that `\\0` is technically the null character (there is no such thing as an EOF character). However, checking for `\\0` gives us the same result as checking for the end of the stream.\r\n\t\t\t\t(['\\n', '\\r', '\\t', ' ', '\\0'].some(char7 => this.checkString(char7, {offset: 6}))))\r\n\t\t) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'vtt',\r\n\t\t\t\tmime: 'text/vtt',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// -- 8-byte signatures --\r\n\r\n\t\tif (this.check([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A])) {\r\n\t\t\t// APNG format (https://wiki.mozilla.org/APNG_Specification)\r\n\t\t\t// 1. Find the first IDAT (image data) chunk (49 44 41 54)\r\n\t\t\t// 2. Check if there is an \"acTL\" chunk before the IDAT one (61 63 54 4C)\r\n\r\n\t\t\t// Offset calculated as follows:\r\n\t\t\t// - 8 bytes: PNG signature\r\n\t\t\t// - 4 (length) + 4 (chunk type) + 13 (chunk data) + 4 (CRC): IHDR chunk\r\n\r\n\t\t\tawait tokenizer.ignore(8); // ignore PNG signature\r\n\r\n\t\t\tasync function readChunkHeader() {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tlength: await tokenizer.readToken(Token.INT32_BE),\r\n\t\t\t\t\ttype: await tokenizer.readToken(new Token.StringType(4, 'latin1')),\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tdo {\r\n\t\t\t\tconst chunk = await readChunkHeader();\r\n\t\t\t\tif (chunk.length < 0) {\r\n\t\t\t\t\treturn; // Invalid chunk length\r\n\t\t\t\t}\r\n\r\n\t\t\t\tswitch (chunk.type) {\r\n\t\t\t\t\tcase 'IDAT':\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\text: 'png',\r\n\t\t\t\t\t\t\tmime: 'image/png',\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\tcase 'acTL':\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\text: 'apng',\r\n\t\t\t\t\t\t\tmime: 'image/apng',\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tawait tokenizer.ignore(chunk.length + 4); // Ignore chunk-data + CRC\r\n\t\t\t\t}\r\n\t\t\t} while (tokenizer.position + 8 < tokenizer.fileInfo.size);\r\n\r\n\t\t\treturn {\r\n\t\t\t\text: 'png',\r\n\t\t\t\tmime: 'image/png',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x41, 0x52, 0x52, 0x4F, 0x57, 0x31, 0x00, 0x00])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'arrow',\r\n\t\t\t\tmime: 'application/x-apache-arrow',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x67, 0x6C, 0x54, 0x46, 0x02, 0x00, 0x00, 0x00])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'glb',\r\n\t\t\t\tmime: 'model/gltf-binary',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// `mov` format variants\r\n\t\tif (\r\n\t\t\tthis.check([0x66, 0x72, 0x65, 0x65], {offset: 4}) // `free`\r\n\t\t\t|| this.check([0x6D, 0x64, 0x61, 0x74], {offset: 4}) // `mdat` MJPEG\r\n\t\t\t|| this.check([0x6D, 0x6F, 0x6F, 0x76], {offset: 4}) // `moov`\r\n\t\t\t|| this.check([0x77, 0x69, 0x64, 0x65], {offset: 4}) // `wide`\r\n\t\t) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'mov',\r\n\t\t\t\tmime: 'video/quicktime',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// -- 9-byte signatures --\r\n\r\n\t\tif (this.check([0x49, 0x49, 0x52, 0x4F, 0x08, 0x00, 0x00, 0x00, 0x18])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'orf',\r\n\t\t\t\tmime: 'image/x-olympus-orf',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.checkString('gimp xcf ')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'xcf',\r\n\t\t\t\tmime: 'image/x-xcf',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// -- 12-byte signatures --\r\n\r\n\t\tif (this.check([0x49, 0x49, 0x55, 0x00, 0x18, 0x00, 0x00, 0x00, 0x88, 0xE7, 0x74, 0xD8])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'rw2',\r\n\t\t\t\tmime: 'image/x-panasonic-rw2',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// ASF_Header_Object first 80 bytes\r\n\t\tif (this.check([0x30, 0x26, 0xB2, 0x75, 0x8E, 0x66, 0xCF, 0x11, 0xA6, 0xD9])) {\r\n\t\t\tasync function readHeader() {\r\n\t\t\t\tconst guid = new Uint8Array(16);\r\n\t\t\t\tawait tokenizer.readBuffer(guid);\r\n\t\t\t\treturn {\r\n\t\t\t\t\tid: guid,\r\n\t\t\t\t\tsize: Number(await tokenizer.readToken(Token.UINT64_LE)),\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tawait tokenizer.ignore(30);\r\n\t\t\t// Search for header should be in first 1KB of file.\r\n\t\t\twhile (tokenizer.position + 24 < tokenizer.fileInfo.size) {\r\n\t\t\t\tconst header = await readHeader();\r\n\t\t\t\tlet payload = header.size - 24;\r\n\t\t\t\tif (_check(header.id, [0x91, 0x07, 0xDC, 0xB7, 0xB7, 0xA9, 0xCF, 0x11, 0x8E, 0xE6, 0x00, 0xC0, 0x0C, 0x20, 0x53, 0x65])) {\r\n\t\t\t\t\t// Sync on Stream-Properties-Object (B7DC0791-A9B7-11CF-8EE6-00C00C205365)\r\n\t\t\t\t\tconst typeId = new Uint8Array(16);\r\n\t\t\t\t\tpayload -= await tokenizer.readBuffer(typeId);\r\n\r\n\t\t\t\t\tif (_check(typeId, [0x40, 0x9E, 0x69, 0xF8, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B])) {\r\n\t\t\t\t\t\t// Found audio:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\text: 'asf',\r\n\t\t\t\t\t\t\tmime: 'audio/x-ms-asf',\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (_check(typeId, [0xC0, 0xEF, 0x19, 0xBC, 0x4D, 0x5B, 0xCF, 0x11, 0xA8, 0xFD, 0x00, 0x80, 0x5F, 0x5C, 0x44, 0x2B])) {\r\n\t\t\t\t\t\t// Found video:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\text: 'asf',\r\n\t\t\t\t\t\t\tmime: 'video/x-ms-asf',\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tawait tokenizer.ignore(payload);\r\n\t\t\t}\r\n\r\n\t\t\t// Default to ASF generic extension\r\n\t\t\treturn {\r\n\t\t\t\text: 'asf',\r\n\t\t\t\tmime: 'application/vnd.ms-asf',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'ktx',\r\n\t\t\t\tmime: 'image/ktx',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif ((this.check([0x7E, 0x10, 0x04]) || this.check([0x7E, 0x18, 0x04])) && this.check([0x30, 0x4D, 0x49, 0x45], {offset: 4})) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'mie',\r\n\t\t\t\tmime: 'application/x-mie',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x27, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], {offset: 2})) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'shp',\r\n\t\t\t\tmime: 'application/x-esri-shape',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0xFF, 0x4F, 0xFF, 0x51])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'j2c',\r\n\t\t\t\tmime: 'image/j2c',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x00, 0x00, 0x00, 0x0C, 0x6A, 0x50, 0x20, 0x20, 0x0D, 0x0A, 0x87, 0x0A])) {\r\n\t\t\t// JPEG-2000 family\r\n\r\n\t\t\tawait tokenizer.ignore(20);\r\n\t\t\tconst type = await tokenizer.readToken(new Token.StringType(4, 'ascii'));\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase 'jp2 ':\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\text: 'jp2',\r\n\t\t\t\t\t\tmime: 'image/jp2',\r\n\t\t\t\t\t};\r\n\t\t\t\tcase 'jpx ':\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\text: 'jpx',\r\n\t\t\t\t\t\tmime: 'image/jpx',\r\n\t\t\t\t\t};\r\n\t\t\t\tcase 'jpm ':\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\text: 'jpm',\r\n\t\t\t\t\t\tmime: 'image/jpm',\r\n\t\t\t\t\t};\r\n\t\t\t\tcase 'mjp2':\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\text: 'mj2',\r\n\t\t\t\t\t\tmime: 'image/mj2',\r\n\t\t\t\t\t};\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\tthis.check([0xFF, 0x0A])\r\n\t\t\t|| this.check([0x00, 0x00, 0x00, 0x0C, 0x4A, 0x58, 0x4C, 0x20, 0x0D, 0x0A, 0x87, 0x0A])\r\n\t\t) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'jxl',\r\n\t\t\t\tmime: 'image/jxl',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0xFE, 0xFF])) { // UTF-16-BOM-LE\r\n\t\t\tif (this.check([0, 60, 0, 63, 0, 120, 0, 109, 0, 108], {offset: 2})) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\text: 'xml',\r\n\t\t\t\t\tmime: 'application/xml',\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn undefined; // Some unknown text based format\r\n\t\t}\r\n\r\n\t\t// -- Unsafe signatures --\r\n\r\n\t\tif (\r\n\t\t\tthis.check([0x0, 0x0, 0x1, 0xBA])\r\n\t\t\t|| this.check([0x0, 0x0, 0x1, 0xB3])\r\n\t\t) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'mpg',\r\n\t\t\t\tmime: 'video/mpeg',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x00, 0x01, 0x00, 0x00, 0x00])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'ttf',\r\n\t\t\t\tmime: 'font/ttf',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x00, 0x00, 0x01, 0x00])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'ico',\r\n\t\t\t\tmime: 'image/x-icon',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x00, 0x00, 0x02, 0x00])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'cur',\r\n\t\t\t\tmime: 'image/x-icon',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1])) {\r\n\t\t\t// Detected Microsoft Compound File Binary File (MS-CFB) Format.\r\n\t\t\treturn {\r\n\t\t\t\text: 'cfb',\r\n\t\t\t\tmime: 'application/x-cfb',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// Increase sample size from 12 to 256.\r\n\t\tawait tokenizer.peekBuffer(this.buffer, {length: Math.min(256, tokenizer.fileInfo.size), mayBeLess: true});\r\n\r\n\t\tif (this.check([0x61, 0x63, 0x73, 0x70], {offset: 36})) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'icc',\r\n\t\t\t\tmime: 'application/vnd.iccprofile',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// ACE: requires 14 bytes in the buffer\r\n\t\tif (this.checkString('**ACE', {offset: 7}) && this.checkString('**', {offset: 12})) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'ace',\r\n\t\t\t\tmime: 'application/x-ace-compressed',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// -- 15-byte signatures --\r\n\r\n\t\tif (this.checkString('BEGIN:')) {\r\n\t\t\tif (this.checkString('VCARD', {offset: 6})) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\text: 'vcf',\r\n\t\t\t\t\tmime: 'text/vcard',\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tif (this.checkString('VCALENDAR', {offset: 6})) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\text: 'ics',\r\n\t\t\t\t\tmime: 'text/calendar',\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// `raf` is here just to keep all the raw image detectors together.\r\n\t\tif (this.checkString('FUJIFILMCCD-RAW')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'raf',\r\n\t\t\t\tmime: 'image/x-fujifilm-raf',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.checkString('Extended Module:')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'xm',\r\n\t\t\t\tmime: 'audio/x-xm',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.checkString('Creative Voice File')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'voc',\r\n\t\t\t\tmime: 'audio/x-voc',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x04, 0x00, 0x00, 0x00]) && this.buffer.length >= 16) { // Rough & quick check Pickle/ASAR\r\n\t\t\tconst jsonSize = new DataView(this.buffer.buffer).getUint32(12, true);\r\n\r\n\t\t\tif (jsonSize > 12 && this.buffer.length >= jsonSize + 16) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst header = new TextDecoder().decode(this.buffer.slice(16, jsonSize + 16));\r\n\t\t\t\t\tconst json = JSON.parse(header);\r\n\t\t\t\t\t// Check if Pickle is ASAR\r\n\t\t\t\t\tif (json.files) { // Final check, assuring Pickle/ASAR format\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\text: 'asar',\r\n\t\t\t\t\t\t\tmime: 'application/x-asar',\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch {}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.check([0x06, 0x0E, 0x2B, 0x34, 0x02, 0x05, 0x01, 0x01, 0x0D, 0x01, 0x02, 0x01, 0x01, 0x02])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'mxf',\r\n\t\t\t\tmime: 'application/mxf',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.checkString('SCRM', {offset: 44})) {\r\n\t\t\treturn {\r\n\t\t\t\text: 's3m',\r\n\t\t\t\tmime: 'audio/x-s3m',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// Raw MPEG-2 transport stream (188-byte packets)\r\n\t\tif (this.check([0x47]) && this.check([0x47], {offset: 188})) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'mts',\r\n\t\t\t\tmime: 'video/mp2t',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// Blu-ray Disc Audio-Video (BDAV) MPEG-2 transport stream has 4-byte TP_extra_header before each 188-byte packet\r\n\t\tif (this.check([0x47], {offset: 4}) && this.check([0x47], {offset: 196})) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'mts',\r\n\t\t\t\tmime: 'video/mp2t',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x42, 0x4F, 0x4F, 0x4B, 0x4D, 0x4F, 0x42, 0x49], {offset: 60})) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'mobi',\r\n\t\t\t\tmime: 'application/x-mobipocket-ebook',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x44, 0x49, 0x43, 0x4D], {offset: 128})) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'dcm',\r\n\t\t\t\tmime: 'application/dicom',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x4C, 0x00, 0x00, 0x00, 0x01, 0x14, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'lnk',\r\n\t\t\t\tmime: 'application/x.ms.shortcut', // Invented by us\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x62, 0x6F, 0x6F, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x61, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x00])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'alias',\r\n\t\t\t\tmime: 'application/x.apple.alias', // Invented by us\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.checkString('Kaydara FBX Binary  \\u0000')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'fbx',\r\n\t\t\t\tmime: 'application/x.autodesk.fbx', // Invented by us\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\tthis.check([0x4C, 0x50], {offset: 34})\r\n\t\t\t&& (\r\n\t\t\t\tthis.check([0x00, 0x00, 0x01], {offset: 8})\r\n\t\t\t\t|| this.check([0x01, 0x00, 0x02], {offset: 8})\r\n\t\t\t\t|| this.check([0x02, 0x00, 0x02], {offset: 8})\r\n\t\t\t)\r\n\t\t) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'eot',\r\n\t\t\t\tmime: 'application/vnd.ms-fontobject',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0x06, 0x06, 0xED, 0xF5, 0xD8, 0x1D, 0x46, 0xE5, 0xBD, 0x31, 0xEF, 0xE7, 0xFE, 0x74, 0xB7, 0x1D])) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'indd',\r\n\t\t\t\tmime: 'application/x-indesign',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// Increase sample size from 256 to 512\r\n\t\tawait tokenizer.peekBuffer(this.buffer, {length: Math.min(512, tokenizer.fileInfo.size), mayBeLess: true});\r\n\r\n\t\t// Requires a buffer size of 512 bytes\r\n\t\tif (tarHeaderChecksumMatches(this.buffer)) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'tar',\r\n\t\t\t\tmime: 'application/x-tar',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (this.check([0xFF, 0xFE])) { // UTF-16-BOM-BE\r\n\t\t\tif (this.check([60, 0, 63, 0, 120, 0, 109, 0, 108, 0], {offset: 2})) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\text: 'xml',\r\n\t\t\t\t\tmime: 'application/xml',\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tif (this.check([0xFF, 0x0E, 0x53, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x74, 0x00, 0x63, 0x00, 0x68, 0x00, 0x55, 0x00, 0x70, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x6C, 0x00], {offset: 2})) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\text: 'skp',\r\n\t\t\t\t\tmime: 'application/vnd.sketchup.skp',\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\treturn undefined; // Some text based format\r\n\t\t}\r\n\r\n\t\tif (this.checkString('-----BEGIN PGP MESSAGE-----')) {\r\n\t\t\treturn {\r\n\t\t\t\text: 'pgp',\r\n\t\t\t\tmime: 'application/pgp-encrypted',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// Check MPEG 1 or 2 Layer 3 header, or 'layer 0' for ADTS (MPEG sync-word 0xFFE)\r\n\t\tif (this.buffer.length >= 2 && this.check([0xFF, 0xE0], {offset: 0, mask: [0xFF, 0xE0]})) {\r\n\t\t\tif (this.check([0x10], {offset: 1, mask: [0x16]})) {\r\n\t\t\t\t// Check for (ADTS) MPEG-2\r\n\t\t\t\tif (this.check([0x08], {offset: 1, mask: [0x08]})) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\text: 'aac',\r\n\t\t\t\t\t\tmime: 'audio/aac',\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Must be (ADTS) MPEG-4\r\n\t\t\t\treturn {\r\n\t\t\t\t\text: 'aac',\r\n\t\t\t\t\tmime: 'audio/aac',\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// MPEG 1 or 2 Layer 3 header\r\n\t\t\t// Check for MPEG layer 3\r\n\t\t\tif (this.check([0x02], {offset: 1, mask: [0x06]})) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\text: 'mp3',\r\n\t\t\t\t\tmime: 'audio/mpeg',\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// Check for MPEG layer 2\r\n\t\t\tif (this.check([0x04], {offset: 1, mask: [0x06]})) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\text: 'mp2',\r\n\t\t\t\t\tmime: 'audio/mpeg',\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t// Check for MPEG layer 1\r\n\t\t\tif (this.check([0x06], {offset: 1, mask: [0x06]})) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\text: 'mp1',\r\n\t\t\t\t\tmime: 'audio/mpeg',\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tasync readTiffTag(bigEndian) {\r\n\t\tconst tagId = await this.tokenizer.readToken(bigEndian ? Token.UINT16_BE : Token.UINT16_LE);\r\n\t\tthis.tokenizer.ignore(10);\r\n\t\tswitch (tagId) {\r\n\t\t\tcase 50_341:\r\n\t\t\t\treturn {\r\n\t\t\t\t\text: 'arw',\r\n\t\t\t\t\tmime: 'image/x-sony-arw',\r\n\t\t\t\t};\r\n\t\t\tcase 50_706:\r\n\t\t\t\treturn {\r\n\t\t\t\t\text: 'dng',\r\n\t\t\t\t\tmime: 'image/x-adobe-dng',\r\n\t\t\t\t};\r\n\t\t\tdefault:\r\n\t\t}\r\n\t}\r\n\r\n\tasync readTiffIFD(bigEndian) {\r\n\t\tconst numberOfTags = await this.tokenizer.readToken(bigEndian ? Token.UINT16_BE : Token.UINT16_LE);\r\n\t\tfor (let n = 0; n < numberOfTags; ++n) {\r\n\t\t\tconst fileType = await this.readTiffTag(bigEndian);\r\n\t\t\tif (fileType) {\r\n\t\t\t\treturn fileType;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tasync readTiffHeader(bigEndian) {\r\n\t\tconst version = (bigEndian ? Token.UINT16_BE : Token.UINT16_LE).get(this.buffer, 2);\r\n\t\tconst ifdOffset = (bigEndian ? Token.UINT32_BE : Token.UINT32_LE).get(this.buffer, 4);\r\n\r\n\t\tif (version === 42) {\r\n\t\t\t// TIFF file header\r\n\t\t\tif (ifdOffset >= 6) {\r\n\t\t\t\tif (this.checkString('CR', {offset: 8})) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\text: 'cr2',\r\n\t\t\t\t\t\tmime: 'image/x-canon-cr2',\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (ifdOffset >= 8 && (this.check([0x1C, 0x00, 0xFE, 0x00], {offset: 8}) || this.check([0x1F, 0x00, 0x0B, 0x00], {offset: 8}))) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\text: 'nef',\r\n\t\t\t\t\t\tmime: 'image/x-nikon-nef',\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tawait this.tokenizer.ignore(ifdOffset);\r\n\t\t\tconst fileType = await this.readTiffIFD(bigEndian);\r\n\t\t\treturn fileType ?? {\r\n\t\t\t\text: 'tif',\r\n\t\t\t\tmime: 'image/tiff',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tif (version === 43) {\t// Big TIFF file header\r\n\t\t\treturn {\r\n\t\t\t\text: 'tif',\r\n\t\t\t\tmime: 'image/tiff',\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const supportedExtensions = new Set(extensions);\r\nexport const supportedMimeTypes = new Set(mimeTypes);\r\n", "import { fileTypeFromBuffer } from 'file-type';\r\nimport ContentType from 'content-type';\r\nimport { parse as mimeTypeParse } from 'media-typer';\r\nimport initDebug from 'debug';\r\nimport { MetadataCollector } from './common/MetadataCollector.js';\r\nimport { mpegParserLoader } from './mpeg/MpegLoader.js';\r\nimport { CouldNotDetermineFileTypeError, UnsupportedFileTypeError } from './ParseError.js';\r\nimport { apeParserLoader } from './apev2/Apev2Loader.js';\r\nimport { asfParserLoader } from './asf/AsfLoader.js';\r\nimport { dsdiffParserLoader } from './dsdiff/DsdiffLoader.js';\r\nimport { aiffParserLoader } from './aiff/AiffLoader.js';\r\nimport { dsfParserLoader } from './dsf/DsfLoader.js';\r\nimport { flacParserLoader } from './flac/FlacLoader.js';\r\nimport { matroskaParserLoader } from './matroska/MatroskaLoader.js';\r\nimport { mp4ParserLoader } from './mp4/Mp4Loader.js';\r\nimport { musepackParserLoader } from './musepack/MusepackLoader.js';\r\nimport { oggParserLoader } from './ogg/OggLoader.js';\r\nimport { wavpackParserLoader } from './wavpack/WavPackLoader.js';\r\nimport { riffParserLoader } from './wav/WaveLoader.js';\r\nimport { scanAppendingHeaders } from './core.js';\r\nconst debug = initDebug('music-metadata:parser:factory');\r\nexport function parseHttpContentType(contentType) {\r\n    const type = ContentType.parse(contentType);\r\n    const mime = mimeTypeParse(type.type);\r\n    return {\r\n        type: mime.type,\r\n        subtype: mime.subtype,\r\n        suffix: mime.suffix,\r\n        parameters: type.parameters\r\n    };\r\n}\r\nexport class ParserFactory {\r\n    constructor() {\r\n        this.parsers = [];\r\n        [\r\n            flacParserLoader,\r\n            mpegParserLoader,\r\n            apeParserLoader,\r\n            mp4ParserLoader,\r\n            matroskaParserLoader,\r\n            riffParserLoader,\r\n            oggParserLoader,\r\n            asfParserLoader,\r\n            aiffParserLoader,\r\n            wavpackParserLoader,\r\n            musepackParserLoader,\r\n            dsfParserLoader,\r\n            dsdiffParserLoader\r\n        ].forEach(parser => this.registerParser(parser));\r\n    }\r\n    registerParser(parser) {\r\n        this.parsers.push(parser);\r\n    }\r\n    async parse(tokenizer, parserLoader, opts) {\r\n        if (tokenizer.supportsRandomAccess()) {\r\n            debug('tokenizer supports random-access, scanning for appending headers');\r\n            await scanAppendingHeaders(tokenizer, opts);\r\n        }\r\n        else {\r\n            debug('tokenizer does not support random-access, cannot scan for appending headers');\r\n        }\r\n        if (!parserLoader) {\r\n            const buf = new Uint8Array(4100);\r\n            if (tokenizer.fileInfo.mimeType) {\r\n                parserLoader = this.findLoaderForType(getParserIdForMimeType(tokenizer.fileInfo.mimeType));\r\n            }\r\n            if (!parserLoader && tokenizer.fileInfo.path) {\r\n                parserLoader = this.findLoaderForExtension(tokenizer.fileInfo.path);\r\n            }\r\n            if (!parserLoader) {\r\n                // Parser could not be determined on MIME-type or extension\r\n                debug('Guess parser on content...');\r\n                await tokenizer.peekBuffer(buf, { mayBeLess: true });\r\n                const guessedType = await fileTypeFromBuffer(buf);\r\n                if (!guessedType || !guessedType.mime) {\r\n                    throw new CouldNotDetermineFileTypeError('Failed to determine audio format');\r\n                }\r\n                debug(`Guessed file type is mime=${guessedType.mime}, extension=${guessedType.ext}`);\r\n                parserLoader = this.findLoaderForType(getParserIdForMimeType(guessedType.mime));\r\n                if (!parserLoader) {\r\n                    throw new UnsupportedFileTypeError(`Guessed MIME-type not supported: ${guessedType.mime}`);\r\n                }\r\n            }\r\n        }\r\n        // Parser found, execute parser\r\n        debug(`Loading ${parserLoader.parserType} parser...`);\r\n        const metadata = new MetadataCollector(opts);\r\n        const parser = await parserLoader.load(metadata, tokenizer, opts ?? {});\r\n        debug(`Parser ${parserLoader.parserType} loaded`);\r\n        await parser.parse();\r\n        return metadata.toCommonMetadata();\r\n    }\r\n    /**\r\n     * @param filePath - Path, filename or extension to audio file\r\n     * @return Parser submodule name\r\n     */\r\n    findLoaderForExtension(filePath) {\r\n        if (!filePath)\r\n            return;\r\n        const extension = getExtension(filePath).toLocaleLowerCase() || filePath;\r\n        return this.parsers.find(parser => parser.extensions.indexOf(extension) !== -1);\r\n    }\r\n    findLoaderForType(moduleName) {\r\n        return moduleName ? this.parsers.find(parser => parser.parserType === moduleName) : undefined;\r\n    }\r\n}\r\nfunction getExtension(fname) {\r\n    const i = fname.lastIndexOf('.');\r\n    return i === -1 ? '' : fname.slice(i);\r\n}\r\n/**\r\n * @param httpContentType - HTTP Content-Type, extension, path or filename\r\n * @returns Parser submodule name\r\n */\r\nfunction getParserIdForMimeType(httpContentType) {\r\n    let mime;\r\n    if (!httpContentType)\r\n        return;\r\n    try {\r\n        mime = parseHttpContentType(httpContentType);\r\n    }\r\n    catch (err) {\r\n        debug(`Invalid HTTP Content-Type header value: ${httpContentType}`);\r\n        return;\r\n    }\r\n    const subType = mime.subtype.indexOf('x-') === 0 ? mime.subtype.substring(2) : mime.subtype;\r\n    switch (mime.type) {\r\n        case 'audio':\r\n            switch (subType) {\r\n                case 'mp3': // Incorrect MIME-type, Chrome, in Web API File object\r\n                case 'mpeg':\r\n                    return 'mpeg';\r\n                case 'aac':\r\n                case 'aacp':\r\n                    return 'mpeg'; // adts\r\n                case 'flac':\r\n                    return 'flac';\r\n                case 'ape':\r\n                case 'monkeys-audio':\r\n                    return 'apev2';\r\n                case 'mp4':\r\n                case 'm4a':\r\n                    return 'mp4';\r\n                case 'ogg': // RFC 7845\r\n                case 'opus': // RFC 6716\r\n                case 'speex': // RFC 5574\r\n                    return 'ogg';\r\n                case 'ms-wma':\r\n                case 'ms-wmv':\r\n                case 'ms-asf':\r\n                    return 'asf';\r\n                case 'aiff':\r\n                case 'aif':\r\n                case 'aifc':\r\n                    return 'aiff';\r\n                case 'vnd.wave':\r\n                case 'wav':\r\n                case 'wave':\r\n                    return 'riff';\r\n                case 'wavpack':\r\n                    return 'wavpack';\r\n                case 'musepack':\r\n                    return 'musepack';\r\n                case 'matroska':\r\n                case 'webm':\r\n                    return 'matroska';\r\n                case 'dsf':\r\n                    return 'dsf';\r\n                case 'amr':\r\n                    return 'amr';\r\n            }\r\n            break;\r\n        case 'video':\r\n            switch (subType) {\r\n                case 'ms-asf':\r\n                case 'ms-wmv':\r\n                    return 'asf';\r\n                case 'm4v':\r\n                case 'mp4':\r\n                    return 'mp4';\r\n                case 'ogg':\r\n                    return 'ogg';\r\n                case 'matroska':\r\n                case 'webm':\r\n                    return 'matroska';\r\n            }\r\n            break;\r\n        case 'application':\r\n            switch (subType) {\r\n                case 'vnd.ms-asf':\r\n                    return 'asf';\r\n                case 'ogg':\r\n                    return 'ogg';\r\n            }\r\n            break;\r\n    }\r\n}\r\n//# sourceMappingURL=ParserFactory.js.map", "import { TrackType } from '../type.js';\r\nimport initDebug from 'debug';\r\nimport { isSingleton, isUnique } from './GenericTagTypes.js';\r\nimport { CombinedTagMapper } from './CombinedTagMapper.js';\r\nimport { CommonTagMapper } from './GenericTagMapper.js';\r\nimport { toRatio } from './Util.js';\r\nimport { fileTypeFromBuffer } from 'file-type';\r\nimport { parseLrc } from '../lrc/LyricsParser.js';\r\nconst debug = initDebug('music-metadata:collector');\r\nconst TagPriority = ['matroska', 'APEv2', 'vorbis', 'ID3v2.4', 'ID3v2.3', 'ID3v2.2', 'exif', 'asf', 'iTunes', 'AIFF', 'ID3v1'];\r\n/**\r\n * Provided to the parser to uodate the metadata result.\r\n * Responsible for triggering async updates\r\n */\r\nexport class MetadataCollector {\r\n    constructor(opts) {\r\n        this.opts = opts;\r\n        this.format = {\r\n            tagTypes: [],\r\n            trackInfo: []\r\n        };\r\n        this.native = {};\r\n        this.common = {\r\n            track: { no: null, of: null },\r\n            disk: { no: null, of: null },\r\n            movementIndex: { no: null, of: null }\r\n        };\r\n        this.quality = {\r\n            warnings: []\r\n        };\r\n        /**\r\n         * Keeps track of origin priority for each mapped id\r\n         */\r\n        this.commonOrigin = {};\r\n        /**\r\n         * Maps a tag type to a priority\r\n         */\r\n        this.originPriority = {};\r\n        this.tagMapper = new CombinedTagMapper();\r\n        let priority = 1;\r\n        for (const tagType of TagPriority) {\r\n            this.originPriority[tagType] = priority++;\r\n        }\r\n        this.originPriority.artificial = 500; // Filled using alternative tags\r\n        this.originPriority.id3v1 = 600; // Consider as the worst because of the field length limit\r\n    }\r\n    /**\r\n     * @returns {boolean} true if one or more tags have been found\r\n     */\r\n    hasAny() {\r\n        return Object.keys(this.native).length > 0;\r\n    }\r\n    addStreamInfo(streamInfo) {\r\n        debug(`streamInfo: type=${streamInfo.type ? TrackType[streamInfo.type] : '?'}, codec=${streamInfo.codecName}`);\r\n        this.format.trackInfo.push(streamInfo);\r\n    }\r\n    setFormat(key, value) {\r\n        debug(`format: ${key} = ${value}`);\r\n        this.format[key] = value; // as any to override readonly\r\n        if (this.opts?.observer) {\r\n            this.opts.observer({ metadata: this, tag: { type: 'format', id: key, value } });\r\n        }\r\n    }\r\n    async addTag(tagType, tagId, value) {\r\n        debug(`tag ${tagType}.${tagId} = ${value}`);\r\n        if (!this.native[tagType]) {\r\n            this.format.tagTypes.push(tagType);\r\n            this.native[tagType] = [];\r\n        }\r\n        this.native[tagType].push({ id: tagId, value });\r\n        await this.toCommon(tagType, tagId, value);\r\n    }\r\n    addWarning(warning) {\r\n        this.quality.warnings.push({ message: warning });\r\n    }\r\n    async postMap(tagType, tag) {\r\n        // Common tag (alias) found\r\n        // check if we need to do something special with common tag\r\n        // if the event has been aliased then we need to clean it before\r\n        // it is emitted to the user. e.g. genre (20) -> Electronic\r\n        switch (tag.id) {\r\n            case 'artist':\r\n                if (this.commonOrigin.artist === this.originPriority[tagType]) {\r\n                    // Assume the artist field is used as artists\r\n                    return this.postMap('artificial', { id: 'artists', value: tag.value });\r\n                }\r\n                if (!this.common.artists) {\r\n                    // Fill artists using artist source\r\n                    this.setGenericTag('artificial', { id: 'artists', value: tag.value });\r\n                }\r\n                break;\r\n            case 'artists':\r\n                if (!this.common.artist || this.commonOrigin.artist === this.originPriority.artificial) {\r\n                    if (!this.common.artists || this.common.artists.indexOf(tag.value) === -1) {\r\n                        // Fill artist using artists source\r\n                        const artists = (this.common.artists || []).concat([tag.value]);\r\n                        const value = joinArtists(artists);\r\n                        const artistTag = { id: 'artist', value };\r\n                        this.setGenericTag('artificial', artistTag);\r\n                    }\r\n                }\r\n                break;\r\n            case 'picture':\r\n                return this.postFixPicture(tag.value).then(picture => {\r\n                    if (picture !== null) {\r\n                        tag.value = picture;\r\n                        this.setGenericTag(tagType, tag);\r\n                    }\r\n                });\r\n            case 'totaltracks':\r\n                this.common.track.of = CommonTagMapper.toIntOrNull(tag.value);\r\n                return;\r\n            case 'totaldiscs':\r\n                this.common.disk.of = CommonTagMapper.toIntOrNull(tag.value);\r\n                return;\r\n            case 'movementTotal':\r\n                this.common.movementIndex.of = CommonTagMapper.toIntOrNull(tag.value);\r\n                return;\r\n            case 'track':\r\n            case 'disk':\r\n            case 'movementIndex': {\r\n                const of = this.common[tag.id].of; // store of value, maybe maybe overwritten\r\n                this.common[tag.id] = CommonTagMapper.normalizeTrack(tag.value);\r\n                this.common[tag.id].of = of != null ? of : this.common[tag.id].of;\r\n                return;\r\n            }\r\n            case 'bpm':\r\n            case 'year':\r\n            case 'originalyear':\r\n                tag.value = Number.parseInt(tag.value, 10);\r\n                break;\r\n            case 'date': {\r\n                // ToDo: be more strict on 'YYYY...'\r\n                const year = Number.parseInt(tag.value.substr(0, 4), 10);\r\n                if (!Number.isNaN(year)) {\r\n                    this.common.year = year;\r\n                }\r\n                break;\r\n            }\r\n            case 'discogs_label_id':\r\n            case 'discogs_release_id':\r\n            case 'discogs_master_release_id':\r\n            case 'discogs_artist_id':\r\n            case 'discogs_votes':\r\n                tag.value = typeof tag.value === 'string' ? Number.parseInt(tag.value, 10) : tag.value;\r\n                break;\r\n            case 'replaygain_track_gain':\r\n            case 'replaygain_track_peak':\r\n            case 'replaygain_album_gain':\r\n            case 'replaygain_album_peak':\r\n                tag.value = toRatio(tag.value);\r\n                break;\r\n            case 'replaygain_track_minmax':\r\n                tag.value = tag.value.split(',').map(v => Number.parseInt(v, 10));\r\n                break;\r\n            case 'replaygain_undo': {\r\n                const minMix = tag.value.split(',').map(v => Number.parseInt(v, 10));\r\n                tag.value = {\r\n                    leftChannel: minMix[0],\r\n                    rightChannel: minMix[1]\r\n                };\r\n                break;\r\n            }\r\n            case 'gapless': // iTunes gap-less flag\r\n            case 'compilation':\r\n            case 'podcast':\r\n            case 'showMovement':\r\n                tag.value = tag.value === '1' || tag.value === 1; // boolean\r\n                break;\r\n            case 'isrc': { // Only keep unique values\r\n                const commonTag = this.common[tag.id];\r\n                if (commonTag && commonTag.indexOf(tag.value) !== -1)\r\n                    return;\r\n                break;\r\n            }\r\n            case 'comment':\r\n                if (typeof tag.value === 'string') {\r\n                    tag.value = { text: tag.value };\r\n                }\r\n                if (tag.value.descriptor === 'iTunPGAP') {\r\n                    this.setGenericTag(tagType, { id: 'gapless', value: tag.value.text === '1' });\r\n                }\r\n                break;\r\n            case 'lyrics':\r\n                if (typeof tag.value === 'string') {\r\n                    tag.value = parseLrc(tag.value);\r\n                }\r\n                break;\r\n            default:\r\n            // nothing to do\r\n        }\r\n        if (tag.value !== null) {\r\n            this.setGenericTag(tagType, tag);\r\n        }\r\n    }\r\n    /**\r\n     * Convert native tags to common tags\r\n     * @returns {IAudioMetadata} Native + common tags\r\n     */\r\n    toCommonMetadata() {\r\n        return {\r\n            format: this.format,\r\n            native: this.native,\r\n            quality: this.quality,\r\n            common: this.common\r\n        };\r\n    }\r\n    /**\r\n     * Fix some common issues with picture object\r\n     * @param picture Picture\r\n     */\r\n    async postFixPicture(picture) {\r\n        if (picture.data && picture.data.length > 0) {\r\n            if (!picture.format) {\r\n                const fileType = await fileTypeFromBuffer(Uint8Array.from(picture.data)); // ToDO: remove Buffer\r\n                if (fileType) {\r\n                    picture.format = fileType.mime;\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n            picture.format = picture.format.toLocaleLowerCase();\r\n            switch (picture.format) {\r\n                case 'image/jpg':\r\n                    picture.format = 'image/jpeg'; // ToDo: register warning\r\n            }\r\n            return picture;\r\n        }\r\n        this.addWarning(\"Empty picture tag found\");\r\n        return null;\r\n    }\r\n    /**\r\n     * Convert native tag to common tags\r\n     */\r\n    async toCommon(tagType, tagId, value) {\r\n        const tag = { id: tagId, value };\r\n        const genericTag = this.tagMapper.mapTag(tagType, tag, this);\r\n        if (genericTag) {\r\n            await this.postMap(tagType, genericTag);\r\n        }\r\n    }\r\n    /**\r\n     * Set generic tag\r\n     */\r\n    setGenericTag(tagType, tag) {\r\n        debug(`common.${tag.id} = ${tag.value}`);\r\n        const prio0 = this.commonOrigin[tag.id] || 1000;\r\n        const prio1 = this.originPriority[tagType];\r\n        if (isSingleton(tag.id)) {\r\n            if (prio1 <= prio0) {\r\n                this.common[tag.id] = tag.value;\r\n                this.commonOrigin[tag.id] = prio1;\r\n            }\r\n            else {\r\n                return debug(`Ignore native tag (singleton): ${tagType}.${tag.id} = ${tag.value}`);\r\n            }\r\n        }\r\n        else {\r\n            if (prio1 === prio0) {\r\n                if (!isUnique(tag.id) || this.common[tag.id].indexOf(tag.value) === -1) {\r\n                    this.common[tag.id].push(tag.value);\r\n                }\r\n                else {\r\n                    debug(`Ignore duplicate value: ${tagType}.${tag.id} = ${tag.value}`);\r\n                }\r\n                // no effect? this.commonOrigin[tag.id] = prio1;\r\n            }\r\n            else if (prio1 < prio0) {\r\n                this.common[tag.id] = [tag.value];\r\n                this.commonOrigin[tag.id] = prio1;\r\n            }\r\n            else {\r\n                return debug(`Ignore native tag (list): ${tagType}.${tag.id} = ${tag.value}`);\r\n            }\r\n        }\r\n        if (this.opts?.observer) {\r\n            this.opts.observer({ metadata: this, tag: { type: 'common', id: tag.id, value: tag.value } });\r\n        }\r\n        // ToDo: trigger metadata event\r\n    }\r\n}\r\nexport function joinArtists(artists) {\r\n    if (artists.length > 2) {\r\n        return `${artists.slice(0, artists.length - 1).join(', ')} & ${artists[artists.length - 1]}`;\r\n    }\r\n    return artists.join(' & ');\r\n}\r\n//# sourceMappingURL=MetadataCollector.js.map", "export const commonTags = {\r\n    year: { multiple: false },\r\n    track: { multiple: false },\r\n    disk: { multiple: false },\r\n    title: { multiple: false },\r\n    artist: { multiple: false },\r\n    artists: { multiple: true, unique: true },\r\n    albumartist: { multiple: false },\r\n    album: { multiple: false },\r\n    date: { multiple: false },\r\n    originaldate: { multiple: false },\r\n    originalyear: { multiple: false },\r\n    releasedate: { multiple: false },\r\n    comment: { multiple: true, unique: false },\r\n    genre: { multiple: true, unique: true },\r\n    picture: { multiple: true, unique: true },\r\n    composer: { multiple: true, unique: true },\r\n    lyrics: { multiple: true, unique: false },\r\n    albumsort: { multiple: false, unique: true },\r\n    titlesort: { multiple: false, unique: true },\r\n    work: { multiple: false, unique: true },\r\n    artistsort: { multiple: false, unique: true },\r\n    albumartistsort: { multiple: false, unique: true },\r\n    composersort: { multiple: false, unique: true },\r\n    lyricist: { multiple: true, unique: true },\r\n    writer: { multiple: true, unique: true },\r\n    conductor: { multiple: true, unique: true },\r\n    remixer: { multiple: true, unique: true },\r\n    arranger: { multiple: true, unique: true },\r\n    engineer: { multiple: true, unique: true },\r\n    producer: { multiple: true, unique: true },\r\n    technician: { multiple: true, unique: true },\r\n    djmixer: { multiple: true, unique: true },\r\n    mixer: { multiple: true, unique: true },\r\n    label: { multiple: true, unique: true },\r\n    grouping: { multiple: false },\r\n    subtitle: { multiple: true },\r\n    discsubtitle: { multiple: false },\r\n    totaltracks: { multiple: false },\r\n    totaldiscs: { multiple: false },\r\n    compilation: { multiple: false },\r\n    rating: { multiple: true },\r\n    bpm: { multiple: false },\r\n    mood: { multiple: false },\r\n    media: { multiple: false },\r\n    catalognumber: { multiple: true, unique: true },\r\n    tvShow: { multiple: false },\r\n    tvShowSort: { multiple: false },\r\n    tvSeason: { multiple: false },\r\n    tvEpisode: { multiple: false },\r\n    tvEpisodeId: { multiple: false },\r\n    tvNetwork: { multiple: false },\r\n    podcast: { multiple: false },\r\n    podcasturl: { multiple: false },\r\n    releasestatus: { multiple: false },\r\n    releasetype: { multiple: true },\r\n    releasecountry: { multiple: false },\r\n    script: { multiple: false },\r\n    language: { multiple: false },\r\n    copyright: { multiple: false },\r\n    license: { multiple: false },\r\n    encodedby: { multiple: false },\r\n    encodersettings: { multiple: false },\r\n    gapless: { multiple: false },\r\n    barcode: { multiple: false },\r\n    isrc: { multiple: true },\r\n    asin: { multiple: false },\r\n    musicbrainz_recordingid: { multiple: false },\r\n    musicbrainz_trackid: { multiple: false },\r\n    musicbrainz_albumid: { multiple: false },\r\n    musicbrainz_artistid: { multiple: true },\r\n    musicbrainz_albumartistid: { multiple: true },\r\n    musicbrainz_releasegroupid: { multiple: false },\r\n    musicbrainz_workid: { multiple: false },\r\n    musicbrainz_trmid: { multiple: false },\r\n    musicbrainz_discid: { multiple: false },\r\n    acoustid_id: { multiple: false },\r\n    acoustid_fingerprint: { multiple: false },\r\n    musicip_puid: { multiple: false },\r\n    musicip_fingerprint: { multiple: false },\r\n    website: { multiple: false },\r\n    'performer:instrument': { multiple: true, unique: true },\r\n    averageLevel: { multiple: false },\r\n    peakLevel: { multiple: false },\r\n    notes: { multiple: true, unique: false },\r\n    key: { multiple: false },\r\n    originalalbum: { multiple: false },\r\n    originalartist: { multiple: false },\r\n    discogs_artist_id: { multiple: true, unique: true },\r\n    discogs_release_id: { multiple: false },\r\n    discogs_label_id: { multiple: false },\r\n    discogs_master_release_id: { multiple: false },\r\n    discogs_votes: { multiple: false },\r\n    discogs_rating: { multiple: false },\r\n    replaygain_track_peak: { multiple: false },\r\n    replaygain_track_gain: { multiple: false },\r\n    replaygain_album_peak: { multiple: false },\r\n    replaygain_album_gain: { multiple: false },\r\n    replaygain_track_minmax: { multiple: false },\r\n    replaygain_album_minmax: { multiple: false },\r\n    replaygain_undo: { multiple: false },\r\n    description: { multiple: true },\r\n    longDescription: { multiple: false },\r\n    category: { multiple: true },\r\n    hdVideo: { multiple: false },\r\n    keywords: { multiple: true },\r\n    movement: { multiple: false },\r\n    movementIndex: { multiple: false },\r\n    movementTotal: { multiple: false },\r\n    podcastId: { multiple: false },\r\n    showMovement: { multiple: false },\r\n    stik: { multiple: false }\r\n};\r\n/**\r\n * @param alias Name of common tag\r\n * @returns {boolean|*} true if given alias is mapped as a singleton', otherwise false\r\n */\r\nexport function isSingleton(alias) {\r\n    return commonTags[alias] && !commonTags[alias].multiple;\r\n}\r\n/**\r\n * @param alias Common (generic) tag\r\n * @returns {boolean|*} true if given alias is a singleton or explicitly marked as unique\r\n */\r\nexport function isUnique(alias) {\r\n    return !commonTags[alias].multiple || commonTags[alias].unique || false;\r\n}\r\n//# sourceMappingURL=GenericTagTypes.js.map", "export class CommonTagMapper {\r\n    static toIntOrNull(str) {\r\n        const cleaned = Number.parseInt(str, 10);\r\n        return Number.isNaN(cleaned) ? null : cleaned;\r\n    }\r\n    // TODO: a string of 1of1 would fail to be converted\r\n    // converts 1/10 to no : 1, of : 10\r\n    // or 1 to no : 1, of : 0\r\n    static normalizeTrack(origVal) {\r\n        const split = origVal.toString().split('/');\r\n        return {\r\n            no: Number.parseInt(split[0], 10) || null,\r\n            of: Number.parseInt(split[1], 10) || null\r\n        };\r\n    }\r\n    constructor(tagTypes, tagMap) {\r\n        this.tagTypes = tagTypes;\r\n        this.tagMap = tagMap;\r\n    }\r\n    /**\r\n     * Process and set common tags\r\n     * write common tags to\r\n     * @param tag Native tag\r\n     * @param warnings Register warnings\r\n     * @return common name\r\n     */\r\n    mapGenericTag(tag, warnings) {\r\n        tag = { id: tag.id, value: tag.value }; // clone object\r\n        this.postMap(tag, warnings);\r\n        // Convert native tag event to generic 'alias' tag\r\n        const id = this.getCommonName(tag.id);\r\n        return id ? { id, value: tag.value } : null;\r\n    }\r\n    /**\r\n     * Convert native tag key to common tag key\r\n     * @param tag Native header tag\r\n     * @return common tag name (alias)\r\n     */\r\n    getCommonName(tag) {\r\n        return this.tagMap[tag];\r\n    }\r\n    /**\r\n     * Handle post mapping exceptions / correction\r\n     * @param tag Tag e.g. {\"©alb\", \"Buena Vista Social Club\")\r\n     * @param warnings Used to register warnings\r\n     */\r\n    postMap(tag, warnings) {\r\n        return;\r\n    }\r\n}\r\nCommonTagMapper.maxRatingScore = 1;\r\n//# sourceMappingURL=GenericTagMapper.js.map", "import { CommonTagMapper } from '../common/GenericTagMapper.js';\r\n/**\r\n * ID3v1 tag mappings\r\n */\r\nconst id3v1TagMap = {\r\n    title: 'title',\r\n    artist: 'artist',\r\n    album: 'album',\r\n    year: 'year',\r\n    comment: 'comment',\r\n    track: 'track',\r\n    genre: 'genre'\r\n};\r\nexport class ID3v1TagMapper extends CommonTagMapper {\r\n    constructor() {\r\n        super(['ID3v1'], id3v1TagMap);\r\n    }\r\n}\r\n//# sourceMappingURL=ID3v1TagMap.js.map", "import { CommonTagMapper } from './GenericTagMapper.js';\r\nexport class CaseInsensitiveTagMap extends CommonTagMapper {\r\n    constructor(tagTypes, tagMap) {\r\n        const upperCaseMap = {};\r\n        for (const tag of Object.keys(tagMap)) {\r\n            upperCaseMap[tag.toUpperCase()] = tagMap[tag];\r\n        }\r\n        super(tagTypes, upperCaseMap);\r\n    }\r\n    /**\r\n     * @tag  Native header tag\r\n     * @return common tag name (alias)\r\n     */\r\n    getCommonName(tag) {\r\n        return this.tagMap[tag.toUpperCase()];\r\n    }\r\n}\r\n//# sourceMappingURL=CaseInsensitiveTagMap.js.map", "import { UINT32_LE } from 'token-types';\r\nimport { CommonTagMapper } from '../common/GenericTagMapper.js';\r\nimport { CaseInsensitiveTagMap } from '../common/CaseInsensitiveTagMap.js';\r\nimport { decodeString } from '../common/Util.js';\r\n/**\r\n * ID3v2.3/ID3v2.4 tag mappings\r\n */\r\nconst id3v24TagMap = {\r\n    // id3v2.3\r\n    TIT2: 'title',\r\n    TPE1: 'artist',\r\n    'TXXX:Artists': 'artists',\r\n    TPE2: 'albumartist',\r\n    TALB: 'album',\r\n    TDRV: 'date', // [ 'date', 'year' ] ToDo: improve 'year' mapping\r\n    /**\r\n     * Original release year\r\n     */\r\n    TORY: 'originalyear',\r\n    TPOS: 'disk',\r\n    TCON: 'genre',\r\n    APIC: 'picture',\r\n    TCOM: 'composer',\r\n    USLT: 'lyrics',\r\n    TSOA: 'albumsort',\r\n    TSOT: 'titlesort',\r\n    TOAL: 'originalalbum',\r\n    TSOP: 'artistsort',\r\n    TSO2: 'albumartistsort',\r\n    TSOC: 'composersort',\r\n    TEXT: 'lyricist',\r\n    'TXXX:Writer': 'writer',\r\n    TPE3: 'conductor',\r\n    // 'IPLS:instrument': 'performer:instrument', // ToDo\r\n    TPE4: 'remixer',\r\n    'IPLS:arranger': 'arranger',\r\n    'IPLS:engineer': 'engineer',\r\n    'IPLS:producer': 'producer',\r\n    'IPLS:DJ-mix': 'djmixer',\r\n    'IPLS:mix': 'mixer',\r\n    TPUB: 'label',\r\n    TIT1: 'grouping',\r\n    TIT3: 'subtitle',\r\n    TRCK: 'track',\r\n    TCMP: 'compilation',\r\n    POPM: 'rating',\r\n    TBPM: 'bpm',\r\n    TMED: 'media',\r\n    'TXXX:CATALOGNUMBER': 'catalognumber',\r\n    'TXXX:MusicBrainz Album Status': 'releasestatus',\r\n    'TXXX:MusicBrainz Album Type': 'releasetype',\r\n    /**\r\n     * Release country as documented: https://picard.musicbrainz.org/docs/mappings/#cite_note-0\r\n     */\r\n    'TXXX:MusicBrainz Album Release Country': 'releasecountry',\r\n    /**\r\n     * Release country as implemented // ToDo: report\r\n     */\r\n    'TXXX:RELEASECOUNTRY': 'releasecountry',\r\n    'TXXX:SCRIPT': 'script',\r\n    TLAN: 'language',\r\n    TCOP: 'copyright',\r\n    WCOP: 'license',\r\n    TENC: 'encodedby',\r\n    TSSE: 'encodersettings',\r\n    'TXXX:BARCODE': 'barcode',\r\n    'TXXX:ISRC': 'isrc',\r\n    TSRC: 'isrc',\r\n    'TXXX:ASIN': 'asin',\r\n    'TXXX:originalyear': 'originalyear',\r\n    'UFID:http://musicbrainz.org': 'musicbrainz_recordingid',\r\n    'TXXX:MusicBrainz Release Track Id': 'musicbrainz_trackid',\r\n    'TXXX:MusicBrainz Album Id': 'musicbrainz_albumid',\r\n    'TXXX:MusicBrainz Artist Id': 'musicbrainz_artistid',\r\n    'TXXX:MusicBrainz Album Artist Id': 'musicbrainz_albumartistid',\r\n    'TXXX:MusicBrainz Release Group Id': 'musicbrainz_releasegroupid',\r\n    'TXXX:MusicBrainz Work Id': 'musicbrainz_workid',\r\n    'TXXX:MusicBrainz TRM Id': 'musicbrainz_trmid',\r\n    'TXXX:MusicBrainz Disc Id': 'musicbrainz_discid',\r\n    'TXXX:ACOUSTID_ID': 'acoustid_id',\r\n    'TXXX:Acoustid Id': 'acoustid_id',\r\n    'TXXX:Acoustid Fingerprint': 'acoustid_fingerprint',\r\n    'TXXX:MusicIP PUID': 'musicip_puid',\r\n    'TXXX:MusicMagic Fingerprint': 'musicip_fingerprint',\r\n    WOAR: 'website',\r\n    // id3v2.4\r\n    // ToDo: In same sequence as defined at http://id3.org/id3v2.4.0-frames\r\n    TDRC: 'date', // date YYYY-MM-DD\r\n    TYER: 'year',\r\n    TDOR: 'originaldate',\r\n    // 'TMCL:instrument': 'performer:instrument',\r\n    'TIPL:arranger': 'arranger',\r\n    'TIPL:engineer': 'engineer',\r\n    'TIPL:producer': 'producer',\r\n    'TIPL:DJ-mix': 'djmixer',\r\n    'TIPL:mix': 'mixer',\r\n    TMOO: 'mood',\r\n    // additional mappings:\r\n    SYLT: 'lyrics',\r\n    TSST: 'discsubtitle',\r\n    TKEY: 'key',\r\n    COMM: 'comment',\r\n    TOPE: 'originalartist',\r\n    // Windows Media Player\r\n    'PRIV:AverageLevel': 'averageLevel',\r\n    'PRIV:PeakLevel': 'peakLevel',\r\n    // Discogs\r\n    'TXXX:DISCOGS_ARTIST_ID': 'discogs_artist_id',\r\n    'TXXX:DISCOGS_ARTISTS': 'artists',\r\n    'TXXX:DISCOGS_ARTIST_NAME': 'artists',\r\n    'TXXX:DISCOGS_ALBUM_ARTISTS': 'albumartist',\r\n    'TXXX:DISCOGS_CATALOG': 'catalognumber',\r\n    'TXXX:DISCOGS_COUNTRY': 'releasecountry',\r\n    'TXXX:DISCOGS_DATE': 'originaldate',\r\n    'TXXX:DISCOGS_LABEL': 'label',\r\n    'TXXX:DISCOGS_LABEL_ID': 'discogs_label_id',\r\n    'TXXX:DISCOGS_MASTER_RELEASE_ID': 'discogs_master_release_id',\r\n    'TXXX:DISCOGS_RATING': 'discogs_rating',\r\n    'TXXX:DISCOGS_RELEASED': 'date',\r\n    'TXXX:DISCOGS_RELEASE_ID': 'discogs_release_id',\r\n    'TXXX:DISCOGS_VOTES': 'discogs_votes',\r\n    'TXXX:CATALOGID': 'catalognumber',\r\n    'TXXX:STYLE': 'genre',\r\n    'TXXX:REPLAYGAIN_TRACK_PEAK': 'replaygain_track_peak',\r\n    'TXXX:REPLAYGAIN_TRACK_GAIN': 'replaygain_track_gain',\r\n    'TXXX:REPLAYGAIN_ALBUM_PEAK': 'replaygain_album_peak',\r\n    'TXXX:REPLAYGAIN_ALBUM_GAIN': 'replaygain_album_gain',\r\n    'TXXX:MP3GAIN_MINMAX': 'replaygain_track_minmax',\r\n    'TXXX:MP3GAIN_ALBUM_MINMAX': 'replaygain_album_minmax',\r\n    'TXXX:MP3GAIN_UNDO': 'replaygain_undo',\r\n    MVNM: 'movement',\r\n    MVIN: 'movementIndex',\r\n    PCST: 'podcast',\r\n    TCAT: 'category',\r\n    TDES: 'description',\r\n    TDRL: 'releasedate',\r\n    TGID: 'podcastId',\r\n    TKWD: 'keywords',\r\n    WFED: 'podcasturl',\r\n    GRP1: 'grouping'\r\n};\r\nexport class ID3v24TagMapper extends CaseInsensitiveTagMap {\r\n    static toRating(popm) {\r\n        return {\r\n            source: popm.email,\r\n            rating: popm.rating > 0 ? (popm.rating - 1) / 254 * CommonTagMapper.maxRatingScore : undefined\r\n        };\r\n    }\r\n    constructor() {\r\n        super(['ID3v2.3', 'ID3v2.4'], id3v24TagMap);\r\n    }\r\n    /**\r\n     * Handle post mapping exceptions / correction\r\n     * @param tag to post map\r\n     * @param warnings Wil be used to register (collect) warnings\r\n     */\r\n    postMap(tag, warnings) {\r\n        switch (tag.id) {\r\n            case 'UFID':\r\n                {\r\n                    // decode MusicBrainz Recording Id\r\n                    const idTag = tag.value;\r\n                    if (idTag.owner_identifier === 'http://musicbrainz.org') {\r\n                        tag.id += `:${idTag.owner_identifier}`;\r\n                        tag.value = decodeString(idTag.identifier, 'latin1'); // latin1 == iso-8859-1\r\n                    }\r\n                }\r\n                break;\r\n            case 'PRIV':\r\n                {\r\n                    const customTag = tag.value;\r\n                    switch (customTag.owner_identifier) {\r\n                        // decode Windows Media Player\r\n                        case 'AverageLevel':\r\n                        case 'PeakValue':\r\n                            tag.id += `:${customTag.owner_identifier}`;\r\n                            tag.value = customTag.data.length === 4 ? UINT32_LE.get(customTag.data, 0) : null;\r\n                            if (tag.value === null) {\r\n                                warnings.addWarning('Failed to parse PRIV:PeakValue');\r\n                            }\r\n                            break;\r\n                        default:\r\n                            warnings.addWarning(`Unknown PRIV owner-identifier: ${customTag.data}`);\r\n                    }\r\n                }\r\n                break;\r\n            case 'POPM':\r\n                tag.value = ID3v24TagMapper.toRating(tag.value);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=ID3v24TagMapper.js.map", "import { CommonTagMapper } from '../common/GenericTagMapper.js';\r\n/**\r\n * ASF Metadata tag mappings.\r\n * See http://msdn.microsoft.com/en-us/library/ms867702.aspx\r\n */\r\nconst asfTagMap = {\r\n    Title: 'title',\r\n    Author: 'artist',\r\n    'WM/AlbumArtist': 'albumartist',\r\n    'WM/AlbumTitle': 'album',\r\n    'WM/Year': 'date', // changed to 'year' to 'date' based on Picard mappings; ToDo: check me\r\n    'WM/OriginalReleaseTime': 'originaldate',\r\n    'WM/OriginalReleaseYear': 'originalyear',\r\n    Description: 'comment',\r\n    'WM/TrackNumber': 'track',\r\n    'WM/PartOfSet': 'disk',\r\n    'WM/Genre': 'genre',\r\n    'WM/Composer': 'composer',\r\n    'WM/Lyrics': 'lyrics',\r\n    'WM/AlbumSortOrder': 'albumsort',\r\n    'WM/TitleSortOrder': 'titlesort',\r\n    'WM/ArtistSortOrder': 'artistsort',\r\n    'WM/AlbumArtistSortOrder': 'albumartistsort',\r\n    'WM/ComposerSortOrder': 'composersort',\r\n    'WM/Writer': 'lyricist',\r\n    'WM/Conductor': 'conductor',\r\n    'WM/ModifiedBy': 'remixer',\r\n    'WM/Engineer': 'engineer',\r\n    'WM/Producer': 'producer',\r\n    'WM/DJMixer': 'djmixer',\r\n    'WM/Mixer': 'mixer',\r\n    'WM/Publisher': 'label',\r\n    'WM/ContentGroupDescription': 'grouping',\r\n    'WM/SubTitle': 'subtitle',\r\n    'WM/SetSubTitle': 'discsubtitle',\r\n    // 'WM/PartOfSet': 'totaldiscs',\r\n    'WM/IsCompilation': 'compilation',\r\n    'WM/SharedUserRating': 'rating',\r\n    'WM/BeatsPerMinute': 'bpm',\r\n    'WM/Mood': 'mood',\r\n    'WM/Media': 'media',\r\n    'WM/CatalogNo': 'catalognumber',\r\n    'MusicBrainz/Album Status': 'releasestatus',\r\n    'MusicBrainz/Album Type': 'releasetype',\r\n    'MusicBrainz/Album Release Country': 'releasecountry',\r\n    'WM/Script': 'script',\r\n    'WM/Language': 'language',\r\n    Copyright: 'copyright',\r\n    LICENSE: 'license',\r\n    'WM/EncodedBy': 'encodedby',\r\n    'WM/EncodingSettings': 'encodersettings',\r\n    'WM/Barcode': 'barcode',\r\n    'WM/ISRC': 'isrc',\r\n    'MusicBrainz/Track Id': 'musicbrainz_recordingid',\r\n    'MusicBrainz/Release Track Id': 'musicbrainz_trackid',\r\n    'MusicBrainz/Album Id': 'musicbrainz_albumid',\r\n    'MusicBrainz/Artist Id': 'musicbrainz_artistid',\r\n    'MusicBrainz/Album Artist Id': 'musicbrainz_albumartistid',\r\n    'MusicBrainz/Release Group Id': 'musicbrainz_releasegroupid',\r\n    'MusicBrainz/Work Id': 'musicbrainz_workid',\r\n    'MusicBrainz/TRM Id': 'musicbrainz_trmid',\r\n    'MusicBrainz/Disc Id': 'musicbrainz_discid',\r\n    'Acoustid/Id': 'acoustid_id',\r\n    'Acoustid/Fingerprint': 'acoustid_fingerprint',\r\n    'MusicIP/PUID': 'musicip_puid',\r\n    'WM/ARTISTS': 'artists',\r\n    'WM/InitialKey': 'key',\r\n    ASIN: 'asin',\r\n    'WM/Work': 'work',\r\n    'WM/AuthorURL': 'website',\r\n    'WM/Picture': 'picture'\r\n};\r\nexport class AsfTagMapper extends CommonTagMapper {\r\n    static toRating(rating) {\r\n        return {\r\n            rating: Number.parseFloat(rating + 1) / 5\r\n        };\r\n    }\r\n    constructor() {\r\n        super(['asf'], asfTagMap);\r\n    }\r\n    postMap(tag) {\r\n        switch (tag.id) {\r\n            case 'WM/SharedUserRating': {\r\n                const keys = tag.id.split(':');\r\n                tag.value = AsfTagMapper.toRating(tag.value);\r\n                tag.id = keys[0];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=AsfTagMapper.js.map", "import { CaseInsensitiveTagMap } from '../common/CaseInsensitiveTagMap.js';\r\n/**\r\n * ID3v2.2 tag mappings\r\n */\r\nexport const id3v22TagMap = {\r\n    TT2: 'title',\r\n    TP1: 'artist',\r\n    TP2: 'albumartist',\r\n    TAL: 'album',\r\n    TYE: 'year',\r\n    COM: 'comment',\r\n    TRK: 'track',\r\n    TPA: 'disk',\r\n    TCO: 'genre',\r\n    PIC: 'picture',\r\n    TCM: 'composer',\r\n    TOR: 'originaldate',\r\n    TOT: 'originalalbum',\r\n    TXT: 'lyricist',\r\n    TP3: 'conductor',\r\n    TPB: 'label',\r\n    TT1: 'grouping',\r\n    TT3: 'subtitle',\r\n    TLA: 'language',\r\n    TCR: 'copyright',\r\n    WCP: 'license',\r\n    TEN: 'encodedby',\r\n    TSS: 'encodersettings',\r\n    WAR: 'website',\r\n    PCS: 'podcast',\r\n    TCP: \"compilation\",\r\n    TDR: 'date',\r\n    TS2: 'albumartistsort',\r\n    TSA: 'albumsort',\r\n    TSC: 'composersort',\r\n    TSP: 'artistsort',\r\n    TST: 'titlesort',\r\n    WFD: 'podcasturl',\r\n    TBP: 'bpm'\r\n};\r\nexport class ID3v22TagMapper extends CaseInsensitiveTagMap {\r\n    constructor() {\r\n        super(['ID3v2.2'], id3v22TagMap);\r\n    }\r\n}\r\n//# sourceMappingURL=ID3v22TagMapper.js.map", "import { CaseInsensitiveTagMap } from '../common/CaseInsensitiveTagMap.js';\r\n/**\r\n * ID3v2.2 tag mappings\r\n */\r\nconst apev2TagMap = {\r\n    Title: 'title',\r\n    Artist: 'artist',\r\n    Artists: 'artists',\r\n    'Album Artist': 'albumartist',\r\n    Album: 'album',\r\n    Year: 'date',\r\n    Originalyear: 'originalyear',\r\n    Originaldate: 'originaldate',\r\n    Releasedate: 'releasedate',\r\n    Comment: 'comment',\r\n    Track: 'track',\r\n    Disc: 'disk',\r\n    DISCNUMBER: 'disk', // ToDo: backwards compatibility', valid tag?\r\n    Genre: 'genre',\r\n    'Cover Art (Front)': 'picture',\r\n    'Cover Art (Back)': 'picture',\r\n    Composer: 'composer',\r\n    Lyrics: 'lyrics',\r\n    ALBUMSORT: 'albumsort',\r\n    TITLESORT: 'titlesort',\r\n    WORK: 'work',\r\n    ARTISTSORT: 'artistsort',\r\n    ALBUMARTISTSORT: 'albumartistsort',\r\n    COMPOSERSORT: 'composersort',\r\n    Lyricist: 'lyricist',\r\n    Writer: 'writer',\r\n    Conductor: 'conductor',\r\n    // 'Performer=artist (instrument)': 'performer:instrument',\r\n    MixArtist: 'remixer',\r\n    Arranger: 'arranger',\r\n    Engineer: 'engineer',\r\n    Producer: 'producer',\r\n    DJMixer: 'djmixer',\r\n    Mixer: 'mixer',\r\n    Label: 'label',\r\n    Grouping: 'grouping',\r\n    Subtitle: 'subtitle',\r\n    DiscSubtitle: 'discsubtitle',\r\n    Compilation: 'compilation',\r\n    BPM: 'bpm',\r\n    Mood: 'mood',\r\n    Media: 'media',\r\n    CatalogNumber: 'catalognumber',\r\n    MUSICBRAINZ_ALBUMSTATUS: 'releasestatus',\r\n    MUSICBRAINZ_ALBUMTYPE: 'releasetype',\r\n    RELEASECOUNTRY: 'releasecountry',\r\n    Script: 'script',\r\n    Language: 'language',\r\n    Copyright: 'copyright',\r\n    LICENSE: 'license',\r\n    EncodedBy: 'encodedby',\r\n    EncoderSettings: 'encodersettings',\r\n    Barcode: 'barcode',\r\n    ISRC: 'isrc',\r\n    ASIN: 'asin',\r\n    musicbrainz_trackid: 'musicbrainz_recordingid',\r\n    musicbrainz_releasetrackid: 'musicbrainz_trackid',\r\n    MUSICBRAINZ_ALBUMID: 'musicbrainz_albumid',\r\n    MUSICBRAINZ_ARTISTID: 'musicbrainz_artistid',\r\n    MUSICBRAINZ_ALBUMARTISTID: 'musicbrainz_albumartistid',\r\n    MUSICBRAINZ_RELEASEGROUPID: 'musicbrainz_releasegroupid',\r\n    MUSICBRAINZ_WORKID: 'musicbrainz_workid',\r\n    MUSICBRAINZ_TRMID: 'musicbrainz_trmid',\r\n    MUSICBRAINZ_DISCID: 'musicbrainz_discid',\r\n    Acoustid_Id: 'acoustid_id',\r\n    ACOUSTID_FINGERPRINT: 'acoustid_fingerprint',\r\n    MUSICIP_PUID: 'musicip_puid',\r\n    Weblink: 'website',\r\n    REPLAYGAIN_TRACK_GAIN: 'replaygain_track_gain',\r\n    REPLAYGAIN_TRACK_PEAK: 'replaygain_track_peak',\r\n    MP3GAIN_MINMAX: 'replaygain_track_minmax',\r\n    MP3GAIN_UNDO: 'replaygain_undo'\r\n};\r\nexport class APEv2TagMapper extends CaseInsensitiveTagMap {\r\n    constructor() {\r\n        super(['APEv2'], apev2TagMap);\r\n    }\r\n}\r\n//# sourceMappingURL=APEv2TagMapper.js.map", "import { CaseInsensitiveTagMap } from '../common/CaseInsensitiveTagMap.js';\r\n/**\r\n * Ref: https://github.com/sergiomb2/libmp4v2/wiki/iTunesMetadata\r\n */\r\nconst mp4TagMap = {\r\n    '©nam': 'title',\r\n    '©ART': 'artist',\r\n    aART: 'albumartist',\r\n    /**\r\n     * ToDo: Album artist seems to be stored here while Picard documentation says: aART\r\n     */\r\n    '----:com.apple.iTunes:Band': 'albumartist',\r\n    '©alb': 'album',\r\n    '©day': 'date',\r\n    '©cmt': 'comment',\r\n    '©com': 'comment',\r\n    trkn: 'track',\r\n    disk: 'disk',\r\n    '©gen': 'genre',\r\n    covr: 'picture',\r\n    '©wrt': 'composer',\r\n    '©lyr': 'lyrics',\r\n    soal: 'albumsort',\r\n    sonm: 'titlesort',\r\n    soar: 'artistsort',\r\n    soaa: 'albumartistsort',\r\n    soco: 'composersort',\r\n    '----:com.apple.iTunes:LYRICIST': 'lyricist',\r\n    '----:com.apple.iTunes:CONDUCTOR': 'conductor',\r\n    '----:com.apple.iTunes:REMIXER': 'remixer',\r\n    '----:com.apple.iTunes:ENGINEER': 'engineer',\r\n    '----:com.apple.iTunes:PRODUCER': 'producer',\r\n    '----:com.apple.iTunes:DJMIXER': 'djmixer',\r\n    '----:com.apple.iTunes:MIXER': 'mixer',\r\n    '----:com.apple.iTunes:LABEL': 'label',\r\n    '©grp': 'grouping',\r\n    '----:com.apple.iTunes:SUBTITLE': 'subtitle',\r\n    '----:com.apple.iTunes:DISCSUBTITLE': 'discsubtitle',\r\n    cpil: 'compilation',\r\n    tmpo: 'bpm',\r\n    '----:com.apple.iTunes:MOOD': 'mood',\r\n    '----:com.apple.iTunes:MEDIA': 'media',\r\n    '----:com.apple.iTunes:CATALOGNUMBER': 'catalognumber',\r\n    tvsh: 'tvShow',\r\n    tvsn: 'tvSeason',\r\n    tves: 'tvEpisode',\r\n    sosn: 'tvShowSort',\r\n    tven: 'tvEpisodeId',\r\n    tvnn: 'tvNetwork',\r\n    pcst: 'podcast',\r\n    purl: 'podcasturl',\r\n    '----:com.apple.iTunes:MusicBrainz Album Status': 'releasestatus',\r\n    '----:com.apple.iTunes:MusicBrainz Album Type': 'releasetype',\r\n    '----:com.apple.iTunes:MusicBrainz Album Release Country': 'releasecountry',\r\n    '----:com.apple.iTunes:SCRIPT': 'script',\r\n    '----:com.apple.iTunes:LANGUAGE': 'language',\r\n    cprt: 'copyright',\r\n    '©cpy': 'copyright',\r\n    '----:com.apple.iTunes:LICENSE': 'license',\r\n    '©too': 'encodedby',\r\n    pgap: 'gapless',\r\n    '----:com.apple.iTunes:BARCODE': 'barcode',\r\n    '----:com.apple.iTunes:ISRC': 'isrc',\r\n    '----:com.apple.iTunes:ASIN': 'asin',\r\n    '----:com.apple.iTunes:NOTES': 'comment',\r\n    '----:com.apple.iTunes:MusicBrainz Track Id': 'musicbrainz_recordingid',\r\n    '----:com.apple.iTunes:MusicBrainz Release Track Id': 'musicbrainz_trackid',\r\n    '----:com.apple.iTunes:MusicBrainz Album Id': 'musicbrainz_albumid',\r\n    '----:com.apple.iTunes:MusicBrainz Artist Id': 'musicbrainz_artistid',\r\n    '----:com.apple.iTunes:MusicBrainz Album Artist Id': 'musicbrainz_albumartistid',\r\n    '----:com.apple.iTunes:MusicBrainz Release Group Id': 'musicbrainz_releasegroupid',\r\n    '----:com.apple.iTunes:MusicBrainz Work Id': 'musicbrainz_workid',\r\n    '----:com.apple.iTunes:MusicBrainz TRM Id': 'musicbrainz_trmid',\r\n    '----:com.apple.iTunes:MusicBrainz Disc Id': 'musicbrainz_discid',\r\n    '----:com.apple.iTunes:Acoustid Id': 'acoustid_id',\r\n    '----:com.apple.iTunes:Acoustid Fingerprint': 'acoustid_fingerprint',\r\n    '----:com.apple.iTunes:MusicIP PUID': 'musicip_puid',\r\n    '----:com.apple.iTunes:fingerprint': 'musicip_fingerprint',\r\n    '----:com.apple.iTunes:replaygain_track_gain': 'replaygain_track_gain',\r\n    '----:com.apple.iTunes:replaygain_track_peak': 'replaygain_track_peak',\r\n    '----:com.apple.iTunes:replaygain_album_gain': 'replaygain_album_gain',\r\n    '----:com.apple.iTunes:replaygain_album_peak': 'replaygain_album_peak',\r\n    '----:com.apple.iTunes:replaygain_track_minmax': 'replaygain_track_minmax',\r\n    '----:com.apple.iTunes:replaygain_album_minmax': 'replaygain_album_minmax',\r\n    '----:com.apple.iTunes:replaygain_undo': 'replaygain_undo',\r\n    // Additional mappings:\r\n    gnre: 'genre', // ToDo: check mapping\r\n    '----:com.apple.iTunes:ALBUMARTISTSORT': 'albumartistsort',\r\n    '----:com.apple.iTunes:ARTISTS': 'artists',\r\n    '----:com.apple.iTunes:ORIGINALDATE': 'originaldate',\r\n    '----:com.apple.iTunes:ORIGINALYEAR': 'originalyear',\r\n    '----:com.apple.iTunes:RELEASEDATE': 'releasedate',\r\n    // '----:com.apple.iTunes:PERFORMER': 'performer'\r\n    desc: 'description',\r\n    ldes: 'longDescription',\r\n    '©mvn': 'movement',\r\n    '©mvi': 'movementIndex',\r\n    '©mvc': 'movementTotal',\r\n    '©wrk': 'work',\r\n    catg: 'category',\r\n    egid: 'podcastId',\r\n    hdvd: 'hdVideo',\r\n    keyw: 'keywords',\r\n    shwm: 'showMovement',\r\n    stik: 'stik',\r\n    rate: 'rating'\r\n};\r\nexport const tagType = 'iTunes';\r\nexport class MP4TagMapper extends CaseInsensitiveTagMap {\r\n    constructor() {\r\n        super([tagType], mp4TagMap);\r\n    }\r\n    postMap(tag, warnings) {\r\n        switch (tag.id) {\r\n            case 'rate':\r\n                tag.value = {\r\n                    source: undefined,\r\n                    rating: Number.parseFloat(tag.value) / 100\r\n                };\r\n                break;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=MP4TagMapper.js.map", "import { CommonTagMapper } from '../../common/GenericTagMapper.js';\r\n/**\r\n * Vorbis tag mappings\r\n *\r\n * Mapping from native header format to one or possibly more 'common' entries\r\n * The common entries aim to read the same information from different media files\r\n * independent of the underlying format\r\n */\r\nconst vorbisTagMap = {\r\n    TITLE: 'title',\r\n    ARTIST: 'artist',\r\n    ARTISTS: 'artists',\r\n    ALBUMARTIST: 'albumartist',\r\n    'ALBUM ARTIST': 'albumartist',\r\n    ALBUM: 'album',\r\n    DATE: 'date',\r\n    ORIGINALDATE: 'originaldate',\r\n    ORIGINALYEAR: 'originalyear',\r\n    RELEASEDATE: 'releasedate',\r\n    COMMENT: 'comment',\r\n    TRACKNUMBER: 'track',\r\n    DISCNUMBER: 'disk',\r\n    GENRE: 'genre',\r\n    METADATA_BLOCK_PICTURE: 'picture',\r\n    COMPOSER: 'composer',\r\n    LYRICS: 'lyrics',\r\n    ALBUMSORT: 'albumsort',\r\n    TITLESORT: 'titlesort',\r\n    WORK: 'work',\r\n    ARTISTSORT: 'artistsort',\r\n    ALBUMARTISTSORT: 'albumartistsort',\r\n    COMPOSERSORT: 'composersort',\r\n    LYRICIST: 'lyricist',\r\n    WRITER: 'writer',\r\n    CONDUCTOR: 'conductor',\r\n    // 'PERFORMER=artist (instrument)': 'performer:instrument', // ToDo\r\n    REMIXER: 'remixer',\r\n    ARRANGER: 'arranger',\r\n    ENGINEER: 'engineer',\r\n    PRODUCER: 'producer',\r\n    DJMIXER: 'djmixer',\r\n    MIXER: 'mixer',\r\n    LABEL: 'label',\r\n    GROUPING: 'grouping',\r\n    SUBTITLE: 'subtitle',\r\n    DISCSUBTITLE: 'discsubtitle',\r\n    TRACKTOTAL: 'totaltracks',\r\n    DISCTOTAL: 'totaldiscs',\r\n    COMPILATION: 'compilation',\r\n    RATING: 'rating',\r\n    BPM: 'bpm',\r\n    KEY: 'key',\r\n    MOOD: 'mood',\r\n    MEDIA: 'media',\r\n    CATALOGNUMBER: 'catalognumber',\r\n    RELEASESTATUS: 'releasestatus',\r\n    RELEASETYPE: 'releasetype',\r\n    RELEASECOUNTRY: 'releasecountry',\r\n    SCRIPT: 'script',\r\n    LANGUAGE: 'language',\r\n    COPYRIGHT: 'copyright',\r\n    LICENSE: 'license',\r\n    ENCODEDBY: 'encodedby',\r\n    ENCODERSETTINGS: 'encodersettings',\r\n    BARCODE: 'barcode',\r\n    ISRC: 'isrc',\r\n    ASIN: 'asin',\r\n    MUSICBRAINZ_TRACKID: 'musicbrainz_recordingid',\r\n    MUSICBRAINZ_RELEASETRACKID: 'musicbrainz_trackid',\r\n    MUSICBRAINZ_ALBUMID: 'musicbrainz_albumid',\r\n    MUSICBRAINZ_ARTISTID: 'musicbrainz_artistid',\r\n    MUSICBRAINZ_ALBUMARTISTID: 'musicbrainz_albumartistid',\r\n    MUSICBRAINZ_RELEASEGROUPID: 'musicbrainz_releasegroupid',\r\n    MUSICBRAINZ_WORKID: 'musicbrainz_workid',\r\n    MUSICBRAINZ_TRMID: 'musicbrainz_trmid',\r\n    MUSICBRAINZ_DISCID: 'musicbrainz_discid',\r\n    ACOUSTID_ID: 'acoustid_id',\r\n    ACOUSTID_ID_FINGERPRINT: 'acoustid_fingerprint',\r\n    MUSICIP_PUID: 'musicip_puid',\r\n    // 'FINGERPRINT=MusicMagic Fingerprint {fingerprint}': 'musicip_fingerprint', // ToDo\r\n    WEBSITE: 'website',\r\n    NOTES: 'notes',\r\n    TOTALTRACKS: 'totaltracks',\r\n    TOTALDISCS: 'totaldiscs',\r\n    // Discogs\r\n    DISCOGS_ARTIST_ID: 'discogs_artist_id',\r\n    DISCOGS_ARTISTS: 'artists',\r\n    DISCOGS_ARTIST_NAME: 'artists',\r\n    DISCOGS_ALBUM_ARTISTS: 'albumartist',\r\n    DISCOGS_CATALOG: 'catalognumber',\r\n    DISCOGS_COUNTRY: 'releasecountry',\r\n    DISCOGS_DATE: 'originaldate',\r\n    DISCOGS_LABEL: 'label',\r\n    DISCOGS_LABEL_ID: 'discogs_label_id',\r\n    DISCOGS_MASTER_RELEASE_ID: 'discogs_master_release_id',\r\n    DISCOGS_RATING: 'discogs_rating',\r\n    DISCOGS_RELEASED: 'date',\r\n    DISCOGS_RELEASE_ID: 'discogs_release_id',\r\n    DISCOGS_VOTES: 'discogs_votes',\r\n    CATALOGID: 'catalognumber',\r\n    STYLE: 'genre',\r\n    //\r\n    REPLAYGAIN_TRACK_GAIN: 'replaygain_track_gain',\r\n    REPLAYGAIN_TRACK_PEAK: 'replaygain_track_peak',\r\n    REPLAYGAIN_ALBUM_GAIN: 'replaygain_album_gain',\r\n    REPLAYGAIN_ALBUM_PEAK: 'replaygain_album_peak',\r\n    // To Sure if these (REPLAYGAIN_MINMAX, REPLAYGAIN_ALBUM_MINMAX & REPLAYGAIN_UNDO) are used for Vorbis:\r\n    REPLAYGAIN_MINMAX: 'replaygain_track_minmax',\r\n    REPLAYGAIN_ALBUM_MINMAX: 'replaygain_album_minmax',\r\n    REPLAYGAIN_UNDO: 'replaygain_undo'\r\n};\r\nexport class VorbisTagMapper extends CommonTagMapper {\r\n    static toRating(email, rating, maxScore) {\r\n        return {\r\n            source: email ? email.toLowerCase() : undefined,\r\n            rating: (Number.parseFloat(rating) / maxScore) * CommonTagMapper.maxRatingScore\r\n        };\r\n    }\r\n    constructor() {\r\n        super(['vorbis'], vorbisTagMap);\r\n    }\r\n    postMap(tag) {\r\n        if (tag.id === 'RATING') {\r\n            // The way Winamp 5.666 assigns rating\r\n            tag.value = VorbisTagMapper.toRating(undefined, tag.value, 100);\r\n        }\r\n        else if (tag.id.indexOf('RATING:') === 0) {\r\n            const keys = tag.id.split(':');\r\n            tag.value = VorbisTagMapper.toRating(keys[1], tag.value, 1);\r\n            tag.id = keys[0];\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=VorbisTagMapper.js.map", "import { CommonTagMapper } from '../common/GenericTagMapper.js';\r\n/**\r\n * RIFF Info Tags; part of the EXIF 2.3\r\n * Ref: http://owl.phy.queensu.ca/~phil/exiftool/TagNames/RIFF.html#Info\r\n */\r\nexport const riffInfoTagMap = {\r\n    IART: 'artist', // Artist\r\n    ICRD: 'date', // DateCreated\r\n    INAM: 'title', // Title\r\n    TITL: 'title',\r\n    IPRD: 'album', // Product\r\n    ITRK: 'track',\r\n    IPRT: 'track', // Additional tag for track index\r\n    COMM: 'comment', // Comments\r\n    ICMT: 'comment', // Country\r\n    ICNT: 'releasecountry',\r\n    GNRE: 'genre', // Genre\r\n    IWRI: 'writer', // WrittenBy\r\n    RATE: 'rating',\r\n    YEAR: 'year',\r\n    ISFT: 'encodedby', // Software\r\n    CODE: 'encodedby', // EncodedBy\r\n    TURL: 'website', // URL,\r\n    IGNR: 'genre', // Genre\r\n    IENG: 'engineer', // Engineer\r\n    ITCH: 'technician', // Technician\r\n    IMED: 'media', // Original Media\r\n    IRPD: 'album' // Product, where the file was intended for\r\n};\r\nexport class RiffInfoTagMapper extends CommonTagMapper {\r\n    constructor() {\r\n        super(['exif'], riffInfoTagMap);\r\n    }\r\n}\r\n//# sourceMappingURL=RiffInfoTagMap.js.map", "import { CaseInsensitiveTagMap } from '../common/CaseInsensitiveTagMap.js';\r\n/**\r\n * EBML Tag map\r\n */\r\nconst ebmlTagMap = {\r\n    'segment:title': 'title',\r\n    'album:ARTIST': 'albumartist',\r\n    'album:ARTISTSORT': 'albumartistsort',\r\n    'album:TITLE': 'album',\r\n    'album:DATE_RECORDED': 'originaldate',\r\n    'album:DATE_RELEASED': 'releasedate',\r\n    'album:PART_NUMBER': 'disk',\r\n    'album:TOTAL_PARTS': 'totaltracks',\r\n    'track:ARTIST': 'artist',\r\n    'track:ARTISTSORT': 'artistsort',\r\n    'track:TITLE': 'title',\r\n    'track:PART_NUMBER': 'track',\r\n    'track:MUSICBRAINZ_TRACKID': 'musicbrainz_recordingid',\r\n    'track:MUSICBRAINZ_ALBUMID': 'musicbrainz_albumid',\r\n    'track:MUSICBRAINZ_ARTISTID': 'musicbrainz_artistid',\r\n    'track:PUBLISHER': 'label',\r\n    'track:GENRE': 'genre',\r\n    'track:ENCODER': 'encodedby',\r\n    'track:ENCODER_OPTIONS': 'encodersettings',\r\n    'edition:TOTAL_PARTS': 'totaldiscs',\r\n    picture: 'picture'\r\n};\r\nexport class MatroskaTagMapper extends CaseInsensitiveTagMap {\r\n    constructor() {\r\n        super(['matroska'], ebmlTagMap);\r\n    }\r\n}\r\n//# sourceMappingURL=MatroskaTagMapper.js.map", "import { CommonTagMapper } from '../common/GenericTagMapper.js';\r\n/**\r\n * ID3v1 tag mappings\r\n */\r\nconst tagMap = {\r\n    NAME: 'title',\r\n    AUTH: 'artist',\r\n    '(c) ': 'copyright',\r\n    ANNO: 'comment'\r\n};\r\nexport class AiffTagMapper extends CommonTagMapper {\r\n    constructor() {\r\n        super(['AIFF'], tagMap);\r\n    }\r\n}\r\n//# sourceMappingURL=AiffTagMap.js.map", "import { ID3v1TagMapper } from '../id3v1/ID3v1TagMap.js';\r\nimport { ID3v24TagMapper } from '../id3v2/ID3v24TagMapper.js';\r\nimport { AsfTagMapper } from '../asf/AsfTagMapper.js';\r\nimport { ID3v22TagMapper } from '../id3v2/ID3v22TagMapper.js';\r\nimport { APEv2TagMapper } from '../apev2/APEv2TagMapper.js';\r\nimport { MP4TagMapper } from '../mp4/MP4TagMapper.js';\r\nimport { VorbisTagMapper } from '../ogg/vorbis/VorbisTagMapper.js';\r\nimport { RiffInfoTagMapper } from '../riff/RiffInfoTagMap.js';\r\nimport { MatroskaTagMapper } from '../matroska/MatroskaTagMapper.js';\r\nimport { AiffTagMapper } from '../aiff/AiffTagMap.js';\r\nimport { InternalParserError } from '../ParseError.js';\r\nexport class CombinedTagMapper {\r\n    constructor() {\r\n        this.tagMappers = {};\r\n        [\r\n            new ID3v1TagMapper(),\r\n            new ID3v22TagMapper(),\r\n            new ID3v24TagMapper(),\r\n            new MP4TagMapper(),\r\n            new MP4TagMapper(),\r\n            new VorbisTagMapper(),\r\n            new APEv2TagMapper(),\r\n            new AsfTagMapper(),\r\n            new RiffInfoTagMapper(),\r\n            new MatroskaTagMapper(),\r\n            new AiffTagMapper()\r\n        ].forEach(mapper => {\r\n            this.registerTagMapper(mapper);\r\n        });\r\n    }\r\n    /**\r\n     * Convert native to generic (common) tags\r\n     * @param tagType Originating tag format\r\n     * @param tag     Native tag to map to a generic tag id\r\n     * @param warnings\r\n     * @return Generic tag result (output of this function)\r\n     */\r\n    mapTag(tagType, tag, warnings) {\r\n        const tagMapper = this.tagMappers[tagType];\r\n        if (tagMapper) {\r\n            return this.tagMappers[tagType].mapGenericTag(tag, warnings);\r\n        }\r\n        throw new InternalParserError(`No generic tag mapper defined for tag-format: ${tagType}`);\r\n    }\r\n    registerTagMapper(genericTagMapper) {\r\n        for (const tagType of genericTagMapper.tagTypes) {\r\n            this.tagMappers[tagType] = genericTagMapper;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=CombinedTagMapper.js.map", "import { LyricsContentType, TimestampFormat } from '../type.js';\r\n/**\r\n * Parse LRC (Lyrics) formatted text\r\n * Ref: https://en.wikipedia.org/wiki/LRC_(file_format)\r\n * @param lrcString\r\n */\r\nexport function parseLrc(lrcString) {\r\n    const lines = lrcString.split('\\n');\r\n    const syncText = [];\r\n    // Regular expression to match LRC timestamps (e.g., [00:45.52])\r\n    const timestampRegex = /\\[(\\d{2}):(\\d{2})\\.(\\d{2})\\]/;\r\n    for (const line of lines) {\r\n        const match = line.match(timestampRegex);\r\n        if (match) {\r\n            const minutes = Number.parseInt(match[1], 10);\r\n            const seconds = Number.parseInt(match[2], 10);\r\n            const hundredths = Number.parseInt(match[3], 10);\r\n            // Convert the timestamp to milliseconds, as per TimestampFormat.milliseconds\r\n            const timestamp = (minutes * 60 + seconds) * 1000 + hundredths * 10;\r\n            // Get the text portion of the line (e.g., \"あの蝶は自由になれたかな\")\r\n            const text = line.replace(timestampRegex, '').trim();\r\n            syncText.push({ timestamp, text });\r\n        }\r\n    }\r\n    // Creating the ILyricsTag object\r\n    return {\r\n        contentType: LyricsContentType.lyrics,\r\n        timeStampFormat: TimestampFormat.milliseconds,\r\n        syncText,\r\n    };\r\n}\r\n//# sourceMappingURL=LyricsParser.js.map", "export const mpegParserLoader = {\r\n    parserType: 'mpeg',\r\n    extensions: ['.mp2', '.mp3', '.m2a', '.aac', 'aacp'],\r\n    async load(metadata, tokenizer, options) {\r\n        return new (await import('./MpegParser.js')).MpegParser(metadata, tokenizer, options);\r\n    }\r\n};\r\n//# sourceMappingURL=MpegLoader.js.map", "export const apeParserLoader = {\r\n    parserType: 'apev2',\r\n    extensions: ['.ape'],\r\n    async load(metadata, tokenizer, options) {\r\n        return new (await import('./APEv2Parser.js')).APEv2Parser(metadata, tokenizer, options);\r\n    }\r\n};\r\n//# sourceMappingURL=Apev2Loader.js.map", "export const asfParserLoader = {\r\n    parserType: 'asf',\r\n    extensions: ['.asf'],\r\n    async load(metadata, tokenizer, options) {\r\n        return new (await import('./AsfParser.js')).AsfParser(metadata, tokenizer, options);\r\n    }\r\n};\r\n//# sourceMappingURL=AsfLoader.js.map", "export const dsdiffParserLoader = {\r\n    parserType: 'dsdiff',\r\n    extensions: ['.dff'],\r\n    async load(metadata, tokenizer, options) {\r\n        return new (await import('./DsdiffParser.js')).DsdiffParser(metadata, tokenizer, options);\r\n    }\r\n};\r\n//# sourceMappingURL=DsdiffLoader.js.map", "export const aiffParserLoader = {\r\n    parserType: 'aiff',\r\n    extensions: ['.aif', 'aiff', 'aifc'],\r\n    async load(metadata, tokenizer, options) {\r\n        return new (await import('./AiffParser.js')).AIFFParser(metadata, tokenizer, options);\r\n    }\r\n};\r\n//# sourceMappingURL=AiffLoader.js.map", "export const dsfParserLoader = {\r\n    parserType: 'dsf',\r\n    extensions: ['.dsf'],\r\n    async load(metadata, tokenizer, options) {\r\n        return new (await import('./DsfParser.js')).DsfParser(metadata, tokenizer, options);\r\n    }\r\n};\r\n//# sourceMappingURL=DsfLoader.js.map", "export const flacParserLoader = {\r\n    parserType: 'flac',\r\n    extensions: ['.flac'],\r\n    async load(metadata, tokenizer, options) {\r\n        return new (await import('./FlacParser.js')).FlacParser(metadata, tokenizer, options);\r\n    }\r\n};\r\n//# sourceMappingURL=FlacLoader.js.map", "export const matroskaParserLoader = {\r\n    parserType: 'matroska',\r\n    extensions: ['.mka', '.mkv', '.mk3d', '.mks', 'webm'],\r\n    async load(metadata, tokenizer, options) {\r\n        return new (await import('./MatroskaParser.js')).MatroskaParser(metadata, tokenizer, options);\r\n    }\r\n};\r\n//# sourceMappingURL=MatroskaLoader.js.map", "export const mp4ParserLoader = {\r\n    parserType: 'mp4',\r\n    extensions: ['.mp4', '.m4a', '.m4b', '.m4pa', 'm4v', 'm4r', '3gp'],\r\n    async load(metadata, tokenizer, options) {\r\n        return new (await import('./MP4Parser.js')).MP4Parser(metadata, tokenizer, options);\r\n    }\r\n};\r\n//# sourceMappingURL=Mp4Loader.js.map", "export const musepackParserLoader = {\r\n    parserType: 'musepack',\r\n    extensions: ['.mpc'],\r\n    async load(metadata, tokenizer, options) {\r\n        return new (await import('./MusepackParser.js')).MusepackParser(metadata, tokenizer, options);\r\n    }\r\n};\r\n//# sourceMappingURL=MusepackLoader.js.map", "export const oggParserLoader = {\r\n    parserType: 'ogg',\r\n    extensions: ['.ogg', '.ogv', '.oga', '.ogm', '.ogx', '.opus', '.spx'],\r\n    async load(metadata, tokenizer, options) {\r\n        return new (await import('./OggParser.js')).OggParser(metadata, tokenizer, options);\r\n    }\r\n};\r\n//# sourceMappingURL=OggLoader.js.map", "export const wavpackParserLoader = {\r\n    parserType: 'wavpack',\r\n    extensions: ['.wv', '.wvp'],\r\n    async load(metadata, tokenizer, options) {\r\n        return new (await import('./WavPackParser.js')).WavPackParser(metadata, tokenizer, options);\r\n    }\r\n};\r\n//# sourceMappingURL=WavPackLoader.js.map", "export const riffParserLoader = {\r\n    parserType: 'riff',\r\n    extensions: ['.wav', 'wave', '.bwf'],\r\n    async load(metadata, tokenizer, options) {\r\n        return new (await import('./WaveParser.js')).WaveParser(metadata, tokenizer, options);\r\n    }\r\n};\r\n//# sourceMappingURL=WaveLoader.js.map", "export const endTag2 = 'LYRICS200';\r\nexport async function getLyricsHeaderLength(tokenizer) {\r\n    const fileSize = tokenizer.fileInfo.size;\r\n    if (fileSize >= 143) {\r\n        const buf = new Uint8Array(15);\r\n        const position = tokenizer.position;\r\n        await tokenizer.readBuffer(buf, { position: fileSize - 143 });\r\n        tokenizer.setPosition(position); // Restore position\r\n        const txt = new TextDecoder('latin1').decode(buf);\r\n        const tag = txt.slice(6);\r\n        if (tag === endTag2) {\r\n            return Number.parseInt(txt.slice(0, 6), 10) + 15;\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n//# sourceMappingURL=Lyrics3.js.map", "/**\r\n * Primary entry point, Node.js specific entry point is MusepackParser.ts\r\n */\r\nimport { fromWebStream, fromBuffer } from 'strtok3';\r\nimport { ParserFactory } from './ParserFactory.js';\r\nimport { APEv2Parser } from './apev2/APEv2Parser.js';\r\nimport { hasID3v1Header } from './id3v1/ID3v1Parser.js';\r\nimport { getLyricsHeaderLength } from './lyrics3/Lyrics3.js';\r\nexport { LyricsContentType, TimestampFormat } from './type.js';\r\n/**\r\n * Parse Web API File\r\n * Requires Blob to be able to stream using a ReadableStreamBYOBReader, only available since Node.js ≥ 20\r\n * @param blob - Blob to parse\r\n * @param options - Parsing options\r\n * @returns Metadata\r\n */\r\nexport async function parseBlob(blob, options = {}) {\r\n    const fileInfo = { mimeType: blob.type, size: blob.size };\r\n    if (blob instanceof File) {\r\n        fileInfo.path = blob.name;\r\n    }\r\n    return parseWebStream(blob.stream(), fileInfo, options);\r\n}\r\n/**\r\n * Parse audio from Web Stream.Readable\r\n * @param webStream - WebStream to read the audio track from\r\n * @param options - Parsing options\r\n * @param fileInfo - File information object or MIME-type string\r\n * @returns Metadata\r\n */\r\nexport async function parseWebStream(webStream, fileInfo, options = {}) {\r\n    const tokenizer = fromWebStream(webStream, { fileInfo: typeof fileInfo === 'string' ? { mimeType: fileInfo } : fileInfo });\r\n    try {\r\n        return await parseFromTokenizer(tokenizer, options);\r\n    }\r\n    finally {\r\n        await tokenizer.close();\r\n    }\r\n}\r\n/**\r\n * Parse audio from memory\r\n * @param uint8Array - Uint8Array holding audio data\r\n * @param fileInfo - File information object or MIME-type string\r\n * @param options - Parsing options\r\n * @returns Metadata\r\n * Ref: https://github.com/Borewit/strtok3/blob/e6938c81ff685074d5eb3064a11c0b03ca934c1d/src/index.ts#L15\r\n */\r\nexport async function parseBuffer(uint8Array, fileInfo, options = {}) {\r\n    const tokenizer = fromBuffer(uint8Array, { fileInfo: typeof fileInfo === 'string' ? { mimeType: fileInfo } : fileInfo });\r\n    return parseFromTokenizer(tokenizer, options);\r\n}\r\n/**\r\n * Parse audio from ITokenizer source\r\n * @param tokenizer - Audio source implementing the tokenizer interface\r\n * @param options - Parsing options\r\n * @returns Metadata\r\n */\r\nexport function parseFromTokenizer(tokenizer, options) {\r\n    const parserFactory = new ParserFactory();\r\n    return parserFactory.parse(tokenizer, undefined, options);\r\n}\r\n/**\r\n * Create a dictionary ordered by their tag id (key)\r\n * @param nativeTags list of tags\r\n * @returns tags indexed by id\r\n */\r\nexport function orderTags(nativeTags) {\r\n    const tags = {};\r\n    for (const { id, value } of nativeTags) {\r\n        if (!tags[id]) {\r\n            tags[id] = [];\r\n        }\r\n        tags[id].push(value);\r\n    }\r\n    return tags;\r\n}\r\n/**\r\n * Convert rating to 1-5 star rating\r\n * @param rating Normalized rating [0..1] (common.rating[n].rating)\r\n * @returns Number of stars: 1, 2, 3, 4 or 5 stars\r\n */\r\nexport function ratingToStars(rating) {\r\n    return rating === undefined ? 0 : 1 + Math.round(rating * 4);\r\n}\r\n/**\r\n * Select most likely cover image.\r\n * @param pictures Usually metadata.common.picture\r\n * @return Cover image, if any, otherwise null\r\n */\r\nexport function selectCover(pictures) {\r\n    return pictures ? pictures.reduce((acc, cur) => {\r\n        if (cur.name && cur.name.toLowerCase() in ['front', 'cover', 'cover (front)'])\r\n            return cur;\r\n        return acc;\r\n    }) : null;\r\n}\r\nexport async function scanAppendingHeaders(tokenizer, options = {}) {\r\n    let apeOffset = tokenizer.fileInfo.size;\r\n    if (await hasID3v1Header(tokenizer)) {\r\n        apeOffset -= 128;\r\n        const lyricsLen = await getLyricsHeaderLength(tokenizer);\r\n        apeOffset -= lyricsLen;\r\n    }\r\n    options.apeHeader = await APEv2Parser.findApeFooterOffset(tokenizer, apeOffset);\r\n}\r\n//# sourceMappingURL=core.js.map"],
  "mappings": "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",
  "names": ["ContentType", "fromWebStream", "fromBuffer", "fromBuffer", "fromWebStream", "maxBufferSize", "import_debug", "tagMap", "tagMap", "tagType", "initDebug", "tagType", "debug", "initDebug", "ContentType", "mimeTypeParse"]
}
